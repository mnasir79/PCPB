"use strict";angular.module("chromeStorage",[]).factory("chromeStorage",function(e){var r=null;try{r=chrome.storage.local}catch(o){console.log("could not initiate chrome local storage: "+o)}var n=null,t={},c=function(o){var n=e.defer();return r.getBytesInUse(o,function(e){chrome.runtime.lasterror?(console.log("error retrieving bytes in use for keys "+o),n.reject(chrome.runtime.lasterror.message)):(console.log("retrieved bytes in use for keys "+o+": "+e),n.resolve(e))}),n.promise};return{getDebuggingTotalBytesInUse:function(){return n},getDebuggingCache:function(){return t},getDebuggingPercentUsed:function(){var e=n/r.QUOTA_BYTES;return e},getDebuggingSizeOf:function(e){return angular.toJson(t[e]).length},updateDebuggingCache:function(){var o=e.defer();r.get(null,function(e){chrome.runtime.lasterror?o.reject(chrome.runtime.lasterror.message):o.resolve(e)}),o.promise.then(function(e){t=e})},updateDebuggingTotalBytes:function(){c(null).then(function(e){console.log("total bytes in use: "+e),n=e})},clearCache:function(){r.clear(function(){chrome.runtime.lastError?console.error("error clearing local cache"+chrome.runtime.lastError):console.log("cache has been cleared")})},drop:function(e){r.remove(e,function(){chrome.runtime.lasterror&&console.error(chrome.runtime.lasterror.message)})},get:function(o){var n=e.defer();return r.get(o,function(e){var r=e[o];n.resolve(r)}),n.promise},getOrElse:function(o,n){var t=e.defer();return r.get(o,function(e){var c=e[o];void 0==c||null==c?n().then(function(e){c=e;var n={};n[o]=c,r.set(n,function(){chrome.runtime.lasterror&&console.error(chrome.runtime.lasterror.message)}),t.resolve(c)}):t.resolve(c)}),t.promise},set:function(e,o){var n={};n[e]=o,r.set(n,function(){chrome.runtime.lasterror&&console.error(chrome.runtime.lasterror.message)})},forceGet:function(o,n){var t=e.defer();return n().then(function(e){keyValue=e;var n={};n[o]=keyValue,r.set(n,function(){chrome.runtime.lasterror&&console.error(chrome.runtime.lasterror.message)}),t.resolve(keyValue)}),t.promise},getQuota:function(){return r.QUOTA_BYTES}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvb3B0aW9ucy12ZW5kb3IuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImZhY3RvcnkiLCIkcSIsImFyZWEiLCJjaHJvbWUiLCJzdG9yYWdlIiwibG9jYWwiLCJlcnIiLCJjb25zb2xlIiwibG9nIiwidG90YWxCeXRlcyIsImNhY2hlIiwiZ2V0Qnl0ZXNJblVzZSIsImtleXMiLCJkZWZlcnJlZCIsImRlZmVyIiwiYnl0ZXNJblVzZSIsInJ1bnRpbWUiLCJsYXN0ZXJyb3IiLCJyZWplY3QiLCJtZXNzYWdlIiwicmVzb2x2ZSIsInByb21pc2UiLCJnZXREZWJ1Z2dpbmdUb3RhbEJ5dGVzSW5Vc2UiLCJnZXREZWJ1Z2dpbmdDYWNoZSIsImdldERlYnVnZ2luZ1BlcmNlbnRVc2VkIiwicGVyY2VudCIsIlFVT1RBX0JZVEVTIiwiZ2V0RGVidWdnaW5nU2l6ZU9mIiwia2V5IiwidG9Kc29uIiwibGVuZ3RoIiwidXBkYXRlRGVidWdnaW5nQ2FjaGUiLCJnZXQiLCJ2YWx1ZSIsInRoZW4iLCJkYXRhIiwidXBkYXRlRGVidWdnaW5nVG90YWxCeXRlcyIsImNsZWFyQ2FjaGUiLCJjbGVhciIsImxhc3RFcnJvciIsImVycm9yIiwiZHJvcCIsInJlbW92ZSIsImtleVZhbHVlIiwiZ2V0T3JFbHNlIiwiZmFsbGJhY2siLCJ1bmRlZmluZWQiLCJzYXZlT2JqZWN0Iiwic2V0IiwiZm9yY2VHZXQiLCJnZXRRdW90YSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFFQUEsU0FBUUMsT0FBTyxvQkFDYkMsUUFBUSxnQkFBaUIsU0FBU0MsR0FDbkMsR0FBSUMsR0FBTyxJQUNYLEtBQ0NBLEVBQU9DLE9BQU9DLFFBQVFDLE1BQ3JCLE1BQU9DLEdBQ1JDLFFBQVFDLElBQUksNENBQThDRixHQU0zRCxHQUFJRyxHQUFhLEtBQ2JDLEtBTUFDLEVBQWdCLFNBQVVDLEdBQzFCLEdBQUlDLEdBQVdaLEVBQUdhLE9BYWxCLE9BWEFaLEdBQUtTLGNBQWNDLEVBQU0sU0FBU0csR0FDMUJaLE9BQU9hLFFBQVFDLFdBQ2xCVixRQUFRQyxJQUFJLDBDQUE0Q0ksR0FDckRDLEVBQVNLLE9BQU9mLE9BQU9hLFFBQVFDLFVBQVVFLFdBRzVDWixRQUFRQyxJQUFJLG1DQUFxQ0ksRUFBTyxLQUFPRyxHQUM1REYsRUFBU08sUUFBUUwsTUFJbEJGLEVBQVNRLFFBR2xCLFFBQ0NDLDRCQUE2QixXQUM1QixNQUFPYixJQUVYYyxrQkFBbUIsV0FDbEIsTUFBT2IsSUFLUmMsd0JBQXlCLFdBQ3hCLEdBQUlDLEdBQVVoQixFQUFhUCxFQUFLd0IsV0FDaEMsT0FBT0QsSUFFUkUsbUJBQW9CLFNBQVNDLEdBQzVCLE1BQU85QixTQUFRK0IsT0FBT25CLEVBQU1rQixJQUFNRSxRQUVuQ0MscUJBQXNCLFdBQ3JCLEdBQUlsQixHQUFXWixFQUFHYSxPQUNsQlosR0FBSzhCLElBQUksS0FBTSxTQUFVQyxHQUNwQjlCLE9BQU9hLFFBQVFDLFVBQ1RKLEVBQVNLLE9BQU9mLE9BQU9hLFFBQVFDLFVBQVVFLFNBR3pDTixFQUFTTyxRQUFRYSxLQUc1QnBCLEVBQVNRLFFBQVFhLEtBQU0sU0FBVUMsR0FDaEN6QixFQUFReUIsS0FHVkMsMEJBQTJCLFdBQzFCekIsRUFBYyxNQUFNdUIsS0FBSyxTQUFTQyxHQUNqQzVCLFFBQVFDLElBQUksdUJBQXlCMkIsR0FDckMxQixFQUFhMEIsS0FHWkUsV0FBWSxXQUVkbkMsRUFBS29DLE1BQU0sV0FDTm5DLE9BQU9hLFFBQVF1QixVQUNaaEMsUUFBUWlDLE1BQU0sNkJBQStCckMsT0FBT2EsUUFBUXVCLFdBRS9EaEMsUUFBUUMsSUFBSSw2QkFJbEJpQyxLQUFNLFNBQVNiLEdBQ2QxQixFQUFLd0MsT0FBT2QsRUFBSyxXQUNaekIsT0FBT2EsUUFBUUMsV0FDVFYsUUFBUWlDLE1BQU1yQyxPQUFPYSxRQUFRQyxVQUFVRSxZQU1uRGEsSUFBSyxTQUFTSixHQUNiLEdBQUlmLEdBQVdaLEVBQUdhLE9BTWxCLE9BTEFaLEdBQUs4QixJQUFJSixFQUFLLFNBQVVLLEdBRWpCLEdBQUlVLEdBQVdWLEVBQU1MLEVBQ2xCZixHQUFTTyxRQUFRdUIsS0FFcEI5QixFQUFTUSxTQU1qQnVCLFVBQVcsU0FBU2hCLEVBQUtpQixHQUV4QixHQUFJaEMsR0FBV1osRUFBR2EsT0F3QmxCLE9BdkJNWixHQUFLOEIsSUFBSUosRUFBSyxTQUFTSyxHQUV0QixHQUFJVSxHQUFXVixFQUFNTCxFQUNMa0IsU0FBWkgsR0FBcUMsTUFBWkEsRUFFNUJFLElBQVdYLEtBQUssU0FBU0MsR0FDeEJRLEVBQVdSLENBRVgsSUFBSVksS0FDSkEsR0FBV25CLEdBQU9lLEVBQ2xCekMsRUFBSzhDLElBQUlELEVBQVksV0FDaEI1QyxPQUFPYSxRQUFRQyxXQUNmVixRQUFRaUMsTUFBTXJDLE9BQU9hLFFBQVFDLFVBQVVFLFdBSzVDTixFQUFTTyxRQUFRdUIsS0FHbEI5QixFQUFTTyxRQUFRdUIsS0FHbEI5QixFQUFTUSxTQUtqQjJCLElBQUssU0FBU3BCLEVBQUtLLEdBQ2xCLEdBQUljLEtBQ0pBLEdBQVduQixHQUFPSyxFQUNsQi9CLEVBQUs4QyxJQUFJRCxFQUFZLFdBQ2hCNUMsT0FBT2EsUUFBUUMsV0FDZlYsUUFBUWlDLE1BQU1yQyxPQUFPYSxRQUFRQyxVQUFVRSxZQVc3QzhCLFNBQVUsU0FBU3JCLEVBQUtpQixHQUV2QixHQUFJaEMsR0FBV1osRUFBR2EsT0FlbEIsT0FkTStCLEtBQVdYLEtBQUssU0FBU0MsR0FDOUJRLFNBQVdSLENBRVgsSUFBSVksS0FDSkEsR0FBV25CLEdBQU9lLFNBQ2xCekMsRUFBSzhDLElBQUlELEVBQVksV0FDaEI1QyxPQUFPYSxRQUFRQyxXQUNUVixRQUFRaUMsTUFBTXJDLE9BQU9hLFFBQVFDLFVBQVVFLFdBS2xETixFQUFTTyxRQUFRdUIsWUFFWDlCLEVBQVNRLFNBS2pCNkIsU0FBVSxXQUNULE1BQU9oRCxHQUFLd0IiLCJmaWxlIjoic2NyaXB0cy9vcHRpb25zLXZlbmRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKFwiY2hyb21lU3RvcmFnZVwiLFtdKVxyXG5cdC5mYWN0b3J5KCdjaHJvbWVTdG9yYWdlJywgZnVuY3Rpb24oJHEpIHtcclxuXHR2YXIgYXJlYSA9IG51bGw7XHJcblx0dHJ5IHtcclxuXHRcdGFyZWEgPSBjaHJvbWUuc3RvcmFnZS5sb2NhbDsgLy8gY2hhbmdlIHRoaXMgdG8gY2hyb21lLnN0b3JhZ2Uuc3luYyBmb3Igc3luYyBjYXBhYmlsaXRpZXNcclxuXHR9IGNhdGNoIChlcnIpIHtcclxuXHRcdGNvbnNvbGUubG9nKFwiY291bGQgbm90IGluaXRpYXRlIGNocm9tZSBsb2NhbCBzdG9yYWdlOiBcIiArIGVycik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUaGVzZSBhcmUgcHJvdmlkZWQgYW5kIHVwZGF0ZWQgb25seSBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLlxyXG5cdCAqL1xyXG5cdHZhciB0b3RhbEJ5dGVzID0gbnVsbDtcclxuXHR2YXIgY2FjaGUgPSB7fTtcclxuXHJcblx0LyoqXHJcblx0ICogQSBjYWxsIHRvIGdldCB0aGUgYnl0ZXMgaW4gdXNlLCByZXR1cm5zIGEgcHJvbWlzZSBvZiB0aGUgc2l6ZSBvZiBhbiBpbmRpdmlkdWFsIGtleSwgb3JcclxuXHQgKiBvZiB0b3RhbCBieXRlcyBpbiB1c2UsIGlmIG5vIGtleSBpcyBzcGVjaWZpZWQuXHJcblx0ICovXHJcblx0dmFyIGdldEJ5dGVzSW5Vc2UgPSBmdW5jdGlvbiAoa2V5cyl7XHJcblx0ICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcblxyXG5cdCAgICBhcmVhLmdldEJ5dGVzSW5Vc2Uoa2V5cywgZnVuY3Rpb24oYnl0ZXNJblVzZSkge1xyXG5cdCAgICAgICAgaWYgKGNocm9tZS5ydW50aW1lLmxhc3RlcnJvcil7XHJcblx0ICAgICAgICBcdGNvbnNvbGUubG9nKFwiZXJyb3IgcmV0cmlldmluZyBieXRlcyBpbiB1c2UgZm9yIGtleXMgXCIgKyBrZXlzKTtcclxuXHQgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoY2hyb21lLnJ1bnRpbWUubGFzdGVycm9yLm1lc3NhZ2UpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICBcdGNvbnNvbGUubG9nKFwicmV0cmlldmVkIGJ5dGVzIGluIHVzZSBmb3Iga2V5cyBcIiArIGtleXMgKyBcIjogXCIgKyBieXRlc0luVXNlKTtcclxuXHQgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGJ5dGVzSW5Vc2UpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9KTtcclxuXHJcblx0ICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG5cdH1cclxuXHJcbiAgIHJldHVybiB7XHJcbiAgIFx0Z2V0RGVidWdnaW5nVG90YWxCeXRlc0luVXNlOiBmdW5jdGlvbigpIHtcclxuICAgXHRcdHJldHVybiB0b3RhbEJ5dGVzO1xyXG4gICBcdH0sXHJcblx0Z2V0RGVidWdnaW5nQ2FjaGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGNhY2hlO1xyXG5cdH0sXHJcblx0LyoqXHJcblx0ICogUmV0dXJucyB0aGUgdXNhZ2Ugb2YgdGhlIGN1cnJlbnQgc3RvcmFnZSBxdW90YSwgYXMgYSBudW1iZXIgYmV0d2VlbiAwLjAgYW5kIDEuMFxyXG5cdCAqL1xyXG5cdGdldERlYnVnZ2luZ1BlcmNlbnRVc2VkOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBwZXJjZW50ID0gdG90YWxCeXRlcyAvIGFyZWEuUVVPVEFfQllURVM7XHJcblx0XHRyZXR1cm4gcGVyY2VudDtcclxuXHR9LFxyXG5cdGdldERlYnVnZ2luZ1NpemVPZjogZnVuY3Rpb24oa2V5KSB7XHJcblx0XHRyZXR1cm4gYW5ndWxhci50b0pzb24oY2FjaGVba2V5XSkubGVuZ3RoO1xyXG5cdH0sXHJcblx0dXBkYXRlRGVidWdnaW5nQ2FjaGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuXHRcdGFyZWEuZ2V0KG51bGwsIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cdFx0XHRpZiAoY2hyb21lLnJ1bnRpbWUubGFzdGVycm9yKXtcclxuXHQgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoY2hyb21lLnJ1bnRpbWUubGFzdGVycm9yLm1lc3NhZ2UpO1xyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgLy9jb25zb2xlLmxvZygnZ2V0IHRoZW4gZm9yIGFsbCBrZXlzIDogJyArIGFuZ3VsYXIudG9Kc29uKHZhbHVlKSk7XHJcbiAgXHQgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh2YWx1ZSk7XHJcbiAgXHQgICAgICAgIH1cclxuXHRcdH0pO1xyXG5cdFx0ZGVmZXJyZWQucHJvbWlzZS50aGVuIChmdW5jdGlvbiAoZGF0YSkge1xyXG5cdFx0XHRjYWNoZSA9IGRhdGE7XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdHVwZGF0ZURlYnVnZ2luZ1RvdGFsQnl0ZXM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0Z2V0Qnl0ZXNJblVzZShudWxsKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJ0b3RhbCBieXRlcyBpbiB1c2U6IFwiICsgZGF0YSk7XHJcblx0XHRcdHRvdGFsQnl0ZXMgPSBkYXRhO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuICAgIGNsZWFyQ2FjaGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0Ly8gY29uc29sZS5sb2coJ2NsZWFyaW5nIGxvY2FsIGNhY2hlJyk7XHJcblx0XHRhcmVhLmNsZWFyKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKSB7XHJcblx0XHQgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJlcnJvciBjbGVhcmluZyBsb2NhbCBjYWNoZVwiICsgY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKTtcclxuXHRcdCAgICB9IGVsc2Uge1xyXG5cdCAgICBcdFx0Y29uc29sZS5sb2coXCJjYWNoZSBoYXMgYmVlbiBjbGVhcmVkXCIpO1xyXG5cdCAgICBcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0ZHJvcDogZnVuY3Rpb24oa2V5KSB7XHJcblx0XHRhcmVhLnJlbW92ZShrZXksIGZ1bmN0aW9uKCl7XHJcblx0XHRcdGlmIChjaHJvbWUucnVudGltZS5sYXN0ZXJyb3Ipe1xyXG5cdCAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoY2hyb21lLnJ1bnRpbWUubGFzdGVycm9yLm1lc3NhZ2UpO1xyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgIFx0Ly8gY29uc29sZS5sb2coXCJrZXkgXCIgKyBrZXkgKyBcIiBoYXMgYmVlbiBkcm9wcGVkIGZyb20gdGhlIHN0b3JhZ2UgY2FjaGVcIilcclxuXHQgICAgICAgIH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0Z2V0OiBmdW5jdGlvbihrZXkpIHtcclxuXHRcdHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcblx0XHRhcmVhLmdldChrZXksIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIFx0Ly8gY29uc29sZS5sb2coJ2dldFRvdGFsQnl0ZXNJblVzZSB0aGVuIHdpdGgga2V5ICcgKyBrZXkgKyBcIiA6IFwiICsgYW5ndWxhci50b0pzb24odmFsdWUpKTtcclxuICAgICAgICBcdHZhciBrZXlWYWx1ZSA9IHZhbHVlW2tleV07XHJcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoa2V5VmFsdWUpO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuXHR9LFxyXG5cdC8qKlxyXG5cdCAqIGdldHMgdGhlIHZhbHVlIG9mIGtleSBmcm9tIHRoZSBjYWNoZSwgb3IgY2FsbHMgdGhlIGZhbGxiYWNrIGZ1bmN0aW9uLCBhbmQgcG9wdWxhdGVzIHRoZSBjYWNoZVxyXG5cdCAqIHdpdGggdGhlIHZhbHVlIG9mIHRoZSBwcm9taXNlIHJldHVybmVkXHJcblx0ICovXHJcblx0Z2V0T3JFbHNlOiBmdW5jdGlvbihrZXksIGZhbGxiYWNrKSB7XHJcblx0XHQvLyBjb25zb2xlLmxvZygnZ2V0T3JFbHNlIGNhbGxlZCB3aXRoICBjYWNoZWQga2V5ICcgKyBrZXkpO1xyXG5cdFx0dmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuICAgICAgICBhcmVhLmdldChrZXksIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgXHQvLyBjb25zb2xlLmxvZygnZ2V0T3JFbHNlIHRoZW4gd2l0aCBjYWNoZWQga2V5ICcgKyBrZXkgKyBcIiA6IFwiICsgYW5ndWxhci50b0pzb24odmFsdWUpKTtcclxuICAgICAgICBcdHZhciBrZXlWYWx1ZSA9IHZhbHVlW2tleV07XHJcbiAgICAgICAgXHRpZiAoa2V5VmFsdWUgPT0gdW5kZWZpbmVkIHx8IGtleVZhbHVlID09IG51bGwpIHtcclxuICAgICAgICBcdFx0Ly8gY29uc29sZS5sb2coXCJubyBjYWNoZWQgdmFsdWUgZm9yIFwiKyBrZXkgKyBcIi4gdXNpbmcgZmFsbGJhY2sgbWV0aG9kLlwiKTtcclxuICAgICAgICBcdFx0ZmFsbGJhY2soKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICBcdFx0XHRrZXlWYWx1ZSA9IGRhdGE7XHJcbiAgICAgICAgXHRcdFx0Ly8gY29uc29sZS5sb2coXCJjYWNoaW5nIHZhbHVlIGZvciBcIisga2V5ICsgXCIgOiBcIiArIGFuZ3VsYXIudG9Kc29uKGtleVZhbHVlKSk7XHJcbiAgICAgICAgXHRcdFx0dmFyIHNhdmVPYmplY3QgPSB7fTtcclxuICAgICAgICBcdFx0XHRzYXZlT2JqZWN0W2tleV0gPSBrZXlWYWx1ZTtcclxuICAgICAgICBcdFx0XHRhcmVhLnNldChzYXZlT2JqZWN0LCBmdW5jdGlvbigpIHtcclxuICAgICAgICBcdFx0XHRcdGlmIChjaHJvbWUucnVudGltZS5sYXN0ZXJyb3Ipe1xyXG5cdFx0XHRcdCAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoY2hyb21lLnJ1bnRpbWUubGFzdGVycm9yLm1lc3NhZ2UpO1xyXG5cdFx0XHRcdCAgICAgICAgfSBlbHNlIHtcclxuXHRcdCAgICBcdFx0XHRcdC8vY29uc29sZS5sb2coJ3NhdmVkICcgKyBrZXlWYWx1ZSArIFwiIHRvIGtleSBcIiArIGtleSk7XHJcblx0XHQgICAgXHRcdFx0fVxyXG4gICAgICAgIFx0XHRcdH0pO1xyXG4gICAgICAgIFx0XHRcdGRlZmVycmVkLnJlc29sdmUoa2V5VmFsdWUpO1xyXG4gICAgICAgIFx0XHR9KTtcclxuICAgICAgICBcdH0gZWxzZSB7XHJcblx0ICAgICAgICBcdGRlZmVycmVkLnJlc29sdmUoa2V5VmFsdWUpO1xyXG5cdCAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcblx0fSxcclxuXHQvKipcclxuXHQqXHJcblx0Ki9cclxuXHRzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcclxuXHRcdHZhciBzYXZlT2JqZWN0ID0ge307XHJcblx0XHRzYXZlT2JqZWN0W2tleV0gPSB2YWx1ZTtcclxuXHRcdGFyZWEuc2V0KHNhdmVPYmplY3QsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoY2hyb21lLnJ1bnRpbWUubGFzdGVycm9yKXtcclxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKGNocm9tZS5ydW50aW1lLmxhc3RlcnJvci5tZXNzYWdlKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZygnc2F2ZWQgJyArIGtleVZhbHVlICsgXCIgdG8ga2V5IFwiICsga2V5KTtcclxuXHRcdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cclxuXHQvKipcclxuXHQgKiBnZXRzIHRoZSB2YWx1ZSBvZiBrZXkgZnJvbSB0aGUgY2FjaGUsIG9yIGNhbGxzIHRoZSBmYWxsYmFjayBmdW5jdGlvbiwgYW5kIHBvcHVsYXRlcyB0aGUgY2FjaGVcclxuXHQgKiB3aXRoIHRoZSB2YWx1ZSBvZiB0aGUgcHJvbWlzZSByZXR1cm5lZFxyXG5cdCAqL1xyXG5cdGZvcmNlR2V0OiBmdW5jdGlvbihrZXksIGZhbGxiYWNrKSB7XHJcblx0XHQvLyBjb25zb2xlLmxvZygnZ2V0T3JFbHNlIGNhbGxlZCB3aXRoICBjYWNoZWQga2V5ICcgKyBrZXkpO1xyXG5cdFx0dmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuICAgICAgICBmYWxsYmFjaygpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xyXG5cdFx0XHRrZXlWYWx1ZSA9IGRhdGE7XHJcblx0XHRcdC8vIGNvbnNvbGUubG9nKFwiY2FjaGluZyB2YWx1ZSBmb3IgXCIrIGtleSArIFwiIDogXCIgKyBhbmd1bGFyLnRvSnNvbihrZXlWYWx1ZSkpO1xyXG5cdFx0XHR2YXIgc2F2ZU9iamVjdCA9IHt9O1xyXG5cdFx0XHRzYXZlT2JqZWN0W2tleV0gPSBrZXlWYWx1ZTtcclxuXHRcdFx0YXJlYS5zZXQoc2F2ZU9iamVjdCwgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKGNocm9tZS5ydW50aW1lLmxhc3RlcnJvcil7XHJcblx0XHQgICAgICAgICAgICBjb25zb2xlLmVycm9yKGNocm9tZS5ydW50aW1lLmxhc3RlcnJvci5tZXNzYWdlKTtcclxuXHRcdCAgICAgICAgfSBlbHNlIHtcclxuICAgIFx0XHRcdFx0Ly9jb25zb2xlLmxvZygnc2F2ZWQgJyArIGtleVZhbHVlICsgXCIgdG8ga2V5IFwiICsga2V5KTtcclxuICAgIFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdGRlZmVycmVkLnJlc29sdmUoa2V5VmFsdWUpO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuXHR9LFxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgdGhlIHF1b3RhIG9mIHRoZSBjdXJyZW50IHN0b3JhZ2UgbWV0aG9kLCBpbiBieXRlc1xyXG5cdCAqL1xyXG5cdGdldFF1b3RhOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBhcmVhLlFVT1RBX0JZVEVTO1xyXG5cdH1cclxuXHJcbiAgIH1cclxufSk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
