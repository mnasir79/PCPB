!function(e){"use strict";function t(e,t){return t=t||Error,function(){var n,r,i=2,o=arguments,a=o[0],s="["+(e?e+":":"")+a+"] ",l=o[1];for(s+=l.replace(/\{\d+\}/g,function(e){var t=+e.slice(1,-1),n=t+i;return n<o.length?$e(o[n]):e}),s+="\nhttp://errors.angularjs.org/1.5.5/"+(e?e+"/":"")+a,r=i,n="?";r<o.length;r++,n="&")s+=n+"p"+(r-i)+"="+encodeURIComponent($e(o[r]));return new t(s)}}function n(e){if(null==e||L(e))return!1;if(Gr(e)||w(e)||Rr&&e instanceof Rr)return!0;var t="length"in Object(e)&&e.length;return x(t)&&(t>=0&&(t-1 in e||e instanceof Array)||"function"==typeof e.item)}function r(e,t,i){var o,a;if(e)if(C(e))for(o in e)"prototype"==o||"length"==o||"name"==o||e.hasOwnProperty&&!e.hasOwnProperty(o)||t.call(i,e[o],o,e);else if(Gr(e)||n(e)){var s="object"!=typeof e;for(o=0,a=e.length;a>o;o++)(s||o in e)&&t.call(i,e[o],o,e)}else if(e.forEach&&e.forEach!==r)e.forEach(t,i,e);else if(b(e))for(o in e)t.call(i,e[o],o,e);else if("function"==typeof e.hasOwnProperty)for(o in e)e.hasOwnProperty(o)&&t.call(i,e[o],o,e);else for(o in e)Mr.call(e,o)&&t.call(i,e[o],o,e);return e}function i(e,t,n){for(var r=Object.keys(e).sort(),i=0;i<r.length;i++)t.call(n,e[r[i]],r[i]);return r}function o(e){return function(t,n){e(n,t)}}function a(){return++qr}function s(e,t){t?e.$$hashKey=t:delete e.$$hashKey}function l(e,t,n){for(var r=e.$$hashKey,i=0,o=t.length;o>i;++i){var a=t[i];if(y(a)||C(a))for(var u=Object.keys(a),c=0,h=u.length;h>c;c++){var p=u[c],d=a[p];n&&y(d)?E(d)?e[p]=new Date(d.valueOf()):S(d)?e[p]=new RegExp(d):d.nodeName?e[p]=d.cloneNode(!0):R(d)?e[p]=d.clone():(y(e[p])||(e[p]=Gr(d)?[]:{}),l(e[p],[d],!0)):e[p]=d}}return s(e,r),e}function u(e){return l(e,Pr.call(arguments,1),!1)}function c(e){return l(e,Pr.call(arguments,1),!0)}function h(e){return parseInt(e,10)}function p(e,t){return u(Object.create(e),t)}function d(){}function f(e){return e}function g(e){return function(){return e}}function m(e){return C(e.toString)&&e.toString!==Br}function v(e){return"undefined"==typeof e}function $(e){return"undefined"!=typeof e}function y(e){return null!==e&&"object"==typeof e}function b(e){return null!==e&&"object"==typeof e&&!Ur(e)}function w(e){return"string"==typeof e}function x(e){return"number"==typeof e}function E(e){return"[object Date]"===Br.call(e)}function C(e){return"function"==typeof e}function S(e){return"[object RegExp]"===Br.call(e)}function L(e){return e&&e.window===e}function A(e){return e&&e.$evalAsync&&e.$watch}function T(e){return"[object File]"===Br.call(e)}function M(e){return"[object FormData]"===Br.call(e)}function k(e){return"[object Blob]"===Br.call(e)}function I(e){return"boolean"==typeof e}function N(e){return e&&C(e.then)}function D(e){return e&&x(e.length)&&zr.test(Br.call(e))}function O(e){return"[object ArrayBuffer]"===Br.call(e)}function R(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function j(e){var t,n={},r=e.split(",");for(t=0;t<r.length;t++)n[r[t]]=!0;return n}function F(e){return kr(e.nodeName||e[0]&&e[0].nodeName)}function P(e,t){var n=e.indexOf(t);return n>=0&&e.splice(n,1),n}function _(e,t){function n(e,t){var n,r=t.$$hashKey;if(Gr(e))for(var o=0,a=e.length;a>o;o++)t.push(i(e[o]));else if(b(e))for(n in e)t[n]=i(e[n]);else if(e&&"function"==typeof e.hasOwnProperty)for(n in e)e.hasOwnProperty(n)&&(t[n]=i(e[n]));else for(n in e)Mr.call(e,n)&&(t[n]=i(e[n]));return s(t,r),t}function i(e){if(!y(e))return e;var t=a.indexOf(e);if(-1!==t)return l[t];if(L(e)||A(e))throw Hr("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r=!1,i=o(e);return void 0===i&&(i=Gr(e)?[]:Object.create(Ur(e)),r=!0),a.push(e),l.push(i),r?n(e,i):i}function o(e){switch(Br.call(e)){case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Float32Array]":case"[object Float64Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return new e.constructor(i(e.buffer));case"[object ArrayBuffer]":if(!e.slice){var t=new ArrayBuffer(e.byteLength);return new Uint8Array(t).set(new Uint8Array(e)),t}return e.slice(0);case"[object Boolean]":case"[object Number]":case"[object String]":case"[object Date]":return new e.constructor(e.valueOf());case"[object RegExp]":var n=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]);return n.lastIndex=e.lastIndex,n;case"[object Blob]":return new e.constructor([e],{type:e.type})}return C(e.cloneNode)?e.cloneNode(!0):void 0}var a=[],l=[];if(t){if(D(t)||O(t))throw Hr("cpta","Can't copy! TypedArray destination cannot be mutated.");if(e===t)throw Hr("cpi","Can't copy! Source and destination are identical.");return Gr(t)?t.length=0:r(t,function(e,n){"$$hashKey"!==n&&delete t[n]}),a.push(e),l.push(t),n(e,t)}return i(e)}function V(e,t){if(Gr(e)){t=t||[];for(var n=0,r=e.length;r>n;n++)t[n]=e[n]}else if(y(e)){t=t||{};for(var i in e)"$"===i.charAt(0)&&"$"===i.charAt(1)||(t[i]=e[i])}return t||e}function B(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var n,r,i,o=typeof e,a=typeof t;if(o==a&&"object"==o){if(!Gr(e)){if(E(e))return E(t)?B(e.getTime(),t.getTime()):!1;if(S(e))return S(t)?e.toString()==t.toString():!1;if(A(e)||A(t)||L(e)||L(t)||Gr(t)||E(t)||S(t))return!1;i=ge();for(r in e)if("$"!==r.charAt(0)&&!C(e[r])){if(!B(e[r],t[r]))return!1;i[r]=!0}for(r in t)if(!(r in i)&&"$"!==r.charAt(0)&&$(t[r])&&!C(t[r]))return!1;return!0}if(!Gr(t))return!1;if((n=e.length)==t.length){for(r=0;n>r;r++)if(!B(e[r],t[r]))return!1;return!0}}return!1}function U(e,t,n){return e.concat(Pr.call(t,n))}function H(e,t){return Pr.call(e,t||0)}function W(e,t){var n=arguments.length>2?H(arguments,2):[];return!C(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,U(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function q(t,n){var r=n;return"string"==typeof t&&"$"===t.charAt(0)&&"$"===t.charAt(1)?r=void 0:L(n)?r="$WINDOW":n&&e.document===n?r="$DOCUMENT":A(n)&&(r="$SCOPE"),r}function G(e,t){return v(e)?void 0:(x(t)||(t=t?2:null),JSON.stringify(e,q,t))}function z(e){return w(e)?JSON.parse(e):e}function K(e,t){e=e.replace(Qr,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function X(e,t){return e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+t),e}function J(e,t,n){n=n?-1:1;var r=e.getTimezoneOffset(),i=K(t,r);return X(e,n*(i-r))}function Y(e){e=Rr(e).clone();try{e.empty()}catch(t){}var n=Rr("<div>").append(e).html();try{return e[0].nodeType===ii?kr(n):n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(e,t){return"<"+kr(t)})}catch(t){return kr(n)}}function Q(e){try{return decodeURIComponent(e)}catch(t){}}function Z(e){var t={};return r((e||"").split("&"),function(e){var n,r,i;e&&(r=e=e.replace(/\+/g,"%20"),n=e.indexOf("="),-1!==n&&(r=e.substring(0,n),i=e.substring(n+1)),r=Q(r),$(r)&&(i=$(i)?Q(i):!0,Mr.call(t,r)?Gr(t[r])?t[r].push(i):t[r]=[t[r],i]:t[r]=i))}),t}function ee(e){var t=[];return r(e,function(e,n){Gr(e)?r(e,function(e){t.push(ne(n,!0)+(e===!0?"":"="+ne(e,!0)))}):t.push(ne(n,!0)+(e===!0?"":"="+ne(e,!0)))}),t.length?t.join("&"):""}function te(e){return ne(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function ne(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function re(e,t){var n,r,i=Zr.length;for(r=0;i>r;++r)if(n=Zr[r]+t,w(n=e.getAttribute(n)))return n;return null}function ie(e,t){var n,i,o={};r(Zr,function(t){var r=t+"app";!n&&e.hasAttribute&&e.hasAttribute(r)&&(n=e,i=e.getAttribute(r))}),r(Zr,function(t){var r,o=t+"app";!n&&(r=e.querySelector("["+o.replace(":","\\:")+"]"))&&(n=r,i=r.getAttribute(o))}),n&&(o.strictDi=null!==re(n,"strict-di"),t(n,i?[i]:[],o))}function oe(t,n,i){y(i)||(i={});var o={strictDi:!1};i=u(o,i);var a=function(){if(t=Rr(t),t.injector()){var r=t[0]===e.document?"document":Y(t);throw Hr("btstrpd","App already bootstrapped with this element '{0}'",r.replace(/</,"&lt;").replace(/>/,"&gt;"))}n=n||[],n.unshift(["$provide",function(e){e.value("$rootElement",t)}]),i.debugInfoEnabled&&n.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),n.unshift("ng");var o=nt(n,i.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),o},s=/^NG_ENABLE_DEBUG_INFO!/,l=/^NG_DEFER_BOOTSTRAP!/;return e&&s.test(e.name)&&(i.debugInfoEnabled=!0,e.name=e.name.replace(s,"")),e&&!l.test(e.name)?a():(e.name=e.name.replace(l,""),Wr.resumeBootstrap=function(e){return r(e,function(e){n.push(e)}),a()},void(C(Wr.resumeDeferredBootstrap)&&Wr.resumeDeferredBootstrap()))}function ae(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function se(e){var t=Wr.element(e).injector();if(!t)throw Hr("test","no injector found for element argument to getTestability");return t.get("$$testability")}function le(e,t){return t=t||"_",e.replace(ei,function(e,n){return(n?t:"")+e.toLowerCase()})}function ue(){var t;if(!ti){var n=Yr();jr=v(n)?e.jQuery:n?e[n]:void 0,jr&&jr.fn.on?(Rr=jr,u(jr.fn,{scope:Ei.scope,isolateScope:Ei.isolateScope,controller:Ei.controller,injector:Ei.injector,inheritedData:Ei.inheritedData}),t=jr.cleanData,jr.cleanData=function(e){for(var n,r,i=0;null!=(r=e[i]);i++)n=jr._data(r,"events"),n&&n.$destroy&&jr(r).triggerHandler("$destroy");t(e)}):Rr=Me,Wr.element=Rr,ti=!0}}function ce(e,t,n){if(!e)throw Hr("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function he(e,t,n){return n&&Gr(e)&&(e=e[e.length-1]),ce(C(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function pe(e,t){if("hasOwnProperty"===e)throw Hr("badname","hasOwnProperty is not a valid {0} name",t)}function de(e,t,n){if(!t)return e;for(var r,i=t.split("."),o=e,a=i.length,s=0;a>s;s++)r=i[s],e&&(e=(o=e)[r]);return!n&&C(e)?W(o,e):e}function fe(e){for(var t,n=e[0],r=e[e.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(t||e[i]!==n)&&(t||(t=Rr(Pr.call(e,0,i))),t.push(n));return t||e}function ge(){return Object.create(null)}function me(e){function n(e,t,n){return e[t]||(e[t]=n())}var r=t("$injector"),i=t("ng"),o=n(e,"angular",Object);return o.$$minErr=o.$$minErr||t,n(o,"module",function(){var e={};return function(t,o,a){var s=function(e,t){if("hasOwnProperty"===e)throw i("badname","hasOwnProperty is not a valid {0} name",t)};return s(t,"module"),o&&e.hasOwnProperty(t)&&(e[t]=null),n(e,t,function(){function e(e,t,n,r){return r||(r=i),function(){return r[n||"push"]([e,t,arguments]),c}}function n(e,n){return function(r,o){return o&&C(o)&&(o.$$moduleName=t),i.push([e,n,arguments]),c}}if(!o)throw r("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",t);var i=[],s=[],l=[],u=e("$injector","invoke","push",s),c={_invokeQueue:i,_configBlocks:s,_runBlocks:l,requires:o,name:t,provider:n("$provide","provider"),factory:n("$provide","factory"),service:n("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:n("$provide","decorator"),animation:n("$animateProvider","register"),filter:n("$filterProvider","register"),controller:n("$controllerProvider","register"),directive:n("$compileProvider","directive"),component:n("$compileProvider","component"),config:u,run:function(e){return l.push(e),this}};return a&&u(a),c})}})}function ve(e){var t=[];return JSON.stringify(e,function(e,n){if(n=q(e,n),y(n)){if(t.indexOf(n)>=0)return"...";t.push(n)}return n})}function $e(e){return"function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):v(e)?"undefined":"string"!=typeof e?ve(e):e}function ye(n){u(n,{bootstrap:oe,copy:_,extend:u,merge:c,equals:B,element:Rr,forEach:r,injector:nt,noop:d,bind:W,toJson:G,fromJson:z,identity:f,isUndefined:v,isDefined:$,isString:w,isFunction:C,isObject:y,isNumber:x,isElement:R,isArray:Gr,version:li,isDate:E,lowercase:kr,uppercase:Ir,callbacks:{counter:0},getTestability:se,$$minErr:t,$$csp:Jr,reloadWithDebugInfo:ae}),(Fr=me(e))("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:En}),e.provider("$compile",dt).directive({a:Io,input:Jo,textarea:Jo,form:jo,script:qa,select:Ka,style:Ja,option:Xa,ngBind:Zo,ngBindHtml:ta,ngBindTemplate:ea,ngClass:ra,ngClassEven:oa,ngClassOdd:ia,ngCloak:aa,ngController:sa,ngForm:Fo,ngHide:Pa,ngIf:ca,ngInclude:ha,ngInit:da,ngNonBindable:Ma,ngPluralize:Da,ngRepeat:Oa,ngShow:Fa,ngStyle:_a,ngSwitch:Va,ngSwitchWhen:Ba,ngSwitchDefault:Ua,ngOptions:Na,ngTransclude:Wa,ngModel:La,ngList:fa,ngChange:na,pattern:Qa,ngPattern:Qa,required:Ya,ngRequired:Ya,minlength:es,ngMinlength:es,maxlength:Za,ngMaxlength:Za,ngValue:Qo,ngModelOptions:Ta}).directive({ngInclude:pa}).directive(No).directive(la),e.provider({$anchorScroll:rt,$animate:_i,$animateCss:Ui,$$animateJs:Fi,$$animateQueue:Pi,$$AnimateRunner:Bi,$$animateAsyncRun:Vi,$browser:ut,$cacheFactory:ct,$controller:yt,$document:bt,$exceptionHandler:wt,$filter:Fn,$$forceReflow:Ki,$interpolate:Rt,$interval:jt,$http:It,$httpParamSerializer:Et,$httpParamSerializerJQLike:Ct,$httpBackend:Dt,$xhrFactory:Nt,$location:Jt,$log:Yt,$parse:vn,$rootScope:xn,$q:$n,$$q:yn,$sce:An,$sceDelegate:Ln,$sniffer:Tn,$templateCache:ht,$templateRequest:Mn,$$testability:kn,$timeout:In,$window:On,$$rAF:wn,$$jqLite:Je,$$HashMap:Ai,$$cookieReader:jn})}])}function be(){return++ci}function we(e){return e.replace(di,function(e,t,n,r){return r?n.toUpperCase():n}).replace(fi,"Moz$1")}function xe(e){return!$i.test(e)}function Ee(e){var t=e.nodeType;return t===ni||!t||t===ai}function Ce(e){for(var t in ui[e.ng339])return!0;return!1}function Se(e){for(var t=0,n=e.length;n>t;t++)De(e[t])}function Le(e,t){var n,i,o,a,s=t.createDocumentFragment(),l=[];if(xe(e))l.push(t.createTextNode(e));else{for(n=n||s.appendChild(t.createElement("div")),i=(yi.exec(e)||["",""])[1].toLowerCase(),o=wi[i]||wi._default,n.innerHTML=o[1]+e.replace(bi,"<$1></$2>")+o[2],a=o[0];a--;)n=n.lastChild;l=U(l,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",r(l,function(e){s.appendChild(e)}),s}function Ae(t,n){n=n||e.document;var r;return(r=vi.exec(t))?[n.createElement(r[1])]:(r=Le(t,n))?r.childNodes:[]}function Te(e,t){var n=e.parentNode;n&&n.replaceChild(t,e),t.appendChild(e)}function Me(e){if(e instanceof Me)return e;var t;if(w(e)&&(e=Kr(e),t=!0),!(this instanceof Me)){if(t&&"<"!=e.charAt(0))throw mi("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new Me(e)}t?_e(this,Ae(e)):_e(this,e)}function ke(e){return e.cloneNode(!0)}function Ie(e,t){if(t||De(e),e.querySelectorAll)for(var n=e.querySelectorAll("*"),r=0,i=n.length;i>r;r++)De(n[r])}function Ne(e,t,n,i){if($(i))throw mi("offargs","jqLite#off() does not support the `selector` argument");var o=Oe(e),a=o&&o.events,s=o&&o.handle;if(s)if(t){var l=function(t){var r=a[t];$(n)&&P(r||[],n),$(n)&&r&&r.length>0||(pi(e,t,s),delete a[t])};r(t.split(" "),function(e){l(e),gi[e]&&l(gi[e])})}else for(t in a)"$destroy"!==t&&pi(e,t,s),delete a[t]}function De(e,t){var n=e.ng339,r=n&&ui[n];if(r){if(t)return void delete r.data[t];r.handle&&(r.events.$destroy&&r.handle({},"$destroy"),Ne(e)),delete ui[n],e.ng339=void 0}}function Oe(e,t){var n=e.ng339,r=n&&ui[n];return t&&!r&&(e.ng339=n=be(),r=ui[n]={events:{},data:{},handle:void 0}),r}function Re(e,t,n){if(Ee(e)){var r=$(n),i=!r&&t&&!y(t),o=!t,a=Oe(e,!i),s=a&&a.data;if(r)s[t]=n;else{if(o)return s;if(i)return s&&s[t];u(s,t)}}}function je(e,t){return e.getAttribute?(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")>-1:!1}function Fe(e,t){t&&e.setAttribute&&r(t.split(" "),function(t){e.setAttribute("class",Kr((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+Kr(t)+" "," ")))})}function Pe(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");r(t.split(" "),function(e){e=Kr(e),-1===n.indexOf(" "+e+" ")&&(n+=e+" ")}),e.setAttribute("class",Kr(n))}}function _e(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;n>r;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function Ve(e,t){return Be(e,"$"+(t||"ngController")+"Controller")}function Be(e,t,n){e.nodeType==ai&&(e=e.documentElement);for(var r=Gr(t)?t:[t];e;){for(var i=0,o=r.length;o>i;i++)if($(n=Rr.data(e,r[i])))return n;e=e.parentNode||e.nodeType===si&&e.host}}function Ue(e){for(Ie(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function He(e,t){t||Ie(e);var n=e.parentNode;n&&n.removeChild(e)}function We(t,n){n=n||e,"complete"===n.document.readyState?n.setTimeout(t):Rr(n).on("load",t)}function qe(e,t){var n=Ci[t.toLowerCase()];return n&&Si[F(e)]&&n}function Ge(e){return Li[e]}function ze(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=t[r||n.type],o=i?i.length:0;if(o){if(v(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0};var s=i.specialHandlerWrapper||Ke;o>1&&(i=V(i));for(var l=0;o>l;l++)n.isImmediatePropagationStopped()||s(e,n,i[l])}};return n.elem=e,n}function Ke(e,t,n){n.call(e,t)}function Xe(e,t,n){var r=t.relatedTarget;r&&(r===e||xi.call(e,r))||n.call(e,t)}function Je(){this.$get=function(){return u(Me,{hasClass:function(e,t){return e.attr&&(e=e[0]),je(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),Pe(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),Fe(e,t)}})}}function Ye(e,t){var n=e&&e.$$hashKey;if(n)return"function"==typeof n&&(n=e.$$hashKey()),n;var r=typeof e;return n="function"==r||"object"==r&&null!==e?e.$$hashKey=r+":"+(t||a)():r+":"+e}function Qe(e,t){if(t){var n=0;this.nextUid=function(){return++n}}r(e,this.put,this)}function Ze(e){var t=Function.prototype.toString.call(e).replace(Ni,""),n=t.match(Ti)||t.match(Mi);return n}function et(e){var t=Ze(e);return t?"function("+(t[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function tt(e,t,n){var i,o,a;if("function"==typeof e){if(!(i=e.$inject)){if(i=[],e.length){if(t)throw w(n)&&n||(n=e.name||et(e)),Di("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);o=Ze(e),r(o[1].split(ki),function(e){e.replace(Ii,function(e,t,n){i.push(n)})})}e.$inject=i}}else Gr(e)?(a=e.length-1,he(e[a],"fn"),i=e.slice(0,a)):he(e,"fn",!0);return i}function nt(e,t){function n(e){return function(t,n){return y(t)?void r(t,o(e)):e(t,n)}}function i(e,t){if(pe(e,"service"),(C(t)||Gr(t))&&(t=E.instantiate(t)),!t.$get)throw Di("pget","Provider '{0}' must define $get factory method.",e);return x[e+m]=t}function a(e,t){return function(){var n=A.invoke(t,this);if(v(n))throw Di("undef","Provider '{0}' must return a value from $get factory method.",e);return n}}function s(e,t,n){return i(e,{$get:n!==!1?a(e,t):t})}function l(e,t){return s(e,["$injector",function(e){return e.instantiate(t)}])}function u(e,t){return s(e,g(t),!1)}function c(e,t){pe(e,"constant"),x[e]=t,S[e]=t}function h(e,t){var n=E.get(e+m),r=n.$get;n.$get=function(){var e=A.invoke(r,n);return A.invoke(t,null,{$delegate:e})}}function p(e){ce(v(e)||Gr(e),"modulesToLoad","not an array");var t,n=[];return r(e,function(e){function r(e){var t,n;for(t=0,n=e.length;n>t;t++){var r=e[t],i=E.get(r[0]);i[r[1]].apply(i,r[2])}}if(!b.get(e)){b.put(e,!0);try{w(e)?(t=Fr(e),n=n.concat(p(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):C(e)?n.push(E.invoke(e)):Gr(e)?n.push(E.invoke(e)):he(e,"module")}catch(i){throw Gr(e)&&(e=e[e.length-1]),i.message&&i.stack&&-1==i.stack.indexOf(i.message)&&(i=i.message+"\n"+i.stack),Di("modulerr","Failed to instantiate module {0} due to:\n{1}",e,i.stack||i.message||i)}}}),n}function d(e,n){function r(t,r){if(e.hasOwnProperty(t)){if(e[t]===f)throw Di("cdep","Circular dependency found: {0}",t+" <- "+$.join(" <- "));return e[t]}try{return $.unshift(t),e[t]=f,e[t]=n(t,r)}catch(i){throw e[t]===f&&delete e[t],i}finally{$.shift()}}function i(e,n,i){for(var o=[],a=nt.$$annotate(e,t,i),s=0,l=a.length;l>s;s++){var u=a[s];if("string"!=typeof u)throw Di("itkn","Incorrect injection token! Expected service name as string, got {0}",u);o.push(n&&n.hasOwnProperty(u)?n[u]:r(u,i))}return o}function o(e){return 11>=Or?!1:"function"==typeof e&&/^(?:class\s|constructor\()/.test(Function.prototype.toString.call(e))}function a(e,t,n,r){"string"==typeof n&&(r=n,n=null);var a=i(e,n,r);return Gr(e)&&(e=e[e.length-1]),o(e)?(a.unshift(null),new(Function.prototype.bind.apply(e,a))):e.apply(t,a)}function s(e,t,n){var r=Gr(e)?e[e.length-1]:e,o=i(e,t,n);return o.unshift(null),new(Function.prototype.bind.apply(r,o))}return{invoke:a,instantiate:s,get:r,annotate:nt.$$annotate,has:function(t){return x.hasOwnProperty(t+m)||e.hasOwnProperty(t)}}}t=t===!0;var f={},m="Provider",$=[],b=new Qe([],!0),x={$provide:{provider:n(i),factory:n(s),service:n(l),value:n(u),constant:n(c),decorator:h}},E=x.$injector=d(x,function(e,t){throw Wr.isString(t)&&$.push(t),Di("unpr","Unknown provider: {0}",$.join(" <- "))}),S={},L=d(S,function(e,t){var n=E.get(e+m,t);return A.invoke(n.$get,n,void 0,e)}),A=L;x["$injector"+m]={$get:g(L)};var T=p(e);return A=L.get("$injector"),A.strictDi=t,r(T,function(e){e&&A.invoke(e)}),A}function rt(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,n,r){function i(e){var t=null;return Array.prototype.some.call(e,function(e){return"a"===F(e)?(t=e,!0):void 0}),t}function o(){var e=s.yOffset;if(C(e))e=e();else if(R(e)){var n=e[0],r=t.getComputedStyle(n);e="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else x(e)||(e=0);return e}function a(e){if(e){e.scrollIntoView();var n=o();if(n){var r=e.getBoundingClientRect().top;t.scrollBy(0,r-n)}}else t.scrollTo(0,0)}function s(e){e=w(e)?e:n.hash();var t;e?(t=l.getElementById(e))?a(t):(t=i(l.getElementsByName(e)))?a(t):"top"===e&&a(null):a(null)}var l=t.document;return e&&r.$watch(function(){return n.hash()},function(e,t){e===t&&""===e||We(function(){r.$evalAsync(s)})}),s}]}function it(e,t){return e||t?e?t?(Gr(e)&&(e=e.join(" ")),Gr(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function ot(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType===Ri)return n}}function at(e){w(e)&&(e=e.split(" "));var t=ge();return r(e,function(e){e.length&&(t[e]=!0)}),t}function st(e){return y(e)?e:{}}function lt(e,t,n,i){function o(e){try{e.apply(null,H(arguments,1))}finally{if($--,0===$)for(;y.length;)try{y.pop()()}catch(t){n.error(t)}}}function a(e){var t=e.indexOf("#");return-1===t?"":e.substr(t)}function s(){C=null,l(),u()}function l(){b=S(),b=v(b)?null:b,B(b,T)&&(b=T),T=b}function u(){x===c.url()&&w===b||(x=c.url(),w=b,r(L,function(e){e(c.url(),b)}))}var c=this,h=e.location,p=e.history,f=e.setTimeout,g=e.clearTimeout,m={};c.isMock=!1;var $=0,y=[];c.$$completeOutstandingRequest=o,c.$$incOutstandingRequestCount=function(){$++},c.notifyWhenNoOutstandingRequests=function(e){0===$?e():y.push(e)};var b,w,x=h.href,E=t.find("base"),C=null,S=i.history?function(){try{return p.state}catch(e){}}:d;l(),w=b,c.url=function(t,n,r){if(v(r)&&(r=null),h!==e.location&&(h=e.location),p!==e.history&&(p=e.history),t){var o=w===r;if(x===t&&(!i.history||o))return c;var s=x&&Bt(x)===Bt(t);return x=t,w=r,!i.history||s&&o?(s&&!C||(C=t),n?h.replace(t):s?h.hash=a(t):h.href=t,h.href!==t&&(C=t)):(p[n?"replaceState":"pushState"](r,"",t),l(),w=b),c}return C||h.href.replace(/%27/g,"'")},c.state=function(){return b};var L=[],A=!1,T=null;c.onUrlChange=function(t){return A||(i.history&&Rr(e).on("popstate",s),Rr(e).on("hashchange",s),A=!0),L.push(t),t},c.$$applicationDestroyed=function(){Rr(e).off("hashchange popstate",s)},c.$$checkUrlChange=u,c.baseHref=function(){var e=E.attr("href");return e?e.replace(/^(https?\:)?\/\/[^\/]*/,""):""},c.defer=function(e,t){var n;return $++,n=f(function(){delete m[n],o(e)},t||0),m[n]=!0,n},c.defer.cancel=function(e){return m[e]?(delete m[e],g(e),o(d),!0):!1}}function ut(){this.$get=["$window","$log","$sniffer","$document",function(e,t,n,r){return new lt(e,r,t,n)}]}function ct(){this.$get=function(){function e(e,r){function i(e){e!=p&&(d?d==e&&(d=e.n):d=e,o(e.n,e.p),o(e,p),p=e,p.n=null)}function o(e,t){e!=t&&(e&&(e.p=t),t&&(t.n=e))}if(e in n)throw t("$cacheFactory")("iid","CacheId '{0}' is already taken!",e);var a=0,s=u({},r,{id:e}),l=ge(),c=r&&r.capacity||Number.MAX_VALUE,h=ge(),p=null,d=null;return n[e]={put:function(e,t){if(!v(t)){if(c<Number.MAX_VALUE){var n=h[e]||(h[e]={key:e});i(n)}return e in l||a++,l[e]=t,a>c&&this.remove(d.key),t}},get:function(e){if(c<Number.MAX_VALUE){var t=h[e];if(!t)return;i(t)}return l[e]},remove:function(e){if(c<Number.MAX_VALUE){var t=h[e];if(!t)return;t==p&&(p=t.p),t==d&&(d=t.n),o(t.n,t.p),delete h[e]}e in l&&(delete l[e],a--)},removeAll:function(){l=ge(),a=0,h=ge(),p=d=null},destroy:function(){l=null,s=null,h=null,delete n[e]},info:function(){return u({},s,{size:a})}}}var n={};return e.info=function(){var e={};return r(n,function(t,n){e[n]=t.info()}),e},e.get=function(e){return n[e]},e}}function ht(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function pt(){}function dt(t,n){function i(e,t,n){var i=/^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/,o=ge();return r(e,function(e,r){if(e in S)return void(o[r]=S[e]);var a=e.match(i);if(!a)throw Hi("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",t,r,e,n?"controller bindings definition":"isolate scope definition");o[r]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||r},a[4]&&(S[e]=o[r])}),o}function a(e,t){var n={isolateScope:null,bindToController:null};if(y(e.scope)&&(e.bindToController===!0?(n.bindToController=i(e.scope,t,!0),n.isolateScope={}):n.isolateScope=i(e.scope,t,!1)),y(e.bindToController)&&(n.bindToController=i(e.bindToController,t,!0)),y(n.bindToController)){var r=e.controller,o=e.controllerAs;if(!r)throw Hi("noctrl","Cannot bind to controller without directive '{0}'s controller.",t);if(!$t(r,o))throw Hi("noident","Cannot bind to controller without identifier for directive '{0}'.",t)}return n}function s(e){var t=e.charAt(0);if(!t||t!==kr(t))throw Hi("baddir","Directive/Component name '{0}' is invalid. The first character must be a lowercase letter",e);if(e!==e.trim())throw Hi("baddir","Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",e)}var l={},c="Directive",h=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,m=/(([\w\-]+)(?:\:([^;]+))?;?)/,b=j("ngSrc,ngSrcset,src,srcset"),x=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,E=/^(on[a-z]+|formaction)$/,S=ge();this.directive=function M(e,n){return pe(e,"directive"),w(e)?(s(e),ce(n,"directiveFactory"),l.hasOwnProperty(e)||(l[e]=[],t.factory(e+c,["$injector","$exceptionHandler",function(t,n){var i=[];return r(l[e],function(r,o){try{var a=t.invoke(r);C(a)?a={compile:g(a)}:!a.compile&&a.link&&(a.compile=g(a.link)),a.priority=a.priority||0,a.index=o,a.name=a.name||e,a.require=a.require||a.controller&&a.name,a.restrict=a.restrict||"EA",a.$$moduleName=r.$$moduleName,i.push(a)}catch(s){n(s)}}),i}])),l[e].push(n)):r(e,o(M)),this},this.component=function(e,t){function n(e){function n(t){return C(t)||Gr(t)?function(n,r){return e.invoke(t,this,{$element:n,$attrs:r})}:t}var o=t.template||t.templateUrl?t.template:"",a={controller:i,controllerAs:$t(t.controller)||t.controllerAs||"$ctrl",template:n(o),templateUrl:n(t.templateUrl),transclude:t.transclude,scope:{},bindToController:t.bindings||{},restrict:"E",require:t.require};return r(t,function(e,t){"$"===t.charAt(0)&&(a[t]=e)}),a}var i=t.controller||function(){};return r(t,function(e,t){"$"===t.charAt(0)&&(n[t]=e,C(i)&&(i[t]=e))}),n.$inject=["$injector"],this.directive(e,n)},this.aHrefSanitizationWhitelist=function(e){return $(e)?(n.aHrefSanitizationWhitelist(e),this):n.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return $(e)?(n.imgSrcSanitizationWhitelist(e),this):n.imgSrcSanitizationWhitelist()};var L=!0;this.debugInfoEnabled=function(e){return $(e)?(L=e,this):L};var T=10;this.onChangesTtl=function(e){return arguments.length?(T=e,this):T},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(t,n,i,o,s,g,$,S,M,k){function N(){try{if(!--ye)throw me=void 0,Hi("infchng","{0} $onChanges() iterations reached. Aborting!\n",T);$.$apply(function(){for(var e=0,t=me.length;t>e;++e)me[e]();me=void 0})}finally{ye++}}function D(e,t){if(t){var n,r,i,o=Object.keys(t);for(n=0,r=o.length;r>n;n++)i=o[n],this[i]=t[i]}else this.$attr={};this.$$element=e}function O(e,t,n){$e.innerHTML="<span "+t+">";var r=$e.firstChild.attributes,i=r[0];r.removeNamedItem(i.name),i.value=n,e.attributes.setNamedItem(i)}function R(e,t){try{e.addClass(t)}catch(n){}}function j(t,n,r,i,o){t instanceof Rr||(t=Rr(t));for(var a=/\S+/,s=0,l=t.length;l>s;s++){var u=t[s];u.nodeType===ii&&u.nodeValue.match(a)&&Te(u,t[s]=e.document.createElement("span"))}var c=V(t,n,t,r,i,o);j.$$addScopeClass(t);var h=null;return function(e,n,r){ce(e,"scope"),o&&o.needsNewScope&&(e=e.$parent.$new()),r=r||{};var i=r.parentBoundTranscludeFn,a=r.transcludeControllers,s=r.futureParentElement;i&&i.$$boundTransclude&&(i=i.$$boundTransclude),h||(h=_(s));var l;if(l="html"!==h?Rr(ae(h,Rr("<div>").append(t).html())):n?Ei.clone.call(t):t,a)for(var u in a)l.data("$"+u+"Controller",a[u].instance);return j.$$addScopeInfo(l,e),n&&n(l,e),c&&c(e,l,l,i),l}}function _(e){var t=e&&e[0];return t&&"foreignobject"!==F(t)&&Br.call(t).match(/SVG/)?"svg":"html"}function V(e,t,n,r,i,o){function a(e,n,r,i){var o,a,s,l,u,c,h,p,g;if(d){var m=n.length;for(g=new Array(m),u=0;u<f.length;u+=3)h=f[u],g[h]=n[h]}else g=n;for(u=0,c=f.length;c>u;)s=g[f[u++]],o=f[u++],a=f[u++],o?(o.scope?(l=e.$new(),j.$$addScopeInfo(Rr(s),l)):l=e,p=o.transcludeOnThisElement?U(e,o.transclude,i):!o.templateOnThisElement&&i?i:!i&&t?U(e,t):null,o(a,l,s,r,p)):a&&a(e,s.childNodes,void 0,i)}for(var s,l,u,c,h,p,d,f=[],g=0;g<e.length;g++)s=new D,l=W(e[g],[],s,0===g?r:void 0,i),u=l.length?K(l,e[g],s,t,n,null,[],[],o):null,u&&u.scope&&j.$$addScopeClass(s.$$element),h=u&&u.terminal||!(c=e[g].childNodes)||!c.length?null:V(c,u?(u.transcludeOnThisElement||!u.templateOnThisElement)&&u.transclude:t),(u||h)&&(f.push(g,u,h),p=!0,d=d||u),o=null;return p?a:null}function U(e,t,n){function r(r,i,o,a,s){return r||(r=e.$new(!1,s),r.$$transcluded=!0),t(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})}var i=r.$$slots=ge();for(var o in t.$$slots)t.$$slots[o]?i[o]=U(e,t.$$slots[o],n):i[o]=null;return r}function W(e,t,n,r,i){var o,a,s=e.nodeType,l=n.$attr;switch(s){case ni:Z(t,gt(F(e)),"E",r,i);for(var u,c,p,d,f,g,v=e.attributes,$=0,b=v&&v.length;b>$;$++){var x=!1,E=!1;u=v[$],c=u.name,f=Kr(u.value),d=gt(c),(g=Ce.test(d))&&(c=c.replace(qi,"").substr(8).replace(/_(.)/g,function(e,t){return t.toUpperCase()}));var C=d.match(Se);C&&ee(C[1])&&(x=c,E=c.substr(0,c.length-5)+"end",c=c.substr(0,c.length-6)),p=gt(c.toLowerCase()),l[p]=c,!g&&n.hasOwnProperty(p)||(n[p]=f,qe(e,p)&&(n[p]=!0)),ue(e,t,f,p,g),Z(t,p,"A",r,i,x,E)}if(a=e.className,y(a)&&(a=a.animVal),w(a)&&""!==a)for(;o=m.exec(a);)p=gt(o[2]),Z(t,p,"C",r,i)&&(n[p]=Kr(o[3])),a=a.substr(o.index+o[0].length);break;case ii:if(11===Or)for(;e.parentNode&&e.nextSibling&&e.nextSibling.nodeType===ii;)e.nodeValue=e.nodeValue+e.nextSibling.nodeValue,e.parentNode.removeChild(e.nextSibling);oe(t,e.nodeValue);break;case oi:try{o=h.exec(e.nodeValue),o&&(p=gt(o[1]),Z(t,p,"M",r,i)&&(n[p]=Kr(o[2])))}catch(S){}}return t.sort(re),t}function q(e,t,n){var r=[],i=0;if(t&&e.hasAttribute&&e.hasAttribute(t)){do{if(!e)throw Hi("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",t,n);e.nodeType==ni&&(e.hasAttribute(t)&&i++,
e.hasAttribute(n)&&i--),r.push(e),e=e.nextSibling}while(i>0)}else r.push(e);return Rr(r)}function G(e,t,n){return function(r,i,o,a,s){return i=q(i[0],t,n),e(r,i,o,a,s)}}function z(e,t,n,r,i,o){var a;return e?j(t,n,r,i,o):function(){return a||(a=j(t,n,r,i,o),t=n=o=null),a.apply(this,arguments)}}function K(e,t,n,o,a,s,l,c,h){function p(e,t,n,r){e&&(n&&(e=G(e,n,r)),e.require=f.require,e.directiveName=g,(S===f||f.$$isolateScope)&&(e=pe(e,{isolateScope:!0})),l.push(e)),t&&(n&&(t=G(t,n,r)),t.require=f.require,t.directiveName=g,(S===f||f.$$isolateScope)&&(t=pe(t,{isolateScope:!0})),c.push(t))}function d(e,i,o,a,s){function h(e,t,n,r){var i;if(A(e)||(r=n,n=t,t=e,e=void 0),I&&(i=$),n||(n=I?w.parent():w),!r)return s(e,t,i,n,P);var o=s.$$slots[r];if(o)return o(e,t,i,n,P);if(v(o))throw Hi("noslot",'No parent directive that requires a transclusion with slot name "{0}". Element: {1}',r,Y(w))}var p,d,f,g,m,$,b,w,T,M;t===o?(T=n,w=n.$$element):(w=Rr(o),T=new D(w,n)),m=i,S?g=i.$new(!0):x&&(m=i.$parent),s&&(b=h,b.$$boundTransclude=s,b.isSlotFilled=function(e){return!!s.$$slots[e]}),E&&($=J(w,T,b,E,g,i,S)),S&&(j.$$addScopeInfo(w,g,!0,!(L&&(L===S||L===S.$$originalDirective))),j.$$addScopeClass(w,!0),g.$$isolateBindings=S.$$isolateBindings,M=fe(i,T,g,g.$$isolateBindings,S),M.removeWatches&&g.$on("$destroy",M.removeWatches));for(var k in $){var N=E[k],O=$[k],R=N.$$bindings.bindToController;O.identifier&&R?O.bindingInfo=fe(m,T,O.instance,R,N):O.bindingInfo={};var F=O();F!==O.instance&&(O.instance=F,w.data("$"+N.name+"Controller",F),O.bindingInfo.removeWatches&&O.bindingInfo.removeWatches(),O.bindingInfo=fe(m,T,O.instance,R,N))}for(r(E,function(e,t){var n=e.require;e.bindToController&&!Gr(n)&&y(n)&&u($[t].instance,X(t,n,w,$))}),r($,function(e){var t=e.instance;C(t.$onChanges)&&t.$onChanges(e.bindingInfo.initialChanges),C(t.$onInit)&&t.$onInit(),C(t.$onDestroy)&&m.$on("$destroy",function(){t.$onDestroy()})}),p=0,d=l.length;d>p;p++)f=l[p],de(f,f.isolateScope?g:i,w,T,f.require&&X(f.directiveName,f.require,w,$),b);var P=i;for(S&&(S.template||null===S.templateUrl)&&(P=g),e&&e(P,o.childNodes,void 0,s),p=c.length-1;p>=0;p--)f=c[p],de(f,f.isolateScope?g:i,w,T,f.require&&X(f.directiveName,f.require,w,$),b);r($,function(e){var t=e.instance;C(t.$postLink)&&t.$postLink()})}h=h||{};for(var f,g,m,$,b,w=-Number.MAX_VALUE,x=h.newScopeDirective,E=h.controllerDirectives,S=h.newIsolateScopeDirective,L=h.templateDirective,T=h.nonTlbTranscludeDirective,M=!1,k=!1,I=h.hasElementTranscludeDirective,N=n.$$element=Rr(t),O=s,R=o,P=!1,_=!1,V=0,B=e.length;B>V;V++){f=e[V];var U=f.$$start,K=f.$$end;if(U&&(N=q(t,U,K)),m=void 0,w>f.priority)break;if((b=f.scope)&&(f.templateUrl||(y(b)?(ie("new/isolated scope",S||x,f,N),S=f):ie("new/isolated scope",S,f,N)),x=x||f),g=f.name,!P&&(f.replace&&(f.templateUrl||f.template)||f.transclude&&!f.$$tlb)){for(var Z,ee=V+1;Z=e[ee++];)if(Z.transclude&&!Z.$$tlb||Z.replace&&(Z.templateUrl||Z.template)){_=!0;break}P=!0}if(!f.templateUrl&&f.controller&&(b=f.controller,E=E||ge(),ie("'"+g+"' controller",E[g],f,N),E[g]=f),b=f.transclude)if(M=!0,f.$$tlb||(ie("transclusion",T,f,N),T=f),"element"==b)I=!0,w=f.priority,m=N,N=n.$$element=Rr(j.$$createComment(g,n[g])),t=N[0],he(a,H(m),t),m[0].$$parentNode=m[0].parentNode,R=z(_,m,o,w,O&&O.name,{nonTlbTranscludeDirective:T});else{var re=ge();if(m=Rr(ke(t)).contents(),y(b)){m=[];var oe=ge(),se=ge();r(b,function(e,t){var n="?"===e.charAt(0);e=n?e.substring(1):e,oe[e]=t,re[t]=null,se[t]=n}),r(N.contents(),function(e){var t=oe[gt(F(e))];t?(se[t]=!0,re[t]=re[t]||[],re[t].push(e)):m.push(e)}),r(se,function(e,t){if(!e)throw Hi("reqslot","Required transclusion slot `{0}` was not filled.",t)});for(var le in re)re[le]&&(re[le]=z(_,re[le],o))}N.empty(),R=z(_,m,o,void 0,void 0,{needsNewScope:f.$$isolateScope||f.$$newScope}),R.$$slots=re}if(f.template)if(k=!0,ie("template",L,f,N),L=f,b=C(f.template)?f.template(N,n):f.template,b=Ee(b),f.replace){if(O=f,m=xe(b)?[]:vt(ae(f.templateNamespace,Kr(b))),t=m[0],1!=m.length||t.nodeType!==ni)throw Hi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",g,"");he(a,N,t);var ue={$attr:{}},ce=W(t,[],ue),me=e.splice(V+1,e.length-(V+1));(S||x)&&Q(ce,S,x),e=e.concat(ce).concat(me),te(n,ue),B=e.length}else N.html(b);if(f.templateUrl)k=!0,ie("template",L,f,N),L=f,f.replace&&(O=f),d=ne(e.splice(V,e.length-V),N,n,a,M&&R,l,c,{controllerDirectives:E,newScopeDirective:x!==f&&x,newIsolateScopeDirective:S,templateDirective:L,nonTlbTranscludeDirective:T}),B=e.length;else if(f.compile)try{$=f.compile(N,n,R),C($)?p(null,$,U,K):$&&p($.pre,$.post,U,K)}catch(ve){i(ve,Y(N))}f.terminal&&(d.terminal=!0,w=Math.max(w,f.priority))}return d.scope=x&&x.scope===!0,d.transcludeOnThisElement=M,d.templateOnThisElement=k,d.transclude=R,h.hasElementTranscludeDirective=I,d}function X(e,t,n,i){var o;if(w(t)){var a=t.match(x),s=t.substring(a[0].length),l=a[1]||a[3],u="?"===a[2];if("^^"===l?n=n.parent():(o=i&&i[s],o=o&&o.instance),!o){var c="$"+s+"Controller";o=l?n.inheritedData(c):n.data(c)}if(!o&&!u)throw Hi("ctreq","Controller '{0}', required by directive '{1}', can't be found!",s,e)}else if(Gr(t)){o=[];for(var h=0,p=t.length;p>h;h++)o[h]=X(e,t[h],n,i)}else y(t)&&(o={},r(t,function(t,r){o[r]=X(e,t,n,i)}));return o||null}function J(e,t,n,r,i,o,a){var s=ge();for(var l in r){var u=r[l],c={$scope:u===a||u.$$isolateScope?i:o,$element:e,$attrs:t,$transclude:n},h=u.controller;"@"==h&&(h=t[u.name]);var p=g(h,c,!0,u.controllerAs);s[u.name]=p,e.data("$"+u.name+"Controller",p.instance)}return s}function Q(e,t,n){for(var r=0,i=e.length;i>r;r++)e[r]=p(e[r],{$$isolateScope:t,$$newScope:n})}function Z(e,n,r,o,s,u,h){if(n===s)return null;var d=null;if(l.hasOwnProperty(n))for(var f,g=t.get(n+c),m=0,$=g.length;$>m;m++)try{if(f=g[m],(v(o)||o>f.priority)&&-1!=f.restrict.indexOf(r)){if(u&&(f=p(f,{$$start:u,$$end:h})),!f.$$bindings){var b=f.$$bindings=a(f,f.name);y(b.isolateScope)&&(f.$$isolateBindings=b.isolateScope)}e.push(f),d=f}}catch(w){i(w)}return d}function ee(e){if(l.hasOwnProperty(e))for(var n,r=t.get(e+c),i=0,o=r.length;o>i;i++)if(n=r[i],n.multiElement)return!0;return!1}function te(e,t){var n=t.$attr,i=e.$attr,o=e.$$element;r(e,function(r,i){"$"!=i.charAt(0)&&(t[i]&&t[i]!==r&&(r+=("style"===i?";":" ")+t[i]),e.$set(i,r,!0,n[i]))}),r(t,function(t,r){"class"==r?(R(o,t),e["class"]=(e["class"]?e["class"]+" ":"")+t):"style"==r?(o.attr("style",o.attr("style")+";"+t),e.style=(e.style?e.style+";":"")+t):"$"==r.charAt(0)||e.hasOwnProperty(r)||(e[r]=t,i[r]=n[r])})}function ne(e,t,n,i,a,s,l,u){var c,h,d=[],f=t[0],g=e.shift(),m=p(g,{templateUrl:null,transclude:null,replace:null,$$originalDirective:g}),v=C(g.templateUrl)?g.templateUrl(t,n):g.templateUrl,$=g.templateNamespace;return t.empty(),o(v).then(function(o){var p,b,w,x;if(o=Ee(o),g.replace){if(w=xe(o)?[]:vt(ae($,Kr(o))),p=w[0],1!=w.length||p.nodeType!==ni)throw Hi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",g.name,v);b={$attr:{}},he(i,t,p);var E=W(p,[],b);y(g.scope)&&Q(E,!0),e=E.concat(e),te(n,b)}else p=f,t.html(o);for(e.unshift(m),c=K(e,p,n,a,t,g,s,l,u),r(i,function(e,n){e==p&&(i[n]=t[0])}),h=V(t[0].childNodes,a);d.length;){var C=d.shift(),S=d.shift(),L=d.shift(),A=d.shift(),T=t[0];if(!C.$$destroyed){if(S!==f){var M=S.className;u.hasElementTranscludeDirective&&g.replace||(T=ke(p)),he(L,Rr(S),T),R(Rr(T),M)}x=c.transcludeOnThisElement?U(C,c.transclude,A):A,c(h,C,T,i,x)}}d=null}),function(e,t,n,r,i){var o=i;t.$$destroyed||(d?d.push(t,n,r,o):(c.transcludeOnThisElement&&(o=U(t,c.transclude,i)),c(h,t,n,r,o)))}}function re(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function ie(e,t,n,r){function i(e){return e?" (module: "+e+")":""}if(t)throw Hi("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",t.name,i(t.$$moduleName),n.name,i(n.$$moduleName),e,Y(r))}function oe(e,t){var r=n(t,!0);r&&e.push({priority:0,compile:function(e){var t=e.parent(),n=!!t.length;return n&&j.$$addBindingClass(t),function(e,t){var i=t.parent();n||j.$$addBindingClass(i),j.$$addBindingInfo(i,r.expressions),e.$watch(r,function(e){t[0].nodeValue=e})}}})}function ae(t,n){switch(t=kr(t||"html")){case"svg":case"math":var r=e.document.createElement("div");return r.innerHTML="<"+t+">"+n+"</"+t+">",r.childNodes[0].childNodes;default:return n}}function se(e,t){if("srcdoc"==t)return S.HTML;var n=F(e);return"xlinkHref"==t||"form"==n&&"action"==t||"img"!=n&&("src"==t||"ngSrc"==t)?S.RESOURCE_URL:void 0}function ue(e,t,r,i,o){var a=se(e,i);o=b[i]||o;var s=n(r,!0,a,o);if(s){if("multiple"===i&&"select"===F(e))throw Hi("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",Y(e));t.push({priority:100,compile:function(){return{pre:function(e,t,l){var u=l.$$observers||(l.$$observers=ge());if(E.test(i))throw Hi("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");var c=l[i];c!==r&&(s=c&&n(c,!0,a,o),r=c),s&&(l[i]=s(e),(u[i]||(u[i]=[])).$$inter=!0,(l.$$observers&&l.$$observers[i].$$scope||e).$watch(s,function(e,t){"class"===i&&e!=t?l.$updateClass(e,t):l.$set(i,e)}))}}}})}}function he(t,n,r){var i,o,a=n[0],s=n.length,l=a.parentNode;if(t)for(i=0,o=t.length;o>i;i++)if(t[i]==a){t[i++]=r;for(var u=i,c=u+s-1,h=t.length;h>u;u++,c++)h>c?t[u]=t[c]:delete t[u];t.length-=s-1,t.context===a&&(t.context=r);break}l&&l.replaceChild(r,a);var p=e.document.createDocumentFragment();for(i=0;s>i;i++)p.appendChild(n[i]);for(Rr.hasData(a)&&(Rr.data(r,Rr.data(a)),Rr(a).off("$destroy")),Rr.cleanData(p.querySelectorAll("*")),i=1;s>i;i++)delete n[i];n[0]=r,n.length=1}function pe(e,t){return u(function(){return e.apply(null,arguments)},e,t)}function de(e,t,n,r,o,a){try{e(t,n,r,o,a)}catch(s){i(s,Y(n))}}function fe(e,t,i,o,a){function l(t,n,r){C(i.$onChanges)&&n!==r&&(me||(e.$$postDigest(N),me=[]),c||(c={},me.push(u)),c[t]&&(r=c[t].previousValue),c[t]=new ft(r,n))}function u(){i.$onChanges(c),c=void 0}var c,h=[],p={};return r(o,function(r,o){var u,c,f,g,m,v=r.attrName,$=r.optional,y=r.mode;switch(y){case"@":$||Mr.call(t,v)||(i[o]=t[v]=void 0),t.$observe(v,function(e){if(w(e)||I(e)){var t=i[o];l(o,e,t),i[o]=e}}),t.$$observers[v].$$scope=e,u=t[v],w(u)?i[o]=n(u)(e):I(u)&&(i[o]=u),p[o]=new ft(Wi,i[o]);break;case"=":if(!Mr.call(t,v)){if($)break;t[v]=void 0}if($&&!t[v])break;c=s(t[v]),g=c.literal?B:function(e,t){return e===t||e!==e&&t!==t},f=c.assign||function(){throw u=i[o]=c(e),Hi("nonassign","Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",t[v],v,a.name)},u=i[o]=c(e);var b=function(t){return g(t,i[o])||(g(t,u)?f(e,t=i[o]):i[o]=t),u=t};b.$stateful=!0,m=r.collection?e.$watchCollection(t[v],b):e.$watch(s(t[v],b),null,c.literal),h.push(m);break;case"<":if(!Mr.call(t,v)){if($)break;t[v]=void 0}if($&&!t[v])break;c=s(t[v]),i[o]=c(e),p[o]=new ft(Wi,i[o]),m=e.$watch(c,function(e,t){e===t&&(t=i[o]),l(o,e,t),i[o]=e},c.literal),h.push(m);break;case"&":if(c=t.hasOwnProperty(v)?s(t[v]):d,c===d&&$)break;i[o]=function(t){return c(e,t)}}}),{initialChanges:p,removeWatches:h.length&&function(){for(var e=0,t=h.length;t>e;++e)h[e]()}}}var me,ve=/^\w/,$e=e.document.createElement("div"),ye=T;D.prototype={$normalize:gt,$addClass:function(e){e&&e.length>0&&M.addClass(this.$$element,e)},$removeClass:function(e){e&&e.length>0&&M.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=mt(e,t);n&&n.length&&M.addClass(this.$$element,n);var r=mt(t,e);r&&r.length&&M.removeClass(this.$$element,r)},$set:function(e,t,n,o){var a,s=this.$$element[0],l=qe(s,e),u=Ge(e),c=e;if(l?(this.$$element.prop(e,t),o=l):u&&(this[u]=t,c=u),this[e]=t,o?this.$attr[e]=o:(o=this.$attr[e],o||(this.$attr[e]=o=le(e,"-"))),a=F(this.$$element),"a"===a&&("href"===e||"xlinkHref"===e)||"img"===a&&"src"===e)this[e]=t=k(t,"src"===e);else if("img"===a&&"srcset"===e){for(var h="",p=Kr(t),d=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,f=/\s/.test(p)?d:/(,)/,g=p.split(f),m=Math.floor(g.length/2),$=0;m>$;$++){var y=2*$;h+=k(Kr(g[y]),!0),h+=" "+Kr(g[y+1])}var b=Kr(g[2*$]).split(/\s/);h+=k(Kr(b[0]),!0),2===b.length&&(h+=" "+Kr(b[1])),this[e]=t=h}n!==!1&&(null===t||v(t)?this.$$element.removeAttr(o):ve.test(o)?this.$$element.attr(o,t):O(this.$$element[0],o,t));var w=this.$$observers;w&&r(w[c],function(e){try{e(t)}catch(n){i(n)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=ge()),i=r[e]||(r[e]=[]);return i.push(t),$.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(e)||v(n[e])||t(n[e])}),function(){P(i,t)}}};var be=n.startSymbol(),we=n.endSymbol(),Ee="{{"==be&&"}}"==we?f:function(e){return e.replace(/\{\{/g,be).replace(/}}/g,we)},Ce=/^ngAttr[A-Z]/,Se=/^(.+)Start$/;return j.$$addBindingInfo=L?function(e,t){var n=e.data("$binding")||[];Gr(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:d,j.$$addBindingClass=L?function(e){R(e,"ng-binding")}:d,j.$$addScopeInfo=L?function(e,t,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";e.data(i,t)}:d,j.$$addScopeClass=L?function(e,t){R(e,t?"ng-isolate-scope":"ng-scope")}:d,j.$$createComment=function(t,n){var r="";return L&&(r=" "+(t||"")+": "+(n||"")+" "),e.document.createComment(r)},j}]}function ft(e,t){this.previousValue=e,this.currentValue=t}function gt(e){return we(e.replace(qi,""))}function mt(e,t){var n="",r=e.split(/\s+/),i=t.split(/\s+/);e:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a==i[s])continue e;n+=(n.length>0?" ":"")+a}return n}function vt(e){e=Rr(e);var t=e.length;if(1>=t)return e;for(;t--;){var n=e[t];n.nodeType===oi&&_r.call(e,t,1)}return e}function $t(e,t){if(t&&w(t))return t;if(w(e)){var n=zi.exec(e);if(n)return n[3]}}function yt(){var e={},n=!1;this.has=function(t){return e.hasOwnProperty(t)},this.register=function(t,n){pe(t,"controller"),y(t)?u(e,t):e[t]=n},this.allowGlobals=function(){n=!0},this.$get=["$injector","$window",function(r,i){function o(e,n,r,i){if(!e||!y(e.$scope))throw t("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,n);e.$scope[n]=r}return function(t,a,s,l){var c,h,p,d;if(s=s===!0,l&&w(l)&&(d=l),w(t)){if(h=t.match(zi),!h)throw Gi("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",t);p=h[1],d=d||h[3],t=e.hasOwnProperty(p)?e[p]:de(a.$scope,p,!0)||(n?de(i,p,!0):void 0),he(t,p,!0)}if(s){var f=(Gr(t)?t[t.length-1]:t).prototype;c=Object.create(f||null),d&&o(a,d,c,p||t.name);var g;return g=u(function(){var e=r.invoke(t,c,a,p);return e!==c&&(y(e)||C(e))&&(c=e,d&&o(a,d,c,p||t.name)),c},{instance:c,identifier:d})}return c=r.instantiate(t,a,p),d&&o(a,d,c,p||t.name),c}}]}function bt(){this.$get=["$window",function(e){return Rr(e.document)}]}function wt(){this.$get=["$log",function(e){return function(t,n){e.error.apply(e,arguments)}}]}function xt(e){return y(e)?E(e)?e.toISOString():G(e):e}function Et(){this.$get=function(){return function(e){if(!e)return"";var t=[];return i(e,function(e,n){null===e||v(e)||(Gr(e)?r(e,function(e){t.push(ne(n)+"="+ne(xt(e)))}):t.push(ne(n)+"="+ne(xt(e))))}),t.join("&")}}}function Ct(){this.$get=function(){return function(e){function t(e,o,a){null===e||v(e)||(Gr(e)?r(e,function(e,n){t(e,o+"["+(y(e)?n:"")+"]")}):y(e)&&!E(e)?i(e,function(e,n){t(e,o+(a?"":"[")+n+(a?"":"]"))}):n.push(ne(o)+"="+ne(xt(e))))}if(!e)return"";var n=[];return t(e,"",!0),n.join("&")}}}function St(e,t){if(w(e)){var n=e.replace(Zi,"").trim();if(n){var r=t("Content-Type");(r&&0===r.indexOf(Xi)||Lt(n))&&(e=z(n))}}return e}function Lt(e){var t=e.match(Yi);return t&&Qi[t[0]].test(e)}function At(e){function t(e,t){e&&(i[e]=i[e]?i[e]+", "+t:t)}var n,i=ge();return w(e)?r(e.split("\n"),function(e){n=e.indexOf(":"),t(kr(Kr(e.substr(0,n))),Kr(e.substr(n+1)))}):y(e)&&r(e,function(e,n){t(kr(n),Kr(e))}),i}function Tt(e){var t;return function(n){if(t||(t=At(e)),n){var r=t[kr(n)];return void 0===r&&(r=null),r}return t}}function Mt(e,t,n,i){return C(i)?i(e,t,n):(r(i,function(r){e=r(e,t,n)}),e)}function kt(e){return e>=200&&300>e}function It(){var e=this.defaults={transformResponse:[St],transformRequest:[function(e){return!y(e)||T(e)||k(e)||M(e)?e:G(e)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:V(Ji),put:V(Ji),patch:V(Ji)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},n=!1;this.useApplyAsync=function(e){return $(e)?(n=!!e,this):n};var i=!0;this.useLegacyPromiseExtensions=function(e){return $(e)?(i=!!e,this):i};var o=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(a,s,l,c,h,p){function d(n){function o(e){var t=u({},e);return t.data=Mt(e.data,e.headers,e.status,l.transformResponse),kt(e.status)?t:h.reject(t)}function a(e,t){var n,i={};return r(e,function(e,r){C(e)?(n=e(t),null!=n&&(i[r]=n)):i[r]=e}),i}function s(t){var n,r,i,o=e.headers,s=u({},t.headers);o=u({},o.common,o[kr(t.method)]);e:for(n in o){r=kr(n);for(i in s)if(kr(i)===r)continue e;s[n]=o[n]}return a(s,V(t))}if(!y(n))throw t("$http")("badreq","Http request configuration must be an object.  Received: {0}",n);if(!w(n.url))throw t("$http")("badreq","Http request configuration url must be a string.  Received: {0}",n.url);var l=u({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse,paramSerializer:e.paramSerializer},n);l.headers=s(n),l.method=Ir(l.method),l.paramSerializer=w(l.paramSerializer)?p.get(l.paramSerializer):l.paramSerializer;var c=function(t){var n=t.headers,i=Mt(t.data,Tt(n),void 0,t.transformRequest);return v(i)&&r(n,function(e,t){"content-type"===kr(t)&&delete n[t]}),v(t.withCredentials)&&!v(e.withCredentials)&&(t.withCredentials=e.withCredentials),m(t,i).then(o,o)},d=[c,void 0],f=h.when(l);for(r(E,function(e){(e.request||e.requestError)&&d.unshift(e.request,e.requestError),(e.response||e.responseError)&&d.push(e.response,e.responseError)});d.length;){var g=d.shift(),$=d.shift();f=f.then(g,$)}return i?(f.success=function(e){return he(e,"fn"),f.then(function(t){e(t.data,t.status,t.headers,l)}),f},f.error=function(e){return he(e,"fn"),f.then(null,function(t){e(t.data,t.status,t.headers,l)}),f}):(f.success=to("success"),f.error=to("error")),f}function f(e){r(arguments,function(e){d[e]=function(t,n){return d(u({},n||{},{method:e,url:t}))}})}function g(e){r(arguments,function(e){d[e]=function(t,n,r){return d(u({},r||{},{method:e,url:t,data:n}))}})}function m(t,i){function o(e){if(e){var t={};return r(e,function(e,r){t[r]=function(t){function r(){e(t)}n?c.$applyAsync(r):c.$$phase?r():c.$apply(r)}}),t}}function l(e,t,r,i){function o(){u(t,e,r,i)}g&&(kt(e)?g.put(S,[e,t,At(r),i]):g.remove(S)),n?c.$applyAsync(o):(o(),c.$$phase||c.$apply())}function u(e,n,r,i){n=n>=-1?n:0,(kt(n)?w.resolve:w.reject)({data:e,status:n,headers:Tt(r),config:t,statusText:i})}function p(e){u(e.data,e.status,V(e.headers()),e.statusText)}function f(){var e=d.pendingRequests.indexOf(t);-1!==e&&d.pendingRequests.splice(e,1)}var g,m,w=h.defer(),E=w.promise,C=t.headers,S=b(t.url,t.paramSerializer(t.params));if(d.pendingRequests.push(t),E.then(f,f),!t.cache&&!e.cache||t.cache===!1||"GET"!==t.method&&"JSONP"!==t.method||(g=y(t.cache)?t.cache:y(e.cache)?e.cache:x),g&&(m=g.get(S),$(m)?N(m)?m.then(p,p):Gr(m)?u(m[1],m[0],V(m[2]),m[3]):u(m,200,{},"OK"):g.put(S,E)),v(m)){var L=Dn(t.url)?s()[t.xsrfCookieName||e.xsrfCookieName]:void 0;L&&(C[t.xsrfHeaderName||e.xsrfHeaderName]=L),a(t.method,S,i,l,C,t.timeout,t.withCredentials,t.responseType,o(t.eventHandlers),o(t.uploadEventHandlers))}return E}function b(e,t){return t.length>0&&(e+=(-1==e.indexOf("?")?"?":"&")+t),e}var x=l("$http");e.paramSerializer=w(e.paramSerializer)?p.get(e.paramSerializer):e.paramSerializer;var E=[];return r(o,function(e){E.unshift(w(e)?p.get(e):p.invoke(e))}),d.pendingRequests=[],f("get","delete","head","jsonp"),g("post","put","patch"),d.defaults=e,d}]}function Nt(){this.$get=function(){return function(){return new e.XMLHttpRequest}}}function Dt(){this.$get=["$browser","$window","$document","$xhrFactory",function(e,t,n,r){return Ot(e,r,e.defer,t.angular.callbacks,n[0])}]}function Ot(e,t,n,i,o){function a(e,t,n){var r=o.createElement("script"),a=null;return r.type="text/javascript",r.src=e,r.async=!0,a=function(e){pi(r,"load",a),pi(r,"error",a),o.body.removeChild(r),r=null;var s=-1,l="unknown";e&&("load"!==e.type||i[t].called||(e={type:"error"}),l=e.type,s="error"===e.type?404:200),n&&n(s,l)},hi(r,"load",a),hi(r,"error",a),o.body.appendChild(r),a}return function(o,s,l,u,c,h,p,f,g,m){function y(){x&&x(),E&&E.abort()}function b(t,r,i,o,a){$(L)&&n.cancel(L),x=E=null,t(r,i,o,a),e.$$completeOutstandingRequest(d)}if(e.$$incOutstandingRequestCount(),s=s||e.url(),"jsonp"==kr(o)){var w="_"+(i.counter++).toString(36);i[w]=function(e){i[w].data=e,i[w].called=!0};var x=a(s.replace("JSON_CALLBACK","angular.callbacks."+w),w,function(e,t){b(u,e,i[w].data,"",t),i[w]=d})}else{var E=t(o,s);E.open(o,s,!0),r(c,function(e,t){$(e)&&E.setRequestHeader(t,e)}),E.onload=function(){var e=E.statusText||"",t="response"in E?E.response:E.responseText,n=1223===E.status?204:E.status;0===n&&(n=t?200:"file"==Nn(s).protocol?404:0),b(u,n,t,E.getAllResponseHeaders(),e)};var C=function(){b(u,-1,null,null,"")};if(E.onerror=C,E.onabort=C,r(g,function(e,t){E.addEventListener(t,e)}),r(m,function(e,t){E.upload.addEventListener(t,e)}),p&&(E.withCredentials=!0),f)try{E.responseType=f}catch(S){if("json"!==f)throw S}E.send(v(l)?null:l)}if(h>0)var L=n(y,h);else N(h)&&h.then(y)}}function Rt(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(e){return"\\\\\\"+e}function a(n){return n.replace(d,e).replace(f,t)}function s(e){if(null==e)return"";switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=G(e)}return e}function l(e,t,n,r){var i;return i=e.$watch(function(e){return i(),r(e)},t,n)}function c(o,c,d,f){function m(e){try{return e=N(e),f&&!$(e)?e:s(e)}catch(t){r(no.interr(o,t))}}if(!o.length||-1===o.indexOf(e)){var y;if(!c){var b=a(o);y=g(b),y.exp=o,y.expressions=[],y.$$watchDelegate=l}return y}f=!!f;for(var w,x,E,S=0,L=[],A=[],T=o.length,M=[],k=[];T>S;){if(-1==(w=o.indexOf(e,S))||-1==(x=o.indexOf(t,w+h))){S!==T&&M.push(a(o.substring(S)));break}S!==w&&M.push(a(o.substring(S,w))),E=o.substring(w+h,x),L.push(E),A.push(n(E,m)),S=x+p,k.push(M.length),M.push("")}if(d&&M.length>1&&no.throwNoconcat(o),!c||L.length){var I=function(e){for(var t=0,n=L.length;n>t;t++){if(f&&v(e[t]))return;M[k[t]]=e[t]}return M.join("")},N=function(e){return d?i.getTrusted(d,e):i.valueOf(e)};return u(function(e){var t=0,n=L.length,i=new Array(n);try{for(;n>t;t++)i[t]=A[t](e);return I(i)}catch(a){r(no.interr(o,a))}},{exp:o,expressions:L,$$watchDelegate:function(e,t){var n;return e.$watchGroup(A,function(r,i){var o=I(r);C(t)&&t.call(this,o,r!==i?n:o,e),n=o})}})}}var h=e.length,p=t.length,d=new RegExp(e.replace(/./g,o),"g"),f=new RegExp(t.replace(/./g,o),"g");return c.startSymbol=function(){return e},c.endSymbol=function(){return t},c}]}function jt(){this.$get=["$rootScope","$window","$q","$$q","$browser",function(e,t,n,r,i){function o(o,s,l,u){function c(){h?o.apply(null,p):o(g)}var h=arguments.length>4,p=h?H(arguments,4):[],d=t.setInterval,f=t.clearInterval,g=0,m=$(u)&&!u,v=(m?r:n).defer(),y=v.promise;return l=$(l)?l:0,y.$$intervalId=d(function(){m?i.defer(c):e.$evalAsync(c),v.notify(g++),l>0&&g>=l&&(v.resolve(g),f(y.$$intervalId),delete a[y.$$intervalId]),m||e.$apply()},s),a[y.$$intervalId]=v,y}var a={};return o.cancel=function(e){return e&&e.$$intervalId in a?(a[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete a[e.$$intervalId],!0):!1},o}]}function Ft(e){for(var t=e.split("/"),n=t.length;n--;)t[n]=te(t[n]);return t.join("/")}function Pt(e,t){var n=Nn(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=h(n.port)||io[n.protocol]||null}function _t(e,t){var n="/"!==e.charAt(0);n&&(e="/"+e);var r=Nn(e);t.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),t.$$search=Z(r.search),t.$$hash=decodeURIComponent(r.hash),t.$$path&&"/"!=t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function Vt(e,t){return 0===t.indexOf(e)?t.substr(e.length):void 0}function Bt(e){var t=e.indexOf("#");return-1==t?e:e.substr(0,t)}function Ut(e){return e.replace(/(#.+)|#$/,"$1")}function Ht(e){return e.substr(0,Bt(e).lastIndexOf("/")+1)}function Wt(e){return e.substring(0,e.indexOf("/",e.indexOf("//")+2))}function qt(e,t,n){this.$$html5=!0,n=n||"",Pt(e,this),this.$$parse=function(e){var n=Vt(t,e);if(!w(n))throw oo("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',e,t);_t(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=ee(this.$$search),n=this.$$hash?"#"+te(this.$$hash):"";this.$$url=Ft(this.$$path)+(e?"?"+e:"")+n,this.$$absUrl=t+this.$$url.substr(1)},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a,s;return $(o=Vt(e,r))?(a=o,s=$(o=Vt(n,o))?t+(Vt("/",o)||o):e+a):$(o=Vt(t,r))?s=t+o:t==r+"/"&&(s=t),s&&this.$$parse(s),!!s}}function Gt(e,t,n){Pt(e,this),this.$$parse=function(r){function i(e,t,n){var r,i=/^\/[A-Z]:(\/.*)/;return 0===t.indexOf(n)&&(t=t.replace(n,"")),i.exec(t)?e:(r=i.exec(e),r?r[1]:e)}var o,a=Vt(e,r)||Vt(t,r);v(a)||"#"!==a.charAt(0)?this.$$html5?o=a:(o="",v(a)&&(e=r,this.replace())):(o=Vt(n,a),v(o)&&(o=a)),_t(o,this),this.$$path=i(this.$$path,o,e),this.$$compose()},this.$$compose=function(){var t=ee(this.$$search),r=this.$$hash?"#"+te(this.$$hash):"";this.$$url=Ft(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+(this.$$url?n+this.$$url:"")},this.$$parseLinkUrl=function(t,n){return Bt(e)==Bt(t)?(this.$$parse(t),!0):!1}}function zt(e,t,n){this.$$html5=!0,Gt.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return e==Bt(r)?o=r:(a=Vt(t,r))?o=e+n+a:t===r+"/"&&(o=t),o&&this.$$parse(o),!!o},this.$$compose=function(){var t=ee(this.$$search),r=this.$$hash?"#"+te(this.$$hash):"";this.$$url=Ft(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+n+this.$$url}}function Kt(e){return function(){return this[e]}}function Xt(e,t){return function(n){return v(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function Jt(){var e="",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return $(t)?(e=t,this):e},this.html5Mode=function(e){return I(e)?(t.enabled=e,this):y(e)?(I(e.enabled)&&(t.enabled=e.enabled),I(e.requireBase)&&(t.requireBase=e.requireBase),I(e.rewriteLinks)&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(e,t,n){var i=u.url(),o=u.$$state;try{r.url(e,t,n),u.$$state=r.state()}catch(a){throw u.url(i),u.$$state=o,a}}function l(e,t){n.$broadcast("$locationChangeSuccess",u.absUrl(),e,u.$$state,t)}var u,c,h,p=r.baseHref(),d=r.url();if(t.enabled){if(!p&&t.requireBase)throw oo("nobase","$location in HTML5 mode requires a <base> tag to be present!");h=Wt(d)+(p||"/"),c=i.history?qt:zt}else h=Bt(d),c=Gt;var f=Ht(h);u=new c(h,f,"#"+e),u.$$parseLinkUrl(d,d),u.$$state=r.state();var g=/^\s*(javascript|mailto):/i;o.on("click",function(e){if(t.rewriteLinks&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!=e.which&&2!=e.button){for(var i=Rr(e.target);"a"!==F(i[0]);)if(i[0]===o[0]||!(i=i.parent())[0])return;var s=i.prop("href"),l=i.attr("href")||i.attr("xlink:href");y(s)&&"[object SVGAnimatedString]"===s.toString()&&(s=Nn(s.animVal).href),g.test(s)||!s||i.attr("target")||e.isDefaultPrevented()||u.$$parseLinkUrl(s,l)&&(e.preventDefault(),u.absUrl()!=r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}),Ut(u.absUrl())!=Ut(d)&&r.url(u.absUrl(),!0);var m=!0;return r.onUrlChange(function(e,t){return v(Vt(f,e))?void(a.location.href=e):(n.$evalAsync(function(){var r,i=u.absUrl(),o=u.$$state;e=Ut(e),u.$$parse(e),u.$$state=t,r=n.$broadcast("$locationChangeStart",e,i,t,o).defaultPrevented,u.absUrl()===e&&(r?(u.$$parse(i),u.$$state=o,s(i,!1,o)):(m=!1,l(i,o)))}),void(n.$$phase||n.$digest()))}),n.$watch(function(){var e=Ut(r.url()),t=Ut(u.absUrl()),o=r.state(),a=u.$$replace,c=e!==t||u.$$html5&&i.history&&o!==u.$$state;(m||c)&&(m=!1,n.$evalAsync(function(){var t=u.absUrl(),r=n.$broadcast("$locationChangeStart",t,e,u.$$state,o).defaultPrevented;u.absUrl()===t&&(r?(u.$$parse(e),u.$$state=o):(c&&s(t,a,o===u.$$state?null:u.$$state),l(e,o)))})),u.$$replace=!1}),u}]}function Yt(){var e=!0,t=this;this.debugEnabled=function(t){return $(t)?(e=t,this):e},this.$get=["$window",function(n){function i(e){return e instanceof Error&&(e.stack?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function o(e){var t=n.console||{},o=t[e]||t.log||d,a=!1;try{a=!!o.apply}catch(s){}return a?function(){var e=[];return r(arguments,function(t){e.push(i(t))}),o.apply(t,e)}:function(e,t){o(e,null==t?"":t)}}return{log:o("log"),info:o("info"),warn:o("warn"),error:o("error"),debug:function(){var n=o("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function Qt(e,t){if("__defineGetter__"===e||"__defineSetter__"===e||"__lookupGetter__"===e||"__lookupSetter__"===e||"__proto__"===e)throw so("isecfld","Attempting to access a disallowed field in Angular expressions! Expression: {0}",t);return e}function Zt(e){return e+""}function en(e,t){if(e){if(e.constructor===e)throw so("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e.window===e)throw so("isecwindow","Referencing the Window in Angular expressions is disallowed! Expression: {0}",t);if(e.children&&(e.nodeName||e.prop&&e.attr&&e.find))throw so("isecdom","Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}",t);if(e===Object)throw so("isecobj","Referencing Object in Angular expressions is disallowed! Expression: {0}",t)}return e}function tn(e,t){if(e){if(e.constructor===e)throw so("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e===lo||e===uo||e===co)throw so("isecff","Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}",t)}}function nn(e,t){if(e&&(e===0..constructor||e===(!1).constructor||e==="".constructor||e==={}.constructor||e===[].constructor||e===Function.constructor))throw so("isecaf","Assigning to a constructor is disallowed! Expression: {0}",t)}function rn(e,t){return"undefined"!=typeof e?e:t}function on(e,t){return"undefined"==typeof e?t:"undefined"==typeof t?e:e+t}function an(e,t){var n=e(t);return!n.$stateful}function sn(e,t){var n,i;switch(e.type){case go.Program:n=!0,r(e.body,function(e){sn(e.expression,t),n=n&&e.expression.constant}),e.constant=n;break;case go.Literal:e.constant=!0,e.toWatch=[];break;case go.UnaryExpression:sn(e.argument,t),e.constant=e.argument.constant,e.toWatch=e.argument.toWatch;break;case go.BinaryExpression:sn(e.left,t),sn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.left.toWatch.concat(e.right.toWatch);break;case go.LogicalExpression:sn(e.left,t),sn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.constant?[]:[e];break;case go.ConditionalExpression:sn(e.test,t),sn(e.alternate,t),sn(e.consequent,t),e.constant=e.test.constant&&e.alternate.constant&&e.consequent.constant,e.toWatch=e.constant?[]:[e];break;case go.Identifier:e.constant=!1,e.toWatch=[e];break;case go.MemberExpression:sn(e.object,t),e.computed&&sn(e.property,t),e.constant=e.object.constant&&(!e.computed||e.property.constant),e.toWatch=[e];break;case go.CallExpression:n=e.filter?an(t,e.callee.name):!1,i=[],r(e.arguments,function(e){sn(e,t),n=n&&e.constant,e.constant||i.push.apply(i,e.toWatch)}),e.constant=n,e.toWatch=e.filter&&an(t,e.callee.name)?i:[e];break;case go.AssignmentExpression:sn(e.left,t),sn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=[e];break;case go.ArrayExpression:n=!0,i=[],r(e.elements,function(e){
sn(e,t),n=n&&e.constant,e.constant||i.push.apply(i,e.toWatch)}),e.constant=n,e.toWatch=i;break;case go.ObjectExpression:n=!0,i=[],r(e.properties,function(e){sn(e.value,t),n=n&&e.value.constant,e.value.constant||i.push.apply(i,e.value.toWatch)}),e.constant=n,e.toWatch=i;break;case go.ThisExpression:e.constant=!1,e.toWatch=[];break;case go.LocalsExpression:e.constant=!1,e.toWatch=[]}}function ln(e){if(1==e.length){var t=e[0].expression,n=t.toWatch;return 1!==n.length?n:n[0]!==t?n:void 0}}function un(e){return e.type===go.Identifier||e.type===go.MemberExpression}function cn(e){return 1===e.body.length&&un(e.body[0].expression)?{type:go.AssignmentExpression,left:e.body[0].expression,right:{type:go.NGValueParameter},operator:"="}:void 0}function hn(e){return 0===e.body.length||1===e.body.length&&(e.body[0].expression.type===go.Literal||e.body[0].expression.type===go.ArrayExpression||e.body[0].expression.type===go.ObjectExpression)}function pn(e){return e.constant}function dn(e,t){this.astBuilder=e,this.$filter=t}function fn(e,t){this.astBuilder=e,this.$filter=t}function gn(e){return"constructor"==e}function mn(e){return C(e.valueOf)?e.valueOf():vo.call(e)}function vn(){var e,t,n=ge(),i=ge(),o={"true":!0,"false":!1,"null":null,undefined:void 0};this.addLiteral=function(e,t){o[e]=t},this.setIdentifierFns=function(n,r){return e=n,t=r,this},this.$get=["$filter",function(a){function s(e,t,r){var o,s,u;switch(r=r||b,typeof e){case"string":e=e.trim(),u=e;var m=r?i:n;if(o=m[u],!o){":"===e.charAt(0)&&":"===e.charAt(1)&&(s=!0,e=e.substring(2));var $=r?y:v,w=new fo($),x=new mo(w,a,$);o=x.parse(e),o.constant?o.$$watchDelegate=f:s?o.$$watchDelegate=o.literal?p:h:o.inputs&&(o.$$watchDelegate=c),r&&(o=l(o)),m[u]=o}return g(o,t);case"function":return g(e,t);default:return g(d,t)}}function l(e){function t(t,n,r,i){var o=b;b=!0;try{return e(t,n,r,i)}finally{b=o}}if(!e)return e;t.$$watchDelegate=e.$$watchDelegate,t.assign=l(e.assign),t.constant=e.constant,t.literal=e.literal;for(var n=0;e.inputs&&n<e.inputs.length;++n)e.inputs[n]=l(e.inputs[n]);return t.inputs=e.inputs,t}function u(e,t){return null==e||null==t?e===t:"object"==typeof e&&(e=mn(e),"object"==typeof e)?!1:e===t||e!==e&&t!==t}function c(e,t,n,r,i){var o,a=r.inputs;if(1===a.length){var s=u;return a=a[0],e.$watch(function(e){var t=a(e);return u(t,s)||(o=r(e,void 0,void 0,[t]),s=t&&mn(t)),o},t,n,i)}for(var l=[],c=[],h=0,p=a.length;p>h;h++)l[h]=u,c[h]=null;return e.$watch(function(e){for(var t=!1,n=0,i=a.length;i>n;n++){var s=a[n](e);(t||(t=!u(s,l[n])))&&(c[n]=s,l[n]=s&&mn(s))}return t&&(o=r(e,void 0,void 0,c)),o},t,n,i)}function h(e,t,n,r){var i,o;return i=e.$watch(function(e){return r(e)},function(e,n,r){o=e,C(t)&&t.apply(this,arguments),$(e)&&r.$$postDigest(function(){$(o)&&i()})},n)}function p(e,t,n,i){function o(e){var t=!0;return r(e,function(e){$(e)||(t=!1)}),t}var a,s;return a=e.$watch(function(e){return i(e)},function(e,n,r){s=e,C(t)&&t.call(this,e,n,r),o(e)&&r.$$postDigest(function(){o(s)&&a()})},n)}function f(e,t,n,r){var i;return i=e.$watch(function(e){return i(),r(e)},t,n)}function g(e,t){if(!t)return e;var n=e.$$watchDelegate,r=!1,i=n!==p&&n!==h,o=i?function(n,i,o,a){var s=r&&a?a[0]:e(n,i,o,a);return t(s,n,i)}:function(n,r,i,o){var a=e(n,r,i,o),s=t(a,n,r);return $(a)?s:a};return e.$$watchDelegate&&e.$$watchDelegate!==c?o.$$watchDelegate=e.$$watchDelegate:t.$stateful||(o.$$watchDelegate=c,r=!e.inputs,o.inputs=e.inputs?e.inputs:[e]),o}var m=Jr().noUnsafeEval,v={csp:m,expensiveChecks:!1,literals:_(o),isIdentifierStart:C(e)&&e,isIdentifierContinue:C(t)&&t},y={csp:m,expensiveChecks:!0,literals:_(o),isIdentifierStart:C(e)&&e,isIdentifierContinue:C(t)&&t},b=!1;return s.$$runningExpensiveChecks=function(){return b},s}]}function $n(){this.$get=["$rootScope","$exceptionHandler",function(e,t){return bn(function(t){e.$evalAsync(t)},t)}]}function yn(){this.$get=["$browser","$exceptionHandler",function(e,t){return bn(function(t){e.defer(t)},t)}]}function bn(e,n){function i(){this.$$state={status:0}}function o(e,t){return function(n){t.call(e,n)}}function a(e){var t,r,i;i=e.pending,e.processScheduled=!1,e.pending=void 0;for(var o=0,a=i.length;a>o;++o){r=i[o][0],t=i[o][e.status];try{C(t)?r.resolve(t(e.value)):1===e.status?r.resolve(e.value):r.reject(e.value)}catch(s){r.reject(s),n(s)}}}function s(t){!t.processScheduled&&t.pending&&(t.processScheduled=!0,e(function(){a(t)}))}function l(){this.promise=new i}function c(e){var t=new l,n=0,i=Gr(e)?[]:{};return r(e,function(e,r){n++,m(e).then(function(e){i.hasOwnProperty(r)||(i[r]=e,--n||t.resolve(i))},function(e){i.hasOwnProperty(r)||t.reject(e)})}),0===n&&t.resolve(i),t.promise}var h=t("$q",TypeError),p=function(){var e=new l;return e.resolve=o(e,e.resolve),e.reject=o(e,e.reject),e.notify=o(e,e.notify),e};u(i.prototype,{then:function(e,t,n){if(v(e)&&v(t)&&v(n))return this;var r=new l;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),this.$$state.status>0&&s(this.$$state),r.promise},"catch":function(e){return this.then(null,e)},"finally":function(e,t){return this.then(function(t){return g(t,!0,e)},function(t){return g(t,!1,e)},t)}}),u(l.prototype,{resolve:function(e){this.promise.$$state.status||(e===this.promise?this.$$reject(h("qcycle","Expected promise to be resolved with value other than itself '{0}'",e)):this.$$resolve(e))},$$resolve:function(e){function t(e){l||(l=!0,a.$$resolve(e))}function r(e){l||(l=!0,a.$$reject(e))}var i,a=this,l=!1;try{(y(e)||C(e))&&(i=e&&e.then),C(i)?(this.promise.$$state.status=-1,i.call(e,t,r,o(this,this.notify))):(this.promise.$$state.value=e,this.promise.$$state.status=1,s(this.promise.$$state))}catch(u){r(u),n(u)}},reject:function(e){this.promise.$$state.status||this.$$reject(e)},$$reject:function(e){this.promise.$$state.value=e,this.promise.$$state.status=2,s(this.promise.$$state)},notify:function(t){var r=this.promise.$$state.pending;this.promise.$$state.status<=0&&r&&r.length&&e(function(){for(var e,i,o=0,a=r.length;a>o;o++){i=r[o][0],e=r[o][3];try{i.notify(C(e)?e(t):t)}catch(s){n(s)}}})}});var d=function(e){var t=new l;return t.reject(e),t.promise},f=function(e,t){var n=new l;return t?n.resolve(e):n.reject(e),n.promise},g=function(e,t,n){var r=null;try{C(n)&&(r=n())}catch(i){return f(i,!1)}return N(r)?r.then(function(){return f(e,t)},function(e){return f(e,!1)}):f(e,t)},m=function(e,t,n,r){var i=new l;return i.resolve(e),i.promise.then(t,n,r)},$=m,b=function(e){function t(e){r.resolve(e)}function n(e){r.reject(e)}if(!C(e))throw h("norslvr","Expected resolverFn, got '{0}'",e);var r=new l;return e(t,n),r.promise};return b.prototype=i.prototype,b.defer=p,b.reject=d,b.when=m,b.resolve=$,b.all=c,b}function wn(){this.$get=["$window","$timeout",function(e,t){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame,r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(e){var t=n(e);return function(){r(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};return o.supported=i,o}]}function xn(){function e(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=a(),this.$$ChildScope=null}return t.prototype=e,t}var i=10,o=t("$rootScope"),s=null,l=null;this.digestTtl=function(e){return arguments.length&&(i=e),i},this.$get=["$exceptionHandler","$parse","$browser",function(t,u,c){function h(e){e.currentScope.$$destroyed=!0}function p(e){9===Or&&(e.$$childHead&&p(e.$$childHead),e.$$nextSibling&&p(e.$$nextSibling)),e.$parent=e.$$nextSibling=e.$$prevSibling=e.$$childHead=e.$$childTail=e.$root=e.$$watchers=null}function f(){this.$id=a(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function g(e){if(S.$$phase)throw o("inprog","{0} already in progress",S.$$phase);S.$$phase=e}function m(){S.$$phase=null}function $(e,t){do e.$$watchersCount+=t;while(e=e.$parent)}function b(e,t,n){do e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n];while(e=e.$parent)}function w(){}function x(){for(;T.length;)try{T.shift()()}catch(e){t(e)}l=null}function E(){null===l&&(l=c.defer(function(){S.$apply(x)}))}f.prototype={constructor:f,$new:function(t,n){var r;return n=n||this,t?(r=new f,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=e(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(t||n!=this)&&r.$on("$destroy",h),r},$watch:function(e,t,n,r){var i=u(e);if(i.$$watchDelegate)return i.$$watchDelegate(this,t,n,i,e);var o=this,a=o.$$watchers,l={fn:t,last:w,get:i,exp:r||e,eq:!!n};return s=null,C(t)||(l.fn=d),a||(a=o.$$watchers=[]),a.unshift(l),$(this,1),function(){P(a,l)>=0&&$(o,-1),s=null}},$watchGroup:function(e,t){function n(){l=!1,u?(u=!1,t(o,o,s)):t(o,i,s)}var i=new Array(e.length),o=new Array(e.length),a=[],s=this,l=!1,u=!0;if(!e.length){var c=!0;return s.$evalAsync(function(){c&&t(o,o,s)}),function(){c=!1}}return 1===e.length?this.$watch(e[0],function(e,n,r){o[0]=e,i[0]=n,t(o,e===n?o:i,r)}):(r(e,function(e,t){var r=s.$watch(e,function(e,r){o[t]=e,i[t]=r,l||(l=!0,s.$evalAsync(n))});a.push(r)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(e,t){function r(e){o=e;var t,r,i,s,l;if(!v(o)){if(y(o))if(n(o)){a!==d&&(a=d,m=a.length=0,h++),t=o.length,m!==t&&(h++,a.length=m=t);for(var u=0;t>u;u++)l=a[u],s=o[u],i=l!==l&&s!==s,i||l===s||(h++,a[u]=s)}else{a!==f&&(a=f={},m=0,h++),t=0;for(r in o)Mr.call(o,r)&&(t++,s=o[r],l=a[r],r in a?(i=l!==l&&s!==s,i||l===s||(h++,a[r]=s)):(m++,a[r]=s,h++));if(m>t){h++;for(r in a)Mr.call(o,r)||(m--,delete a[r])}}else a!==o&&(a=o,h++);return h}}function i(){if(g?(g=!1,t(o,o,l)):t(o,s,l),c)if(y(o))if(n(o)){s=new Array(o.length);for(var e=0;e<o.length;e++)s[e]=o[e]}else{s={};for(var r in o)Mr.call(o,r)&&(s[r]=o[r])}else s=o}r.$stateful=!0;var o,a,s,l=this,c=t.length>1,h=0,p=u(e,r),d=[],f={},g=!0,m=0;return this.$watch(p,i)},$digest:function(){var e,n,r,a,u,h,p,d,f,v,$,y,b=i,E=this,T=[];g("$digest"),c.$$checkUrlChange(),this===S&&null!==l&&(c.defer.cancel(l),x()),s=null;do{for(d=!1,v=E;L.length;){try{y=L.shift(),y.scope.$eval(y.expression,y.locals)}catch(M){t(M)}s=null}e:do{if(h=v.$$watchers)for(p=h.length;p--;)try{if(e=h[p])if(u=e.get,(n=u(v))===(r=e.last)||(e.eq?B(n,r):"number"==typeof n&&"number"==typeof r&&isNaN(n)&&isNaN(r))){if(e===s){d=!1;break e}}else d=!0,s=e,e.last=e.eq?_(n,null):n,a=e.fn,a(n,r===w?n:r,v),5>b&&($=4-b,T[$]||(T[$]=[]),T[$].push({msg:C(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:n,oldVal:r}))}catch(M){t(M)}if(!(f=v.$$watchersCount&&v.$$childHead||v!==E&&v.$$nextSibling))for(;v!==E&&!(f=v.$$nextSibling);)v=v.$parent}while(v=f);if((d||L.length)&&!b--)throw m(),o("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",i,T)}while(d||L.length);for(m();A.length;)try{A.shift()()}catch(M){t(M)}},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===S&&c.$$applicationDestroyed(),$(this,-this.$$watchersCount);for(var t in this.$$listenerCount)b(this,this.$$listenerCount[t],t);e&&e.$$childHead==this&&(e.$$childHead=this.$$nextSibling),e&&e.$$childTail==this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=d,this.$on=this.$watch=this.$watchGroup=function(){return d},this.$$listeners={},this.$$nextSibling=null,p(this)}},$eval:function(e,t){return u(e)(this,t)},$evalAsync:function(e,t){S.$$phase||L.length||c.defer(function(){L.length&&S.$digest()}),L.push({scope:this,expression:u(e),locals:t})},$$postDigest:function(e){A.push(e)},$apply:function(e){try{g("$apply");try{return this.$eval(e)}finally{m()}}catch(n){t(n)}finally{try{S.$digest()}catch(n){throw t(n),n}}},$applyAsync:function(e){function t(){n.$eval(e)}var n=this;e&&T.push(t),e=u(e),E()},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(t);-1!==r&&(n[r]=null,b(i,1,e))}},$emit:function(e,n){var r,i,o,a=[],s=this,l=!1,u={name:e,targetScope:s,stopPropagation:function(){l=!0},preventDefault:function(){u.defaultPrevented=!0},defaultPrevented:!1},c=U([u],arguments,1);do{for(r=s.$$listeners[e]||a,u.currentScope=s,i=0,o=r.length;o>i;i++)if(r[i])try{r[i].apply(null,c)}catch(h){t(h)}else r.splice(i,1),i--,o--;if(l)return u.currentScope=null,u;s=s.$parent}while(s);return u.currentScope=null,u},$broadcast:function(e,n){var r=this,i=r,o=r,a={name:e,targetScope:r,preventDefault:function(){a.defaultPrevented=!0},defaultPrevented:!1};if(!r.$$listenerCount[e])return a;for(var s,l,u,c=U([a],arguments,1);i=o;){for(a.currentScope=i,s=i.$$listeners[e]||[],l=0,u=s.length;u>l;l++)if(s[l])try{s[l].apply(null,c)}catch(h){t(h)}else s.splice(l,1),l--,u--;if(!(o=i.$$listenerCount[e]&&i.$$childHead||i!==r&&i.$$nextSibling))for(;i!==r&&!(o=i.$$nextSibling);)i=i.$parent}return a.currentScope=null,a}};var S=new f,L=S.$$asyncQueue=[],A=S.$$postDigestQueue=[],T=S.$$applyAsyncQueue=[];return S}]}function En(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return $(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return $(e)?(t=e,this):t},this.$get=function(){return function(n,r){var i,o=r?t:e;return i=Nn(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function Cn(e){if("self"===e)return e;if(w(e)){if(e.indexOf("***")>-1)throw $o("iwcard","Illegal sequence *** in string matcher.  String: {0}",e);return e=Xr(e).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+e+"$")}if(S(e))return new RegExp("^"+e.source+"$");throw $o("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function Sn(e){var t=[];return $(e)&&r(e,function(e){t.push(Cn(e))}),t}function Ln(){this.SCE_CONTEXTS=yo;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=Sn(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=Sn(e)),t},this.$get=["$injector",function(n){function r(e,t){return"self"===e?Dn(t):!!e.exec(t.href)}function i(n){var i,o,a=Nn(n.toString()),s=!1;for(i=0,o=e.length;o>i;i++)if(r(e[i],a)){s=!0;break}if(s)for(i=0,o=t.length;o>i;i++)if(r(t[i],a)){s=!1;break}return s}function o(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}function a(e,t){var n=h.hasOwnProperty(e)?h[e]:null;if(!n)throw $o("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",e,t);if(null===t||v(t)||""===t)return t;if("string"!=typeof t)throw $o("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",e);return new n(t)}function s(e){return e instanceof c?e.$$unwrapTrustedValue():e}function l(e,t){if(null===t||v(t)||""===t)return t;var n=h.hasOwnProperty(e)?h[e]:null;if(n&&t instanceof n)return t.$$unwrapTrustedValue();if(e===yo.RESOURCE_URL){if(i(t))return t;throw $o("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",t.toString())}if(e===yo.HTML)return u(t);throw $o("unsafe","Attempting to use an unsafe value in a safe context.")}var u=function(e){throw $o("unsafe","Attempting to use an unsafe value in a safe context.")};n.has("$sanitize")&&(u=n.get("$sanitize"));var c=o(),h={};return h[yo.HTML]=o(c),h[yo.CSS]=o(c),h[yo.URL]=o(c),h[yo.JS]=o(c),h[yo.RESOURCE_URL]=o(h[yo.URL]),{trustAs:a,getTrusted:l,valueOf:s}}]}function An(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,n){if(e&&8>Or)throw $o("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var i=V(yo);i.isEnabled=function(){return e},i.trustAs=n.trustAs,i.getTrusted=n.getTrusted,i.valueOf=n.valueOf,e||(i.trustAs=i.getTrusted=function(e,t){return t},i.valueOf=f),i.parseAs=function(e,n){var r=t(n);return r.literal&&r.constant?r:t(n,function(t){return i.getTrusted(e,t)})};var o=i.parseAs,a=i.getTrusted,s=i.trustAs;return r(yo,function(e,t){var n=kr(t);i[we("parse_as_"+n)]=function(t){return o(e,t)},i[we("get_trusted_"+n)]=function(t){return a(e,t)},i[we("trust_as_"+n)]=function(t){return s(e,t)}}),i}]}function Tn(){this.$get=["$window","$document",function(e,t){var n,r,i={},o=e.chrome&&e.chrome.app&&e.chrome.app.runtime,a=!o&&e.history&&e.history.pushState,s=h((/android (\d+)/.exec(kr((e.navigator||{}).userAgent))||[])[1]),l=/Boxee/i.test((e.navigator||{}).userAgent),u=t[0]||{},c=/^(Moz|webkit|ms)(?=[A-Z])/,p=u.body&&u.body.style,d=!1,f=!1;if(p){for(var g in p)if(r=c.exec(g)){n=r[0],n=n.substr(0,1).toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in p&&"webkit"),d=!!("transition"in p||n+"Transition"in p),f=!!("animation"in p||n+"Animation"in p),!s||d&&f||(d=w(p.webkitTransition),f=w(p.webkitAnimation))}return{history:!(!a||4>s||l),hasEvent:function(e){if("input"===e&&11>=Or)return!1;if(v(i[e])){var t=u.createElement("div");i[e]="on"+e in t}return i[e]},csp:Jr(),vendorPrefix:n,transitions:d,animations:f,android:s}}]}function Mn(){var e;this.httpOptions=function(t){return t?(e=t,this):e},this.$get=["$templateCache","$http","$q","$sce",function(t,n,r,i){function o(a,s){function l(e){if(!s)throw bo("tpload","Failed to load template: {0} (HTTP status: {1} {2})",a,e.status,e.statusText);return r.reject(e)}o.totalPendingRequests++,w(a)&&t.get(a)||(a=i.getTrustedResourceUrl(a));var c=n.defaults&&n.defaults.transformResponse;return Gr(c)?c=c.filter(function(e){return e!==St}):c===St&&(c=null),n.get(a,u({cache:t,transformResponse:c},e))["finally"](function(){o.totalPendingRequests--}).then(function(e){return t.put(a,e.data),e.data},l)}return o.totalPendingRequests=0,o}]}function kn(){this.$get=["$rootScope","$browser","$location",function(e,t,n){var i={};return i.findBindings=function(e,t,n){var i=e.getElementsByClassName("ng-binding"),o=[];return r(i,function(e){var i=Wr.element(e).data("$binding");i&&r(i,function(r){if(n){var i=new RegExp("(^|\\s)"+Xr(t)+"(\\s|\\||$)");i.test(r)&&o.push(e)}else-1!=r.indexOf(t)&&o.push(e)})}),o},i.findModels=function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",a="["+r[i]+"model"+o+'"'+t+'"]',s=e.querySelectorAll(a);if(s.length)return s}},i.getLocation=function(){return n.url()},i.setLocation=function(t){t!==n.url()&&(n.url(t),e.$digest())},i.whenStable=function(e){t.notifyWhenNoOutstandingRequests(e)},i}]}function In(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,i){function o(o,s,l){C(o)||(l=s,s=o,o=d);var u,c=H(arguments,3),h=$(l)&&!l,p=(h?r:n).defer(),f=p.promise;return u=t.defer(function(){try{p.resolve(o.apply(null,c))}catch(t){p.reject(t),i(t)}finally{delete a[f.$$timeoutId]}h||e.$apply()},s),f.$$timeoutId=u,a[u]=p,f}var a={};return o.cancel=function(e){return e&&e.$$timeoutId in a?(a[e.$$timeoutId].reject("canceled"),delete a[e.$$timeoutId],t.defer.cancel(e.$$timeoutId)):!1},o}]}function Nn(e){var t=e;return Or&&(wo.setAttribute("href",t),t=wo.href),wo.setAttribute("href",t),{href:wo.href,protocol:wo.protocol?wo.protocol.replace(/:$/,""):"",host:wo.host,search:wo.search?wo.search.replace(/^\?/,""):"",hash:wo.hash?wo.hash.replace(/^#/,""):"",hostname:wo.hostname,port:wo.port,pathname:"/"===wo.pathname.charAt(0)?wo.pathname:"/"+wo.pathname}}function Dn(e){var t=w(e)?Nn(e):e;return t.protocol===xo.protocol&&t.host===xo.host}function On(){this.$get=g(e)}function Rn(e){function t(e){try{return decodeURIComponent(e)}catch(t){return e}}var n=e[0]||{},r={},i="";return function(){var e,o,a,s,l,u=n.cookie||"";if(u!==i)for(i=u,e=i.split("; "),r={},a=0;a<e.length;a++)o=e[a],s=o.indexOf("="),s>0&&(l=t(o.substring(0,s)),v(r[l])&&(r[l]=t(o.substring(s+1))));return r}}function jn(){this.$get=Rn}function Fn(e){function t(i,o){if(y(i)){var a={};return r(i,function(e,n){a[n]=t(n,e)}),a}return e.factory(i+n,o)}var n="Filter";this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+n)}}],t("currency",Un),t("date",rr),t("filter",Pn),t("json",ir),t("limitTo",or),t("lowercase",Mo),t("number",Hn),t("orderBy",ar),t("uppercase",ko)}function Pn(){return function(e,r,i){if(!n(e)){if(null==e)return e;throw t("filter")("notarray","Expected array but received: {0}",e)}var o,a,s=Bn(r);switch(s){case"function":o=r;break;case"boolean":case"null":case"number":case"string":a=!0;case"object":o=_n(r,i,a);break;default:return e}return Array.prototype.filter.call(e,o)}}function _n(e,t,n){var r,i=y(e)&&"$"in e;return t===!0?t=B:C(t)||(t=function(e,t){return v(e)?!1:null===e||null===t?e===t:y(t)||y(e)&&!m(e)?!1:(e=kr(""+e),t=kr(""+t),-1!==e.indexOf(t))}),r=function(r){return i&&!y(r)?Vn(r,e.$,t,!1):Vn(r,e,t,n)}}function Vn(e,t,n,r,i){var o=Bn(e),a=Bn(t);if("string"===a&&"!"===t.charAt(0))return!Vn(e,t.substring(1),n,r);if(Gr(e))return e.some(function(e){return Vn(e,t,n,r)});switch(o){case"object":var s;if(r){for(s in e)if("$"!==s.charAt(0)&&Vn(e[s],t,n,!0))return!0;return i?!1:Vn(e,t,n,!1)}if("object"===a){for(s in t){var l=t[s];if(!C(l)&&!v(l)){var u="$"===s,c=u?e:e[s];if(!Vn(c,l,n,u,u))return!1}}return!0}return n(e,t);case"function":return!1;default:return n(e,t)}}function Bn(e){return null===e?"null":typeof e}function Un(e){var t=e.NUMBER_FORMATS;return function(e,n,r){return v(n)&&(n=t.CURRENCY_SYM),v(r)&&(r=t.PATTERNS[1].maxFrac),null==e?e:Gn(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function Hn(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:Gn(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function Wn(e){var t,n,r,i,o,a=0;for((n=e.indexOf(Co))>-1&&(e=e.replace(Co,"")),(r=e.search(/e/i))>0?(0>n&&(n=r),n+=+e.slice(r+1),e=e.substring(0,r)):0>n&&(n=e.length),r=0;e.charAt(r)==So;r++);if(r==(o=e.length))t=[0],n=1;else{for(o--;e.charAt(o)==So;)o--;for(n-=r,t=[],i=0;o>=r;r++,i++)t[i]=+e.charAt(r)}return n>Eo&&(t=t.splice(0,Eo-1),a=n-1,n=1),{d:t,e:a,i:n}}function qn(e,t,n,r){var i=e.d,o=i.length-e.i;t=v(t)?Math.min(Math.max(n,o),r):+t;var a=t+e.i,s=i[a];if(a>0){i.splice(Math.max(e.i,a));for(var l=a;l<i.length;l++)i[l]=0}else{o=Math.max(0,o),e.i=1,i.length=Math.max(1,a=t+1),i[0]=0;for(var u=1;a>u;u++)i[u]=0}if(s>=5)if(0>a-1){for(var c=0;c>a;c--)i.unshift(0),e.i++;i.unshift(1),e.i++}else i[a-1]++;for(;o<Math.max(0,t);o++)i.push(0);var h=i.reduceRight(function(e,t,n,r){return t+=e,r[n]=t%10,Math.floor(t/10)},0);h&&(i.unshift(h),e.i++)}function Gn(e,t,n,r,i){if(!w(e)&&!x(e)||isNaN(e))return"";var o,a=!isFinite(e),s=!1,l=Math.abs(e)+"",u="";if(a)u="∞";else{o=Wn(l),qn(o,i,t.minFrac,t.maxFrac);var c=o.d,h=o.i,p=o.e,d=[];for(s=c.reduce(function(e,t){return e&&!t},!0);0>h;)c.unshift(0),h++;h>0?d=c.splice(h):(d=c,c=[0]);var f=[];for(c.length>=t.lgSize&&f.unshift(c.splice(-t.lgSize).join(""));c.length>t.gSize;)f.unshift(c.splice(-t.gSize).join(""));c.length&&f.unshift(c.join("")),u=f.join(n),d.length&&(u+=r+d.join("")),p&&(u+="e+"+p)}return 0>e&&!s?t.negPre+u+t.negSuf:t.posPre+u+t.posSuf}function zn(e,t,n,r){var i="";for((0>e||r&&0>=e)&&(r?e=-e+1:(e=-e,i="-")),e=""+e;e.length<t;)e=So+e;return n&&(e=e.substr(e.length-t)),i+e}function Kn(e,t,n,r,i){return n=n||0,function(o){var a=o["get"+e]();return(n>0||a>-n)&&(a+=n),0===a&&-12==n&&(a=12),zn(a,t,r,i)}}function Xn(e,t,n){return function(r,i){var o=r["get"+e](),a=(n?"STANDALONE":"")+(t?"SHORT":""),s=Ir(a+e);return i[s][o]}}function Jn(e,t,n){var r=-1*n,i=r>=0?"+":"";return i+=zn(Math[r>0?"floor":"ceil"](r/60),2)+zn(Math.abs(r%60),2)}function Yn(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(4>=t?5:12)-t)}function Qn(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate()+(4-e.getDay()))}function Zn(e){return function(t){var n=Yn(t.getFullYear()),r=Qn(t),i=+r-+n,o=1+Math.round(i/6048e5);return zn(o,e)}}function er(e,t){return e.getHours()<12?t.AMPMS[0]:t.AMPMS[1]}function tr(e,t){return e.getFullYear()<=0?t.ERAS[0]:t.ERAS[1]}function nr(e,t){return e.getFullYear()<=0?t.ERANAMES[0]:t.ERANAMES[1]}function rr(e){function t(e){var t;if(t=e.match(n)){var r=new Date(0),i=0,o=0,a=t[8]?r.setUTCFullYear:r.setFullYear,s=t[8]?r.setUTCHours:r.setHours;t[9]&&(i=h(t[9]+t[10]),o=h(t[9]+t[11])),a.call(r,h(t[1]),h(t[2])-1,h(t[3]));var l=h(t[4]||0)-i,u=h(t[5]||0)-o,c=h(t[6]||0),p=Math.round(1e3*parseFloat("0."+(t[7]||0)));return s.call(r,l,u,c,p),r}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,i,o){var a,s,l="",u=[];if(i=i||"mediumDate",i=e.DATETIME_FORMATS[i]||i,w(n)&&(n=To.test(n)?h(n):t(n)),x(n)&&(n=new Date(n)),!E(n)||!isFinite(n.getTime()))return n;for(;i;)s=Ao.exec(i),s?(u=U(u,s,1),i=u.pop()):(u.push(i),i=null);var c=n.getTimezoneOffset();return o&&(c=K(o,c),n=J(n,o,!0)),r(u,function(t){a=Lo[t],l+=a?a(n,e.DATETIME_FORMATS,c):"''"===t?"'":t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),l}}function ir(){return function(e,t){return v(t)&&(t=2),G(e,t)}}function or(){return function(e,t,n){return t=Math.abs(Number(t))===1/0?Number(t):h(t),isNaN(t)?e:(x(e)&&(e=e.toString()),Gr(e)||w(e)?(n=!n||isNaN(n)?0:h(n),n=0>n?Math.max(0,e.length+n):n,t>=0?e.slice(n,n+t):0===n?e.slice(t,e.length):e.slice(Math.max(0,n+t),n)):e)}}function ar(e){function r(t,n){return n=n?-1:1,t.map(function(t){var r=1,i=f;if(C(t))i=t;else if(w(t)&&("+"!=t.charAt(0)&&"-"!=t.charAt(0)||(r="-"==t.charAt(0)?-1:1,t=t.substring(1)),""!==t&&(i=e(t),i.constant))){var o=i();i=function(e){return e[o]}}return{get:i,descending:r*n}})}function i(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}function o(e,t){return"function"==typeof e.valueOf&&(e=e.valueOf(),i(e))?e:m(e)&&(e=e.toString(),i(e))?e:t}function a(e,t){var n=typeof e;return null===e?(n="string",e="null"):"string"===n?e=e.toLowerCase():"object"===n&&(e=o(e,t)),{value:e,type:n}}function s(e,t){var n=0;return e.type===t.type?e.value!==t.value&&(n=e.value<t.value?-1:1):n=e.type<t.type?-1:1,n}return function(e,i,o){function l(e,t){return{value:e,predicateValues:c.map(function(n){return a(n.get(e),t)})}}function u(e,t){for(var n=0,r=0,i=c.length;i>r&&!(n=s(e.predicateValues[r],t.predicateValues[r])*c[r].descending);++r);return n}if(null==e)return e;if(!n(e))throw t("orderBy")("notarray","Expected array but received: {0}",e);Gr(i)||(i=[i]),0===i.length&&(i=["+"]);var c=r(i,o);c.push({get:function(){return{}},descending:o?-1:1});var h=Array.prototype.map.call(e,l);return h.sort(u),e=h.map(function(e){return e.value})}}function sr(e){return C(e)&&(e={link:e}),e.restrict=e.restrict||"AC",g(e)}function lr(e,t){e.$name=t}function ur(e,t,n,i,o){var a=this,s=[];a.$error={},a.$$success={},a.$pending=void 0,a.$name=o(t.name||t.ngForm||"")(n),a.$dirty=!1,a.$pristine=!0,a.$valid=!0,a.$invalid=!1,a.$submitted=!1,a.$$parentForm=Do,a.$rollbackViewValue=function(){r(s,function(e){e.$rollbackViewValue()})},a.$commitViewValue=function(){r(s,function(e){e.$commitViewValue()})},a.$addControl=function(e){pe(e.$name,"input"),s.push(e),e.$name&&(a[e.$name]=e),e.$$parentForm=a},a.$$renameControl=function(e,t){var n=e.$name;a[n]===e&&delete a[n],a[t]=e,e.$name=t},a.$removeControl=function(e){e.$name&&a[e.$name]===e&&delete a[e.$name],r(a.$pending,function(t,n){a.$setValidity(n,null,e)}),r(a.$error,function(t,n){a.$setValidity(n,null,e)}),r(a.$$success,function(t,n){a.$setValidity(n,null,e)}),P(s,e),e.$$parentForm=Do},Cr({ctrl:this,$element:e,set:function(e,t,n){var r=e[t];if(r){var i=r.indexOf(n);-1===i&&r.push(n)}else e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(P(r,n),0===r.length&&delete e[t])},$animate:i}),a.$setDirty=function(){i.removeClass(e,va),i.addClass(e,$a),a.$dirty=!0,a.$pristine=!1,a.$$parentForm.$setDirty()},a.$setPristine=function(){i.setClass(e,va,$a+" "+Oo),a.$dirty=!1,a.$pristine=!0,a.$submitted=!1,r(s,function(e){e.$setPristine()})},a.$setUntouched=function(){r(s,function(e){e.$setUntouched()})},a.$setSubmitted=function(){i.addClass(e,Oo),a.$submitted=!0,a.$$parentForm.$setSubmitted()}}function cr(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function hr(e,t,n,r,i,o){pr(e,t,n,r,i,o),cr(r)}function pr(e,t,n,r,i,o){var a=kr(t[0].type);if(!i.android){var s=!1;t.on("compositionstart",function(){s=!0}),t.on("compositionend",function(){s=!1,u()})}var l,u=function(e){if(l&&(o.defer.cancel(l),l=null),!s){var i=t.val(),u=e&&e.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=Kr(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,u)}};if(i.hasEvent("input"))t.on("input",u);else{var c=function(e,t,n){l||(l=o.defer(function(){l=null,t&&t.value===n||u(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||t>15&&19>t||t>=37&&40>=t||c(e,this,this.value)}),i.hasEvent("paste")&&t.on("paste cut",c)}t.on("change",u),Ko[a]&&r.$$hasNativeValidators&&a===n.type&&t.on(zo,function(e){if(!l){var t=this[Tr],n=t.badInput,r=t.typeMismatch;l=o.defer(function(){l=null,t.badInput===n&&t.typeMismatch===r||u(e)})}}),r.$render=function(){var e=r.$isEmpty(r.$viewValue)?"":r.$viewValue;t.val()!==e&&t.val(e)}}function dr(e,t){if(E(e))return e;if(w(e)){Wo.lastIndex=0;var n=Wo.exec(e);if(n){var r=+n[1],i=+n[2],o=0,a=0,s=0,l=0,u=Yn(r),c=7*(i-1);return t&&(o=t.getHours(),a=t.getMinutes(),s=t.getSeconds(),l=t.getMilliseconds()),new Date(r,0,u.getDate()+c,o,a,s,l)}}return NaN}function fr(e,t){return function(n,i){var o,a;if(E(n))return n;if(w(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),Po.test(n))return new Date(n);if(e.lastIndex=0,o=e.exec(n))return o.shift(),a=i?{yyyy:i.getFullYear(),MM:i.getMonth()+1,dd:i.getDate(),HH:i.getHours(),mm:i.getMinutes(),ss:i.getSeconds(),sss:i.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},r(o,function(e,n){n<t.length&&(a[t[n]]=+e)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function gr(e,t,n,r){return function(i,o,a,s,l,u,c){function h(e){return e&&!(e.getTime&&e.getTime()!==e.getTime())}function p(e){return $(e)&&!E(e)?n(e)||void 0:e}mr(i,o,a,s),pr(i,o,a,s,l,u);var d,f=s&&s.$options&&s.$options.timezone;if(s.$$parserName=e,s.$parsers.push(function(e){if(s.$isEmpty(e))return null;if(t.test(e)){var r=n(e,d);return f&&(r=J(r,f)),r}}),s.$formatters.push(function(e){if(e&&!E(e))throw Ca("datefmt","Expected `{0}` to be a date",e);return h(e)?(d=e,d&&f&&(d=J(d,f,!0)),c("date")(e,r,f)):(d=null,"")}),$(a.min)||a.ngMin){var g;s.$validators.min=function(e){return!h(e)||v(g)||n(e)>=g},a.$observe("min",function(e){g=p(e),s.$validate()})}if($(a.max)||a.ngMax){var m;s.$validators.max=function(e){return!h(e)||v(m)||n(e)<=m},a.$observe("max",function(e){m=p(e),s.$validate()})}}}function mr(e,t,n,r){var i=t[0],o=r.$$hasNativeValidators=y(i.validity);o&&r.$parsers.push(function(e){var n=t.prop(Tr)||{};return n.badInput||n.typeMismatch?void 0:e})}function vr(e,t,n,r,i,o){if(mr(e,t,n,r),pr(e,t,n,r,i,o),r.$$parserName="number",r.$parsers.push(function(e){return r.$isEmpty(e)?null:Bo.test(e)?parseFloat(e):void 0}),r.$formatters.push(function(e){if(!r.$isEmpty(e)){if(!x(e))throw Ca("numfmt","Expected `{0}` to be a number",e);e=e.toString()}return e}),$(n.min)||n.ngMin){var a;r.$validators.min=function(e){return r.$isEmpty(e)||v(a)||e>=a;
},n.$observe("min",function(e){$(e)&&!x(e)&&(e=parseFloat(e,10)),a=x(e)&&!isNaN(e)?e:void 0,r.$validate()})}if($(n.max)||n.ngMax){var s;r.$validators.max=function(e){return r.$isEmpty(e)||v(s)||s>=e},n.$observe("max",function(e){$(e)&&!x(e)&&(e=parseFloat(e,10)),s=x(e)&&!isNaN(e)?e:void 0,r.$validate()})}}function $r(e,t,n,r,i,o){pr(e,t,n,r,i,o),cr(r),r.$$parserName="url",r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||_o.test(n)}}function yr(e,t,n,r,i,o){pr(e,t,n,r,i,o),cr(r),r.$$parserName="email",r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||Vo.test(n)}}function br(e,t,n,r){v(n.name)&&t.attr("name",a());var i=function(e){t[0].checked&&r.$setViewValue(n.value,e&&e.type)};t.on("click",i),r.$render=function(){var e=n.value;t[0].checked=e==r.$viewValue},n.$observe("value",r.$render)}function wr(e,t,n,r,i){var o;if($(r)){if(o=e(r),!o.constant)throw Ca("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(t)}return i}function xr(e,t,n,r,i,o,a,s){var l=wr(s,e,"ngTrueValue",n.ngTrueValue,!0),u=wr(s,e,"ngFalseValue",n.ngFalseValue,!1),c=function(e){r.$setViewValue(t[0].checked,e&&e.type)};t.on("click",c),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return e===!1},r.$formatters.push(function(e){return B(e,l)}),r.$parsers.push(function(e){return e?l:u})}function Er(e,t){return e="ngClass"+e,["$animate",function(n){function i(e,t){var n=[];e:for(var r=0;r<e.length;r++){for(var i=e[r],o=0;o<t.length;o++)if(i==t[o])continue e;n.push(i)}return n}function o(e){var t=[];return Gr(e)?(r(e,function(e){t=t.concat(o(e))}),t):w(e)?e.split(" "):y(e)?(r(e,function(e,n){e&&(t=t.concat(n.split(" ")))}),t):e}return{restrict:"AC",link:function(a,s,l){function u(e){var t=h(e,1);l.$addClass(t)}function c(e){var t=h(e,-1);l.$removeClass(t)}function h(e,t){var n=s.data("$classCounts")||ge(),i=[];return r(e,function(e){(t>0||n[e])&&(n[e]=(n[e]||0)+t,n[e]===+(t>0)&&i.push(e))}),s.data("$classCounts",n),i.join(" ")}function p(e,t){var r=i(t,e),o=i(e,t);r=h(r,1),o=h(o,-1),r&&r.length&&n.addClass(s,r),o&&o.length&&n.removeClass(s,o)}function d(e){if(t===!0||a.$index%2===t){var n=o(e||[]);if(f){if(!B(e,f)){var r=o(f);p(r,n)}}else u(n)}f=Gr(e)?e.map(function(e){return V(e)}):V(e)}var f;a.$watch(l[e],d,!0),l.$observe("class",function(t){d(a.$eval(l[e]))}),"ngClass"!==e&&a.$watch("$index",function(n,r){var i=1&n;if(i!==(1&r)){var s=o(a.$eval(l[e]));i===t?u(s):c(s)}})}}}]}function Cr(e){function t(e,t,s){v(t)?n("$pending",e,s):r("$pending",e,s),I(t)?t?(c(a.$error,e,s),u(a.$$success,e,s)):(u(a.$error,e,s),c(a.$$success,e,s)):(c(a.$error,e,s),c(a.$$success,e,s)),a.$pending?(i(wa,!0),a.$valid=a.$invalid=void 0,o("",null)):(i(wa,!1),a.$valid=Sr(a.$error),a.$invalid=!a.$valid,o("",a.$valid));var l;l=a.$pending&&a.$pending[e]?void 0:a.$error[e]?!1:a.$$success[e]?!0:null,o(e,l),a.$$parentForm.$setValidity(e,l,a)}function n(e,t,n){a[e]||(a[e]={}),u(a[e],t,n)}function r(e,t,n){a[e]&&c(a[e],t,n),Sr(a[e])&&(a[e]=void 0)}function i(e,t){t&&!l[e]?(h.addClass(s,e),l[e]=!0):!t&&l[e]&&(h.removeClass(s,e),l[e]=!1)}function o(e,t){e=e?"-"+le(e,"-"):"",i(ga+e,t===!0),i(ma+e,t===!1)}var a=e.ctrl,s=e.$element,l={},u=e.set,c=e.unset,h=e.$animate;l[ma]=!(l[ga]=s.hasClass(ga)),a.$setValidity=t}function Sr(e){if(e)for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function Lr(e){e[0].hasAttribute("selected")&&(e[0].selected=!0)}var Ar=/^\/(.+)\/([a-z]*)$/,Tr="validity",Mr=Object.prototype.hasOwnProperty,kr=function(e){return w(e)?e.toLowerCase():e},Ir=function(e){return w(e)?e.toUpperCase():e},Nr=function(e){return w(e)?e.replace(/[A-Z]/g,function(e){return String.fromCharCode(32|e.charCodeAt(0))}):e},Dr=function(e){return w(e)?e.replace(/[a-z]/g,function(e){return String.fromCharCode(-33&e.charCodeAt(0))}):e};"i"!=="I".toLowerCase()&&(kr=Nr,Ir=Dr);var Or,Rr,jr,Fr,Pr=[].slice,_r=[].splice,Vr=[].push,Br=Object.prototype.toString,Ur=Object.getPrototypeOf,Hr=t("ng"),Wr=e.angular||(e.angular={}),qr=0;Or=e.document.documentMode,d.$inject=[],f.$inject=[];var Gr=Array.isArray,zr=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,Kr=function(e){return w(e)?e.trim():e},Xr=function(e){return e.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},Jr=function(){function t(){try{return new Function(""),!1}catch(e){return!0}}if(!$(Jr.rules)){var n=e.document.querySelector("[ng-csp]")||e.document.querySelector("[data-ng-csp]");if(n){var r=n.getAttribute("ng-csp")||n.getAttribute("data-ng-csp");Jr.rules={noUnsafeEval:!r||-1!==r.indexOf("no-unsafe-eval"),noInlineStyle:!r||-1!==r.indexOf("no-inline-style")}}else Jr.rules={noUnsafeEval:t(),noInlineStyle:!1}}return Jr.rules},Yr=function(){if($(Yr.name_))return Yr.name_;var t,n,r,i,o=Zr.length;for(n=0;o>n;++n)if(r=Zr[n],t=e.document.querySelector("["+r.replace(":","\\:")+"jq]")){i=t.getAttribute(r+"jq");break}return Yr.name_=i},Qr=/:/g,Zr=["ng-","data-ng-","ng:","x-ng-"],ei=/[A-Z]/g,ti=!1,ni=1,ri=2,ii=3,oi=8,ai=9,si=11,li={full:"1.5.5",major:1,minor:5,dot:5,codeName:"material-conspiration"};Me.expando="ng339";var ui=Me.cache={},ci=1,hi=function(e,t,n){e.addEventListener(t,n,!1)},pi=function(e,t,n){e.removeEventListener(t,n,!1)};Me._data=function(e){return this.cache[e[this.expando]]||{}};var di=/([\:\-\_]+(.))/g,fi=/^moz([A-Z])/,gi={mouseleave:"mouseout",mouseenter:"mouseover"},mi=t("jqLite"),vi=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,$i=/<|&#?\w+;/,yi=/<([\w:-]+)/,bi=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,wi={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};wi.optgroup=wi.option,wi.tbody=wi.tfoot=wi.colgroup=wi.caption=wi.thead,wi.th=wi.td;var xi=e.Node.prototype.contains||function(e){return!!(16&this.compareDocumentPosition(e))},Ei=Me.prototype={ready:function(t){function n(){r||(r=!0,t())}var r=!1;"complete"===e.document.readyState?e.setTimeout(n):(this.on("DOMContentLoaded",n),Me(e).on("load",n))},toString:function(){var e=[];return r(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return Rr(e>=0?this[e]:this[this.length+e])},length:0,push:Vr,sort:[].sort,splice:[].splice},Ci={};r("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(e){Ci[kr(e)]=e});var Si={};r("input,select,option,textarea,button,form,details".split(","),function(e){Si[e]=!0});var Li={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};r({data:Re,removeData:De,hasData:Ce,cleanData:Se},function(e,t){Me[t]=e}),r({data:Re,inheritedData:Be,scope:function(e){return Rr.data(e,"$scope")||Be(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return Rr.data(e,"$isolateScope")||Rr.data(e,"$isolateScopeNoTemplate")},controller:Ve,injector:function(e){return Be(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:je,css:function(e,t,n){return t=we(t),$(n)?void(e.style[t]=n):e.style[t]},attr:function(e,t,n){var r=e.nodeType;if(r!==ii&&r!==ri&&r!==oi){var i=kr(t);if(Ci[i]){if(!$(n))return e[t]||(e.attributes.getNamedItem(t)||d).specified?i:void 0;n?(e[t]=!0,e.setAttribute(t,i)):(e[t]=!1,e.removeAttribute(i))}else if($(n))e.setAttribute(t,n);else if(e.getAttribute){var o=e.getAttribute(t,2);return null===o?void 0:o}}},prop:function(e,t,n){return $(n)?void(e[t]=n):e[t]},text:function(){function e(e,t){if(v(t)){var n=e.nodeType;return n===ni||n===ii?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(v(t)){if(e.multiple&&"select"===F(e)){var n=[];return r(e.options,function(e){e.selected&&n.push(e.value||e.text)}),0===n.length?null:n}return e.value}e.value=t},html:function(e,t){return v(t)?e.innerHTML:(Ie(e,!0),void(e.innerHTML=t))},empty:Ue},function(e,t){Me.prototype[t]=function(t,n){var r,i,o=this.length;if(e!==Ue&&v(2==e.length&&e!==je&&e!==Ve?t:n)){if(y(t)){for(r=0;o>r;r++)if(e===Re)e(this[r],t);else for(i in t)e(this[r],i,t[i]);return this}for(var a=e.$dv,s=v(a)?Math.min(o,1):o,l=0;s>l;l++){var u=e(this[l],t,n);a=a?a+u:u}return a}for(r=0;o>r;r++)e(this[r],t,n);return this}}),r({removeData:De,on:function(e,t,n,r){if($(r))throw mi("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(Ee(e)){var i=Oe(e,!0),o=i.events,a=i.handle;a||(a=i.handle=ze(e,o));for(var s=t.indexOf(" ")>=0?t.split(" "):[t],l=s.length,u=function(t,r,i){var s=o[t];s||(s=o[t]=[],s.specialHandlerWrapper=r,"$destroy"===t||i||hi(e,t,a)),s.push(n)};l--;)t=s[l],gi[t]?(u(gi[t],Xe),u(t,void 0,!0)):u(t)}},off:Ne,one:function(e,t,n){e=Rr(e),e.on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,i=e.parentNode;Ie(e),r(new Me(t),function(t){n?i.insertBefore(t,n.nextSibling):i.replaceChild(t,e),n=t})},children:function(e){var t=[];return r(e.childNodes,function(e){e.nodeType===ni&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(n===ni||n===si){t=new Me(t);for(var r=0,i=t.length;i>r;r++){var o=t[r];e.appendChild(o)}}},prepend:function(e,t){if(e.nodeType===ni){var n=e.firstChild;r(new Me(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){Te(e,Rr(t).eq(0).clone()[0])},remove:He,detach:function(e){He(e,!0)},after:function(e,t){var n=e,r=e.parentNode;t=new Me(t);for(var i=0,o=t.length;o>i;i++){var a=t[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:Pe,removeClass:Fe,toggleClass:function(e,t,n){t&&r(t.split(" "),function(t){var r=n;v(r)&&(r=!je(e,t)),(r?Pe:Fe)(e,t)})},parent:function(e){var t=e.parentNode;return t&&t.nodeType!==si?t:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:ke,triggerHandler:function(e,t,n){var i,o,a,s=t.type||t,l=Oe(e),c=l&&l.events,h=c&&c[s];h&&(i={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:d,type:s,target:e},t.type&&(i=u(i,t)),o=V(h),a=n?[i].concat(n):[i],r(o,function(t){i.isImmediatePropagationStopped()||t.apply(e,a)}))}},function(e,t){Me.prototype[t]=function(t,n,r){for(var i,o=0,a=this.length;a>o;o++)v(i)?(i=e(this[o],t,n,r),$(i)&&(i=Rr(i))):_e(i,e(this[o],t,n,r));return $(i)?i:this},Me.prototype.bind=Me.prototype.on,Me.prototype.unbind=Me.prototype.off}),Qe.prototype={put:function(e,t){this[Ye(e,this.nextUid)]=t},get:function(e){return this[Ye(e,this.nextUid)]},remove:function(e){var t=this[e=Ye(e,this.nextUid)];return delete this[e],t}};var Ai=[function(){this.$get=[function(){return Qe}]}],Ti=/^([^\(]+?)=>/,Mi=/^[^\(]*\(\s*([^\)]*)\)/m,ki=/,/,Ii=/^\s*(_?)(\S+?)\1\s*$/,Ni=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Di=t("$injector");nt.$$annotate=tt;var Oi=t("$animate"),Ri=1,ji="ng-animate",Fi=function(){this.$get=d},Pi=function(){var e=new Qe,t=[];this.$get=["$$AnimateRunner","$rootScope",function(n,i){function o(e,t,n){var i=!1;return t&&(t=w(t)?t.split(" "):Gr(t)?t:[],r(t,function(t){t&&(i=!0,e[t]=n)})),i}function a(){r(t,function(t){var n=e.get(t);if(n){var i=at(t.attr("class")),o="",a="";r(n,function(e,t){var n=!!i[t];e!==n&&(e?o+=(o.length?" ":"")+t:a+=(a.length?" ":"")+t)}),r(t,function(e){o&&Pe(e,o),a&&Fe(e,a)}),e.remove(t)}}),t.length=0}function s(n,r,s){var l=e.get(n)||{},u=o(l,r,!0),c=o(l,s,!1);(u||c)&&(e.put(n,l),t.push(n),1===t.length&&i.$$postDigest(a))}return{enabled:d,on:d,off:d,pin:d,push:function(e,t,r,i){i&&i(),r=r||{},r.from&&e.css(r.from),r.to&&e.css(r.to),(r.addClass||r.removeClass)&&s(e,r.addClass,r.removeClass);var o=new n;return o.complete(),o}}}]},_i=["$provide",function(e){var t=this;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw Oi("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var i=n+"-animation";t.$$registeredAnimations[n.substr(1)]=i,e.factory(i,r)},this.classNameFilter=function(e){if(1===arguments.length&&(this.$$classNameFilter=e instanceof RegExp?e:null,this.$$classNameFilter)){var t=new RegExp("(\\s+|\\/)"+ji+"(\\s+|\\/)");if(t.test(this.$$classNameFilter.toString()))throw Oi("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',ji)}return this.$$classNameFilter},this.$get=["$$animateQueue",function(e){function t(e,t,n){if(n){var r=ot(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(e):t.prepend(e)}return{on:e.on,off:e.off,pin:e.pin,enabled:e.enabled,cancel:function(e){e.end&&e.end()},enter:function(n,r,i,o){return r=r&&Rr(r),i=i&&Rr(i),r=r||i.parent(),t(n,r,i),e.push(n,"enter",st(o))},move:function(n,r,i,o){return r=r&&Rr(r),i=i&&Rr(i),r=r||i.parent(),t(n,r,i),e.push(n,"move",st(o))},leave:function(t,n){return e.push(t,"leave",st(n),function(){t.remove()})},addClass:function(t,n,r){return r=st(r),r.addClass=it(r.addclass,n),e.push(t,"addClass",r)},removeClass:function(t,n,r){return r=st(r),r.removeClass=it(r.removeClass,n),e.push(t,"removeClass",r)},setClass:function(t,n,r,i){return i=st(i),i.addClass=it(i.addClass,n),i.removeClass=it(i.removeClass,r),e.push(t,"setClass",i)},animate:function(t,n,r,i,o){return o=st(o),o.from=o.from?u(o.from,n):n,o.to=o.to?u(o.to,r):r,i=i||"ng-inline-animate",o.tempClasses=it(o.tempClasses,i),e.push(t,"animate",o)}}}]}],Vi=function(){this.$get=["$$rAF",function(e){function t(t){n.push(t),n.length>1||e(function(){for(var e=0;e<n.length;e++)n[e]();n=[]})}var n=[];return function(){var e=!1;return t(function(){e=!0}),function(n){e?n():t(n)}}}]},Bi=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$document","$timeout",function(e,t,n,i,o){function a(e){this.setHost(e);var t=n(),r=function(e){o(e,0,!1)};this._doneCallbacks=[],this._tick=function(e){var n=i[0];n&&n.hidden?r(e):t(e)},this._state=0}var s=0,l=1,u=2;return a.chain=function(e,t){function n(){return r===e.length?void t(!0):void e[r](function(e){return e===!1?void t(!1):(r++,void n())})}var r=0;n()},a.all=function(e,t){function n(n){o=o&&n,++i===e.length&&t(o)}var i=0,o=!0;r(e,function(e){e.done(n)})},a.prototype={setHost:function(e){this.host=e||{}},done:function(e){this._state===u?e():this._doneCallbacks.push(e)},progress:d,getPromise:function(){if(!this.promise){var t=this;this.promise=e(function(e,n){t.done(function(t){t===!1?n():e()})})}return this.promise},then:function(e,t){return this.getPromise().then(e,t)},"catch":function(e){return this.getPromise()["catch"](e)},"finally":function(e){return this.getPromise()["finally"](e)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(e){var t=this;t._state===s&&(t._state=l,t._tick(function(){t._resolve(e)}))},_resolve:function(e){this._state!==u&&(r(this._doneCallbacks,function(t){t(e)}),this._doneCallbacks.length=0,this._state=u)}},a}]},Ui=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(e,t,n){return function(t,r){function i(){return e(function(){o(),s||l.complete(),s=!0}),l}function o(){a.addClass&&(t.addClass(a.addClass),a.addClass=null),a.removeClass&&(t.removeClass(a.removeClass),a.removeClass=null),a.to&&(t.css(a.to),a.to=null)}var a=r||{};a.$$prepared||(a=_(a)),a.cleanupStyles&&(a.from=a.to=null),a.from&&(t.css(a.from),a.from=null);var s,l=new n;return{start:i,end:i}}}]},Hi=t("$compile"),Wi=new pt;dt.$inject=["$provide","$$sanitizeUriProvider"],ft.prototype.isFirstChange=function(){return this.previousValue===Wi};var qi=/^((?:x|data)[\:\-_])/i,Gi=t("$controller"),zi=/^(\S+)(\s+as\s+([\w$]+))?$/,Ki=function(){this.$get=["$document",function(e){return function(t){return t?!t.nodeType&&t instanceof Rr&&(t=t[0]):t=e[0].body,t.offsetWidth+1}}]},Xi="application/json",Ji={"Content-Type":Xi+";charset=utf-8"},Yi=/^\[|^\{(?!\{)/,Qi={"[":/]$/,"{":/}$/},Zi=/^\)\]\}',?\n/,eo=t("$http"),to=function(e){return function(){throw eo("legacy","The method `{0}` on the promise returned from `$http` has been disabled.",e)}},no=Wr.$interpolateMinErr=t("$interpolate");no.throwNoconcat=function(e){throw no("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",e)},no.interr=function(e,t){return no("interr","Can't interpolate: {0}\n{1}",e,t.toString())};var ro=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,io={http:80,https:443,ftp:21},oo=t("$location"),ao={$$html5:!1,$$replace:!1,absUrl:Kt("$$absUrl"),url:function(e){if(v(e))return this.$$url;var t=ro.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:Kt("$$protocol"),host:Kt("$$host"),port:Kt("$$port"),path:Xt("$$path",function(e){return e=null!==e?e.toString():"","/"==e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(w(e)||x(e))e=e.toString(),this.$$search=Z(e);else{if(!y(e))throw oo("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");e=_(e,{}),r(e,function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:v(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:Xt("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};r([zt,Gt,qt],function(e){e.prototype=Object.create(ao),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==qt||!this.$$html5)throw oo("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=v(t)?null:t,this}});var so=t("$parse"),lo=Function.prototype.call,uo=Function.prototype.apply,co=Function.prototype.bind,ho=ge();r("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(e){ho[e]=!0});var po={n:"\n",f:"\f",r:"\r",t:"	",v:"\x0B","'":"'",'"':'"'},fo=function(e){this.options=e};fo.prototype={constructor:fo,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;){var t=this.text.charAt(this.index);if('"'===t||"'"===t)this.readString(t);else if(this.isNumber(t)||"."===t&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(t,"(){}[].,;:?"))this.tokens.push({index:this.index,text:t}),this.index++;else if(this.isWhitespace(t))this.index++;else{var n=t+this.peek(),r=n+this.peek(2),i=ho[t],o=ho[n],a=ho[r];if(i||o||a){var s=a?r:o?n:t;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){var t=e||1;return this.index+t<this.text.length?this.text.charAt(this.index+t):!1},isNumber:function(e){return e>="0"&&"9">=e&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"	"===e||"\n"===e||"\x0B"===e||" "===e},isIdentifierStart:function(e){return this.options.isIdentifierStart?this.options.isIdentifierStart(e,this.codePointAt(e)):this.isValidIdentifierStart(e)},isValidIdentifierStart:function(e){return e>="a"&&"z">=e||e>="A"&&"Z">=e||"_"===e||"$"===e},isIdentifierContinue:function(e){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(e,this.codePointAt(e)):this.isValidIdentifierContinue(e)},isValidIdentifierContinue:function(e,t){return this.isValidIdentifierStart(e,t)||this.isNumber(e)},codePointAt:function(e){return 1===e.length?e.charCodeAt(0):(e.charCodeAt(0)<<10)+e.charCodeAt(1)-56613888},peekMultichar:function(){var e=this.text.charAt(this.index),t=this.peek();if(!t)return e;var n=e.charCodeAt(0),r=t.charCodeAt(0);return n>=55296&&56319>=n&&r>=56320&&57343>=r?e+t:e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){n=n||this.index;var r=$(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n;throw so("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",e,r,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=kr(this.text.charAt(this.index));if("."==n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){var e=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var t=this.peekMultichar();if(!this.isIdentifierContinue(t))break;this.index+=t.length}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{var s=po[o];n+=s||o}i=!1}else if("\\"===o)i=!0;else{if(o===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",t)}};var go=function(e,t){this.lexer=e,this.options=t};go.Program="Program",go.ExpressionStatement="ExpressionStatement",go.AssignmentExpression="AssignmentExpression",go.ConditionalExpression="ConditionalExpression",go.LogicalExpression="LogicalExpression",go.BinaryExpression="BinaryExpression",go.UnaryExpression="UnaryExpression",go.CallExpression="CallExpression",go.MemberExpression="MemberExpression",go.Identifier="Identifier",go.Literal="Literal",go.ArrayExpression="ArrayExpression",go.Property="Property",go.ObjectExpression="ObjectExpression",go.ThisExpression="ThisExpression",go.LocalsExpression="LocalsExpression",go.NGValueParameter="NGValueParameter",go.prototype={ast:function(e){this.text=e,this.tokens=this.lexer.lex(e);var t=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),t},program:function(){for(var e=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&e.push(this.expressionStatement()),!this.expect(";"))return{type:go.Program,body:e}},expressionStatement:function(){return{type:go.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var e,t=this.expression();e=this.expect("|");)t=this.filter(t);return t},expression:function(){return this.assignment()},assignment:function(){var e=this.ternary();return this.expect("=")&&(e={type:go.AssignmentExpression,left:e,right:this.assignment(),operator:"="}),e},ternary:function(){var e,t,n=this.logicalOR();return this.expect("?")&&(e=this.expression(),this.consume(":"))?(t=this.expression(),{type:go.ConditionalExpression,test:n,alternate:e,consequent:t}):n},logicalOR:function(){for(var e=this.logicalAND();this.expect("||");)e={type:go.LogicalExpression,operator:"||",left:e,right:this.logicalAND()};return e},logicalAND:function(){for(var e=this.equality();this.expect("&&");)e={type:go.LogicalExpression,operator:"&&",left:e,right:this.equality()};return e},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t={type:go.BinaryExpression,operator:e.text,left:t,right:this.relational()};return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t={type:go.BinaryExpression,operator:e.text,left:t,right:this.additive()};return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t={type:go.BinaryExpression,operator:e.text,left:t,right:this.multiplicative()};return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t={type:go.BinaryExpression,operator:e.text,left:t,right:this.unary()};return t},unary:function(){var e;return(e=this.expect("+","-","!"))?{type:go.UnaryExpression,operator:e.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var e;this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?e=_(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?e={type:go.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());for(var t;t=this.expect("(","[",".");)"("===t.text?(e={type:go.CallExpression,callee:e,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(e={type:go.MemberExpression,object:e,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?e={type:go.MemberExpression,object:e,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return e},filter:function(e){for(var t=[e],n={type:go.CallExpression,callee:this.identifier(),arguments:t,filter:!0};this.expect(":");)t.push(this.expression());return n},parseArguments:function(){var e=[];if(")"!==this.peekToken().text)do e.push(this.expression());while(this.expect(","));return e},identifier:function(){var e=this.consume();return e.identifier||this.throwError("is not a valid identifier",e),{type:go.Identifier,name:e.text}},constant:function(){return{type:go.Literal,value:this.consume().value}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:go.ArrayExpression,elements:e}},object:function(){var e,t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;e={type:go.Property,kind:"init"},this.peek().constant?e.key=this.constant():this.peek().identifier?e.key=this.identifier():this.throwError("invalid key",this.peek()),this.consume(":"),e.value=this.expression(),t.push(e)}while(this.expect(","));return this.consume("}"),{type:go.ObjectExpression,properties:t}},throwError:function(e,t){throw so("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",t.text,e,t.index+1,this.text,this.text.substring(t.index))},consume:function(e){if(0===this.tokens.length)throw so("ueoe","Unexpected end of expression: {0}",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},peekToken:function(){if(0===this.tokens.length)throw so("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,i){if(this.tokens.length>e){var o=this.tokens[e],a=o.text;if(a===t||a===n||a===r||a===i||!t&&!n&&!r&&!i)return o}return!1},expect:function(e,t,n,r){var i=this.peek(e,t,n,r);return i?(this.tokens.shift(),i):!1},selfReferential:{"this":{type:go.ThisExpression},$locals:{type:go.LocalsExpression}}},dn.prototype={compile:function(e,t){var n=this,i=this.astBuilder.ast(e);this.state={nextId:0,filters:{},expensiveChecks:t,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},sn(i,n.$filter);var o,a="";if(this.stage="assign",o=cn(i)){this.state.computing="assign";var s=this.nextId();this.recurse(o,s),this.return_(s),a="fn.assign="+this.generateFunction("assign","s,v,l")}var l=ln(i.body);n.stage="inputs",r(l,function(e,t){var r="fn"+t;n.state[r]={vars:[],body:[],own:{}},n.state.computing=r;var i=n.nextId();n.recurse(e,i),n.return_(i),n.state.inputs.push(r),e.watchId=t}),this.state.computing="fn",this.stage="main",this.recurse(i);var u='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+a+this.watchFns()+"return fn;",c=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext","ifDefined","plus","text",u)(this.$filter,Qt,en,tn,Zt,nn,rn,on,e);return this.state=this.stage=void 0,c.literal=hn(i),c.constant=pn(i),c},USE:"use",STRICT:"strict",watchFns:function(){var e=[],t=this.state.inputs,n=this;return r(t,function(t){e.push("var "+t+"="+n.generateFunction(t,"s"))}),t.length&&e.push("fn.inputs=["+t.join(",")+"];"),e.join("")},generateFunction:function(e,t){return"function("+t+"){"+this.varsPrefix(e)+this.body(e)+"};"},filterPrefix:function(){var e=[],t=this;return r(this.state.filters,function(n,r){e.push(n+"=$filter("+t.escape(r)+")")}),e.length?"var "+e.join(",")+";":""},varsPrefix:function(e){return this.state[e].vars.length?"var "+this.state[e].vars.join(",")+";":""},body:function(e){return this.state[e].body.join("")},recurse:function(e,t,n,i,o,a){var s,l,u,c,h=this;if(i=i||d,!a&&$(e.watchId))return t=t||this.nextId(),void this.if_("i",this.lazyAssign(t,this.computedMember("i",e.watchId)),this.lazyRecurse(e,t,n,i,o,!0));switch(e.type){case go.Program:r(e.body,function(t,n){h.recurse(t.expression,void 0,void 0,function(e){l=e}),n!==e.body.length-1?h.current().body.push(l,";"):h.return_(l)});break;case go.Literal:c=this.escape(e.value),this.assign(t,c),i(c);break;case go.UnaryExpression:this.recurse(e.argument,void 0,void 0,function(e){l=e}),c=e.operator+"("+this.ifDefined(l,0)+")",this.assign(t,c),i(c);break;case go.BinaryExpression:this.recurse(e.left,void 0,void 0,function(e){s=e}),this.recurse(e.right,void 0,void 0,function(e){l=e}),c="+"===e.operator?this.plus(s,l):"-"===e.operator?this.ifDefined(s,0)+e.operator+this.ifDefined(l,0):"("+s+")"+e.operator+"("+l+")",this.assign(t,c),i(c);break;case go.LogicalExpression:t=t||this.nextId(),h.recurse(e.left,t),h.if_("&&"===e.operator?t:h.not(t),h.lazyRecurse(e.right,t)),i(t);break;case go.ConditionalExpression:t=t||this.nextId(),h.recurse(e.test,t),h.if_(t,h.lazyRecurse(e.alternate,t),h.lazyRecurse(e.consequent,t)),i(t);break;case go.Identifier:t=t||this.nextId(),n&&(n.context="inputs"===h.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",e.name)+"?l:s"),n.computed=!1,n.name=e.name),Qt(e.name),h.if_("inputs"===h.stage||h.not(h.getHasOwnProperty("l",e.name)),function(){h.if_("inputs"===h.stage||"s",function(){o&&1!==o&&h.if_(h.not(h.nonComputedMember("s",e.name)),h.lazyAssign(h.nonComputedMember("s",e.name),"{}")),h.assign(t,h.nonComputedMember("s",e.name))})},t&&h.lazyAssign(t,h.nonComputedMember("l",e.name))),(h.state.expensiveChecks||gn(e.name))&&h.addEnsureSafeObject(t),i(t);break;case go.MemberExpression:s=n&&(n.context=this.nextId())||this.nextId(),t=t||this.nextId(),h.recurse(e.object,s,void 0,function(){h.if_(h.notNull(s),function(){o&&1!==o&&h.addEnsureSafeAssignContext(s),e.computed?(l=h.nextId(),h.recurse(e.property,l),h.getStringValue(l),h.addEnsureSafeMemberName(l),o&&1!==o&&h.if_(h.not(h.computedMember(s,l)),h.lazyAssign(h.computedMember(s,l),"{}")),c=h.ensureSafeObject(h.computedMember(s,l)),h.assign(t,c),n&&(n.computed=!0,n.name=l)):(Qt(e.property.name),o&&1!==o&&h.if_(h.not(h.nonComputedMember(s,e.property.name)),h.lazyAssign(h.nonComputedMember(s,e.property.name),"{}")),c=h.nonComputedMember(s,e.property.name),(h.state.expensiveChecks||gn(e.property.name))&&(c=h.ensureSafeObject(c)),h.assign(t,c),n&&(n.computed=!1,n.name=e.property.name))},function(){h.assign(t,"undefined")}),i(t)},!!o);break;case go.CallExpression:t=t||this.nextId(),e.filter?(l=h.filter(e.callee.name),u=[],r(e.arguments,function(e){var t=h.nextId();h.recurse(e,t),u.push(t)}),c=l+"("+u.join(",")+")",h.assign(t,c),i(t)):(l=h.nextId(),s={},u=[],
h.recurse(e.callee,l,s,function(){h.if_(h.notNull(l),function(){h.addEnsureSafeFunction(l),r(e.arguments,function(e){h.recurse(e,h.nextId(),void 0,function(e){u.push(h.ensureSafeObject(e))})}),s.name?(h.state.expensiveChecks||h.addEnsureSafeObject(s.context),c=h.member(s.context,s.name,s.computed)+"("+u.join(",")+")"):c=l+"("+u.join(",")+")",c=h.ensureSafeObject(c),h.assign(t,c)},function(){h.assign(t,"undefined")}),i(t)}));break;case go.AssignmentExpression:if(l=this.nextId(),s={},!un(e.left))throw so("lval","Trying to assign a value to a non l-value");this.recurse(e.left,void 0,s,function(){h.if_(h.notNull(s.context),function(){h.recurse(e.right,l),h.addEnsureSafeObject(h.member(s.context,s.name,s.computed)),h.addEnsureSafeAssignContext(s.context),c=h.member(s.context,s.name,s.computed)+e.operator+l,h.assign(t,c),i(t||c)})},1);break;case go.ArrayExpression:u=[],r(e.elements,function(e){h.recurse(e,h.nextId(),void 0,function(e){u.push(e)})}),c="["+u.join(",")+"]",this.assign(t,c),i(c);break;case go.ObjectExpression:u=[],r(e.properties,function(e){h.recurse(e.value,h.nextId(),void 0,function(t){u.push(h.escape(e.key.type===go.Identifier?e.key.name:""+e.key.value)+":"+t)})}),c="{"+u.join(",")+"}",this.assign(t,c),i(c);break;case go.ThisExpression:this.assign(t,"s"),i("s");break;case go.LocalsExpression:this.assign(t,"l"),i("l");break;case go.NGValueParameter:this.assign(t,"v"),i("v")}},getHasOwnProperty:function(e,t){var n=e+"."+t,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,e+"&&("+this.escape(t)+" in "+e+")")),r[n]},assign:function(e,t){return e?(this.current().body.push(e,"=",t,";"),e):void 0},filter:function(e){return this.state.filters.hasOwnProperty(e)||(this.state.filters[e]=this.nextId(!0)),this.state.filters[e]},ifDefined:function(e,t){return"ifDefined("+e+","+this.escape(t)+")"},plus:function(e,t){return"plus("+e+","+t+")"},return_:function(e){this.current().body.push("return ",e,";")},if_:function(e,t,n){if(e===!0)t();else{var r=this.current().body;r.push("if(",e,"){"),t(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(e){return"!("+e+")"},notNull:function(e){return e+"!=null"},nonComputedMember:function(e,t){var n=/[$_a-zA-Z][$_a-zA-Z0-9]*/,r=/[^$_a-zA-Z0-9]/g;return n.test(t)?e+"."+t:e+'["'+t.replace(r,this.stringEscapeFn)+'"]'},computedMember:function(e,t){return e+"["+t+"]"},member:function(e,t,n){return n?this.computedMember(e,t):this.nonComputedMember(e,t)},addEnsureSafeObject:function(e){this.current().body.push(this.ensureSafeObject(e),";")},addEnsureSafeMemberName:function(e){this.current().body.push(this.ensureSafeMemberName(e),";")},addEnsureSafeFunction:function(e){this.current().body.push(this.ensureSafeFunction(e),";")},addEnsureSafeAssignContext:function(e){this.current().body.push(this.ensureSafeAssignContext(e),";")},ensureSafeObject:function(e){return"ensureSafeObject("+e+",text)"},ensureSafeMemberName:function(e){return"ensureSafeMemberName("+e+",text)"},ensureSafeFunction:function(e){return"ensureSafeFunction("+e+",text)"},getStringValue:function(e){this.assign(e,"getStringValue("+e+")")},ensureSafeAssignContext:function(e){return"ensureSafeAssignContext("+e+",text)"},lazyRecurse:function(e,t,n,r,i,o){var a=this;return function(){a.recurse(e,t,n,r,i,o)}},lazyAssign:function(e,t){var n=this;return function(){n.assign(e,t)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)},escape:function(e){if(w(e))return"'"+e.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(x(e))return e.toString();if(e===!0)return"true";if(e===!1)return"false";if(null===e)return"null";if("undefined"==typeof e)return"undefined";throw so("esc","IMPOSSIBLE")},nextId:function(e,t){var n="v"+this.state.nextId++;return e||this.current().vars.push(n+(t?"="+t:"")),n},current:function(){return this.state[this.state.computing]}},fn.prototype={compile:function(e,t){var n=this,i=this.astBuilder.ast(e);this.expression=e,this.expensiveChecks=t,sn(i,n.$filter);var o,a;(o=cn(i))&&(a=this.recurse(o));var s,l=ln(i.body);l&&(s=[],r(l,function(e,t){var r=n.recurse(e);e.input=r,s.push(r),e.watchId=t}));var u=[];r(i.body,function(e){u.push(n.recurse(e.expression))});var c=0===i.body.length?d:1===i.body.length?u[0]:function(e,t){var n;return r(u,function(r){n=r(e,t)}),n};return a&&(c.assign=function(e,t,n){return a(e,n,t)}),s&&(c.inputs=s),c.literal=hn(i),c.constant=pn(i),c},recurse:function(e,t,n){var i,o,a,s=this;if(e.input)return this.inputs(e.input,e.watchId);switch(e.type){case go.Literal:return this.value(e.value,t);case go.UnaryExpression:return o=this.recurse(e.argument),this["unary"+e.operator](o,t);case go.BinaryExpression:return i=this.recurse(e.left),o=this.recurse(e.right),this["binary"+e.operator](i,o,t);case go.LogicalExpression:return i=this.recurse(e.left),o=this.recurse(e.right),this["binary"+e.operator](i,o,t);case go.ConditionalExpression:return this["ternary?:"](this.recurse(e.test),this.recurse(e.alternate),this.recurse(e.consequent),t);case go.Identifier:return Qt(e.name,s.expression),s.identifier(e.name,s.expensiveChecks||gn(e.name),t,n,s.expression);case go.MemberExpression:return i=this.recurse(e.object,!1,!!n),e.computed||(Qt(e.property.name,s.expression),o=e.property.name),e.computed&&(o=this.recurse(e.property)),e.computed?this.computedMember(i,o,t,n,s.expression):this.nonComputedMember(i,o,s.expensiveChecks,t,n,s.expression);case go.CallExpression:return a=[],r(e.arguments,function(e){a.push(s.recurse(e))}),e.filter&&(o=this.$filter(e.callee.name)),e.filter||(o=this.recurse(e.callee,!0)),e.filter?function(e,n,r,i){for(var s=[],l=0;l<a.length;++l)s.push(a[l](e,n,r,i));var u=o.apply(void 0,s,i);return t?{context:void 0,name:void 0,value:u}:u}:function(e,n,r,i){var l,u=o(e,n,r,i);if(null!=u.value){en(u.context,s.expression),tn(u.value,s.expression);for(var c=[],h=0;h<a.length;++h)c.push(en(a[h](e,n,r,i),s.expression));l=en(u.value.apply(u.context,c),s.expression)}return t?{value:l}:l};case go.AssignmentExpression:return i=this.recurse(e.left,!0,1),o=this.recurse(e.right),function(e,n,r,a){var l=i(e,n,r,a),u=o(e,n,r,a);return en(l.value,s.expression),nn(l.context),l.context[l.name]=u,t?{value:u}:u};case go.ArrayExpression:return a=[],r(e.elements,function(e){a.push(s.recurse(e))}),function(e,n,r,i){for(var o=[],s=0;s<a.length;++s)o.push(a[s](e,n,r,i));return t?{value:o}:o};case go.ObjectExpression:return a=[],r(e.properties,function(e){a.push({key:e.key.type===go.Identifier?e.key.name:""+e.key.value,value:s.recurse(e.value)})}),function(e,n,r,i){for(var o={},s=0;s<a.length;++s)o[a[s].key]=a[s].value(e,n,r,i);return t?{value:o}:o};case go.ThisExpression:return function(e){return t?{value:e}:e};case go.LocalsExpression:return function(e,n){return t?{value:n}:n};case go.NGValueParameter:return function(e,n,r){return t?{value:r}:r}}},"unary+":function(e,t){return function(n,r,i,o){var a=e(n,r,i,o);return a=$(a)?+a:0,t?{value:a}:a}},"unary-":function(e,t){return function(n,r,i,o){var a=e(n,r,i,o);return a=$(a)?-a:0,t?{value:a}:a}},"unary!":function(e,t){return function(n,r,i,o){var a=!e(n,r,i,o);return t?{value:a}:a}},"binary+":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a),l=t(r,i,o,a),u=on(s,l);return n?{value:u}:u}},"binary-":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a),l=t(r,i,o,a),u=($(s)?s:0)-($(l)?l:0);return n?{value:u}:u}},"binary*":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)*t(r,i,o,a);return n?{value:s}:s}},"binary/":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)/t(r,i,o,a);return n?{value:s}:s}},"binary%":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)%t(r,i,o,a);return n?{value:s}:s}},"binary===":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)===t(r,i,o,a);return n?{value:s}:s}},"binary!==":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)!==t(r,i,o,a);return n?{value:s}:s}},"binary==":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)==t(r,i,o,a);return n?{value:s}:s}},"binary!=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)!=t(r,i,o,a);return n?{value:s}:s}},"binary<":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)<t(r,i,o,a);return n?{value:s}:s}},"binary>":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)>t(r,i,o,a);return n?{value:s}:s}},"binary<=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)<=t(r,i,o,a);return n?{value:s}:s}},"binary>=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)>=t(r,i,o,a);return n?{value:s}:s}},"binary&&":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)&&t(r,i,o,a);return n?{value:s}:s}},"binary||":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)||t(r,i,o,a);return n?{value:s}:s}},"ternary?:":function(e,t,n,r){return function(i,o,a,s){var l=e(i,o,a,s)?t(i,o,a,s):n(i,o,a,s);return r?{value:l}:l}},value:function(e,t){return function(){return t?{context:void 0,name:void 0,value:e}:e}},identifier:function(e,t,n,r,i){return function(o,a,s,l){var u=a&&e in a?a:o;r&&1!==r&&u&&!u[e]&&(u[e]={});var c=u?u[e]:void 0;return t&&en(c,i),n?{context:u,name:e,value:c}:c}},computedMember:function(e,t,n,r,i){return function(o,a,s,l){var u,c,h=e(o,a,s,l);return null!=h&&(u=t(o,a,s,l),u=Zt(u),Qt(u,i),r&&1!==r&&(nn(h),h&&!h[u]&&(h[u]={})),c=h[u],en(c,i)),n?{context:h,name:u,value:c}:c}},nonComputedMember:function(e,t,n,r,i,o){return function(a,s,l,u){var c=e(a,s,l,u);i&&1!==i&&(nn(c),c&&!c[t]&&(c[t]={}));var h=null!=c?c[t]:void 0;return(n||gn(t))&&en(h,o),r?{context:c,name:t,value:h}:h}},inputs:function(e,t){return function(n,r,i,o){return o?o[t]:e(n,r,i)}}};var mo=function(e,t,n){this.lexer=e,this.$filter=t,this.options=n,this.ast=new go(e,n),this.astCompiler=n.csp?new fn(this.ast,t):new dn(this.ast,t)};mo.prototype={constructor:mo,parse:function(e){return this.astCompiler.compile(e,this.options.expensiveChecks)}};var vo=Object.prototype.valueOf,$o=t("$sce"),yo={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},bo=t("$compile"),wo=e.document.createElement("a"),xo=Nn(e.location.href);Rn.$inject=["$document"],Fn.$inject=["$provide"];var Eo=22,Co=".",So="0";Un.$inject=["$locale"],Hn.$inject=["$locale"];var Lo={yyyy:Kn("FullYear",4,0,!1,!0),yy:Kn("FullYear",2,0,!0,!0),y:Kn("FullYear",1,0,!1,!0),MMMM:Xn("Month"),MMM:Xn("Month",!0),MM:Kn("Month",2,1),M:Kn("Month",1,1),LLLL:Xn("Month",!1,!0),dd:Kn("Date",2),d:Kn("Date",1),HH:Kn("Hours",2),H:Kn("Hours",1),hh:Kn("Hours",2,-12),h:Kn("Hours",1,-12),mm:Kn("Minutes",2),m:Kn("Minutes",1),ss:Kn("Seconds",2),s:Kn("Seconds",1),sss:Kn("Milliseconds",3),EEEE:Xn("Day"),EEE:Xn("Day",!0),a:er,Z:Jn,ww:Zn(2),w:Zn(1),G:tr,GG:tr,GGG:tr,GGGG:nr},Ao=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,To=/^\-?\d+$/;rr.$inject=["$locale"];var Mo=g(kr),ko=g(Ir);ar.$inject=["$parse"];var Io=g({restrict:"E",compile:function(e,t){return t.href||t.xlinkHref?void 0:function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===Br.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(n)||e.preventDefault()})}}}}),No={};r(Ci,function(e,t){function n(e,n,i){e.$watch(i[r],function(e){i.$set(t,!!e)})}if("multiple"!=e){var r=gt("ng-"+t),i=n;"checked"===e&&(i=function(e,t,i){i.ngModel!==i[r]&&n(e,t,i)}),No[r]=function(){return{restrict:"A",priority:100,link:i}}}}),r(Li,function(e,t){No[t]=function(){return{priority:100,link:function(e,n,r){if("ngPattern"===t&&"/"==r.ngPattern.charAt(0)){var i=r.ngPattern.match(Ar);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}e.$watch(r[t],function(e){r.$set(t,e)})}}}}),r(["src","srcset","href"],function(e){var t=gt("ng-"+e);No[t]=function(){return{priority:99,link:function(n,r,i){var o=e,a=e;"href"===e&&"[object SVGAnimatedString]"===Br.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(t,function(t){return t?(i.$set(a,t),void(Or&&o&&r.prop(o,i[a]))):void("href"===e&&i.$set(a,null))})}}}});var Do={$addControl:d,$$renameControl:lr,$removeControl:d,$setValidity:d,$setDirty:d,$setPristine:d,$setSubmitted:d},Oo="ng-submitted";ur.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var Ro=function(e){return["$timeout","$parse",function(t,n){function r(e){return""===e?n('this[""]').assign:n(e).assign||d}var i={name:"form",restrict:e?"EAC":"E",require:["form","^^?form"],controller:ur,compile:function(n,i){n.addClass(va).addClass(ga);var o=i.name?"name":e&&i.ngForm?"ngForm":!1;return{pre:function(e,n,i,a){var s=a[0];if(!("action"in i)){var l=function(t){e.$apply(function(){s.$commitViewValue(),s.$setSubmitted()}),t.preventDefault()};hi(n[0],"submit",l),n.on("$destroy",function(){t(function(){pi(n[0],"submit",l)},0,!1)})}var c=a[1]||s.$$parentForm;c.$addControl(s);var h=o?r(s.$name):d;o&&(h(e,s),i.$observe(o,function(t){s.$name!==t&&(h(e,void 0),s.$$parentForm.$$renameControl(s,t),(h=r(s.$name))(e,s))})),n.on("$destroy",function(){s.$$parentForm.$removeControl(s),h(e,void 0),u(s,Do)})}}}};return i}]},jo=Ro(),Fo=Ro(!0),Po=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,_o=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,Vo=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,Bo=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Uo=/^(\d{4,})-(\d{2})-(\d{2})$/,Ho=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Wo=/^(\d{4,})-W(\d\d)$/,qo=/^(\d{4,})-(\d\d)$/,Go=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,zo="keydown wheel mousedown",Ko=ge();r("date,datetime-local,month,time,week".split(","),function(e){Ko[e]=!0});var Xo={text:hr,date:gr("date",Uo,fr(Uo,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":gr("datetimelocal",Ho,fr(Ho,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:gr("time",Go,fr(Go,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:gr("week",Wo,dr,"yyyy-Www"),month:gr("month",qo,fr(qo,["yyyy","MM"]),"yyyy-MM"),number:vr,url:$r,email:yr,radio:br,checkbox:xr,hidden:d,button:d,submit:d,reset:d,file:d},Jo=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(Xo[kr(a.type)]||Xo.text)(i,o,a,s[0],t,e,n,r)}}}}],Yo=/^(true|false|\d+)$/,Qo=function(){return{restrict:"A",priority:100,compile:function(e,t){return Yo.test(t.ngValue)?function(e,t,n){n.$set("value",e.$eval(n.ngValue))}:function(e,t,n){e.$watch(n.ngValue,function(e){n.$set("value",e)})}}}},Zo=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,n,r){e.$$addBindingInfo(n,r.ngBind),n=n[0],t.$watch(r.ngBind,function(e){n.textContent=v(e)?"":e})}}}}],ea=["$interpolate","$compile",function(e,t){return{compile:function(n){return t.$$addBindingClass(n),function(n,r,i){var o=e(r.attr(i.$attr.ngBindTemplate));t.$$addBindingInfo(r,o.expressions),r=r[0],i.$observe("ngBindTemplate",function(e){r.textContent=v(e)?"":e})}}}}],ta=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,i){var o=t(i.ngBindHtml),a=t(i.ngBindHtml,function(e){return(e||"").toString()});return n.$$addBindingClass(r),function(t,r,i){n.$$addBindingInfo(r,i.ngBindHtml),t.$watch(a,function(){r.html(e.getTrustedHtml(o(t))||"")})}}}}],na=g({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),ra=Er("",!0),ia=Er("Odd",0),oa=Er("Even",1),aa=sr({compile:function(e,t){t.$set("ngCloak",void 0),e.removeClass("ng-cloak")}}),sa=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],la={},ua={blur:!0,focus:!0};r("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=gt("ng-"+e);la[t]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[t],null,!0);return function(t,n){n.on(e,function(n){var i=function(){a(t,{$event:n})};ua[e]&&r.$$phase?t.$evalAsync(i):t.$apply(i)})}}}}]});var ca=["$animate","$compile",function(e,t){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,l,u;n.$watch(i.ngIf,function(n){n?l||a(function(n,o){l=o,n[n.length++]=t.$$createComment("end ngIf",i.ngIf),s={clone:n},e.enter(n,r.parent(),r)}):(u&&(u.remove(),u=null),l&&(l.$destroy(),l=null),s&&(u=fe(s.clone),e.leave(u).then(function(){u=null}),s=null))})}}}],ha=["$templateRequest","$anchorScroll","$animate",function(e,t,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:Wr.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,l,u,c){var h,p,d,f=0,g=function(){p&&(p.remove(),p=null),h&&(h.$destroy(),h=null),d&&(n.leave(d).then(function(){p=null}),p=d,d=null)};r.$watch(o,function(o){var l=function(){!$(s)||s&&!r.$eval(s)||t()},p=++f;o?(e(o,!0).then(function(e){if(!r.$$destroyed&&p===f){var t=r.$new();u.template=e;var s=c(t,function(e){g(),n.enter(e,null,i).then(l)});h=t,d=s,h.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||p===f&&(g(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(g(),u.template=null)})}}}}],pa=["$compile",function(t){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){return Br.call(r[0]).match(/SVG/)?(r.empty(),void t(Le(o.template,e.document).childNodes)(n,function(e){r.append(e)},{futureParentElement:r})):(r.html(o.template),void t(r.contents())(n))}}}],da=sr({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),fa=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,n,i){var o=t.attr(n.$attr.ngList)||", ",a="false"!==n.ngTrim,s=a?Kr(o):o,l=function(e){if(!v(e)){var t=[];return e&&r(e.split(s),function(e){e&&t.push(a?Kr(e):e)}),t}};i.$parsers.push(l),i.$formatters.push(function(e){return Gr(e)?e.join(o):void 0}),i.$isEmpty=function(e){return!e||!e.length}}}},ga="ng-valid",ma="ng-invalid",va="ng-pristine",$a="ng-dirty",ya="ng-untouched",ba="ng-touched",wa="ng-pending",xa="ng-empty",Ea="ng-not-empty",Ca=t("ngModel"),Sa=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(e,t,n,i,o,a,s,l,u,c){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=void 0,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=void 0,this.$name=c(n.name||"",!1)(e),this.$$parentForm=Do;var h,p=o(n.ngModel),f=p.assign,g=p,m=f,y=null,b=this;this.$$setOptions=function(e){if(b.$options=e,e&&e.getterSetter){var t=o(n.ngModel+"()"),r=o(n.ngModel+"($$$p)");g=function(e){var n=p(e);return C(n)&&(n=t(e)),n},m=function(e,t){C(p(e))?r(e,{$$$p:t}):f(e,t)}}else if(!p.assign)throw Ca("nonassign","Expression '{0}' is non-assignable. Element: {1}",n.ngModel,Y(i))},this.$render=d,this.$isEmpty=function(e){return v(e)||""===e||null===e||e!==e},this.$$updateEmptyClasses=function(e){b.$isEmpty(e)?(a.removeClass(i,Ea),a.addClass(i,xa)):(a.removeClass(i,xa),a.addClass(i,Ea))};var w=0;Cr({ctrl:this,$element:i,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]},$animate:a}),this.$setPristine=function(){b.$dirty=!1,b.$pristine=!0,a.removeClass(i,$a),a.addClass(i,va)},this.$setDirty=function(){b.$dirty=!0,b.$pristine=!1,a.removeClass(i,va),a.addClass(i,$a),b.$$parentForm.$setDirty()},this.$setUntouched=function(){b.$touched=!1,b.$untouched=!0,a.setClass(i,ya,ba)},this.$setTouched=function(){b.$touched=!0,b.$untouched=!1,a.setClass(i,ba,ya)},this.$rollbackViewValue=function(){s.cancel(y),b.$viewValue=b.$$lastCommittedViewValue,b.$render()},this.$validate=function(){if(!x(b.$modelValue)||!isNaN(b.$modelValue)){var e=b.$$lastCommittedViewValue,t=b.$$rawModelValue,n=b.$valid,r=b.$modelValue,i=b.$options&&b.$options.allowInvalid;b.$$runValidators(t,e,function(e){i||n===e||(b.$modelValue=e?t:void 0,b.$modelValue!==r&&b.$$writeModelToScope())})}},this.$$runValidators=function(e,t,n){function i(){var e=b.$$parserName||"parse";return v(h)?(s(e,null),!0):(h||(r(b.$validators,function(e,t){s(t,null)}),r(b.$asyncValidators,function(e,t){s(t,null)})),s(e,h),h)}function o(){var n=!0;return r(b.$validators,function(r,i){var o=r(e,t);n=n&&o,s(i,o)}),n?!0:(r(b.$asyncValidators,function(e,t){s(t,null)}),!1)}function a(){var n=[],i=!0;r(b.$asyncValidators,function(r,o){var a=r(e,t);if(!N(a))throw Ca("nopromise","Expected asynchronous validator to return a promise but got '{0}' instead.",a);s(o,void 0),n.push(a.then(function(){s(o,!0)},function(){i=!1,s(o,!1)}))}),n.length?u.all(n).then(function(){l(i)},d):l(!0)}function s(e,t){c===w&&b.$setValidity(e,t)}function l(e){c===w&&n(e)}w++;var c=w;return i()&&o()?void a():void l(!1)},this.$commitViewValue=function(){var e=b.$viewValue;s.cancel(y),(b.$$lastCommittedViewValue!==e||""===e&&b.$$hasNativeValidators)&&(b.$$updateEmptyClasses(e),b.$$lastCommittedViewValue=e,b.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){function t(){b.$modelValue!==o&&b.$$writeModelToScope()}var n=b.$$lastCommittedViewValue,r=n;if(h=v(r)?void 0:!0)for(var i=0;i<b.$parsers.length;i++)if(r=b.$parsers[i](r),v(r)){h=!1;break}x(b.$modelValue)&&isNaN(b.$modelValue)&&(b.$modelValue=g(e));var o=b.$modelValue,a=b.$options&&b.$options.allowInvalid;b.$$rawModelValue=r,a&&(b.$modelValue=r,t()),b.$$runValidators(r,b.$$lastCommittedViewValue,function(e){a||(b.$modelValue=e?r:void 0,t())})},this.$$writeModelToScope=function(){m(e,b.$modelValue),r(b.$viewChangeListeners,function(e){try{e()}catch(n){t(n)}})},this.$setViewValue=function(e,t){b.$viewValue=e,b.$options&&!b.$options.updateOnDefault||b.$$debounceViewValueCommit(t)},this.$$debounceViewValueCommit=function(t){var n,r=0,i=b.$options;i&&$(i.debounce)&&(n=i.debounce,x(n)?r=n:x(n[t])?r=n[t]:x(n["default"])&&(r=n["default"])),s.cancel(y),r?y=s(function(){b.$commitViewValue()},r):l.$$phase?b.$commitViewValue():e.$apply(function(){b.$commitViewValue()})},e.$watch(function(){var t=g(e);if(t!==b.$modelValue&&(b.$modelValue===b.$modelValue||t===t)){b.$modelValue=b.$$rawModelValue=t,h=void 0;for(var n=b.$formatters,r=n.length,i=t;r--;)i=n[r](i);b.$viewValue!==i&&(b.$$updateEmptyClasses(i),b.$viewValue=b.$$lastCommittedViewValue=i,b.$render(),b.$$runValidators(t,i,d))}return t})}],La=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Sa,priority:1,compile:function(t){return t.addClass(va).addClass(ya).addClass(ga),{pre:function(e,t,n,r){var i=r[0],o=r[1]||i.$$parentForm;i.$$setOptions(r[2]&&r[2].$options),o.$addControl(i),n.$observe("name",function(e){i.$name!==e&&i.$$parentForm.$$renameControl(i,e)}),e.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(t,n,r,i){var o=i[0];o.$options&&o.$options.updateOn&&n.on(o.$options.updateOn,function(e){o.$$debounceViewValueCommit(e&&e.type)}),n.on("blur",function(){o.$touched||(e.$$phase?t.$evalAsync(o.$setTouched):t.$apply(o.$setTouched))})}}}}}],Aa=/(\s+|^)default(\s+|$)/,Ta=function(){return{restrict:"A",controller:["$scope","$attrs",function(e,t){var n=this;this.$options=_(e.$eval(t.ngModelOptions)),$(this.$options.updateOn)?(this.$options.updateOnDefault=!1,this.$options.updateOn=Kr(this.$options.updateOn.replace(Aa,function(){return n.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},Ma=sr({terminal:!0,priority:1e3}),ka=t("ngOptions"),Ia=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,Na=["$compile","$document","$parse",function(t,i,o){function a(e,t,r){function i(e,t,n,r,i){this.selectValue=e,this.viewValue=t,this.label=n,this.group=r,this.disabled=i}function a(e){var t;if(!u&&n(e))t=e;else{t=[];for(var r in e)e.hasOwnProperty(r)&&"$"!==r.charAt(0)&&t.push(r)}return t}var s=e.match(Ia);if(!s)throw ka("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",e,Y(t));var l=s[5]||s[7],u=s[6],c=/ as /.test(s[0])&&s[1],h=s[9],p=o(s[2]?s[1]:l),d=c&&o(c),f=d||p,g=h&&o(h),m=h?function(e,t){return g(r,t)}:function(e){return Ye(e)},v=function(e,t){return m(e,E(e,t))},$=o(s[2]||s[1]),y=o(s[3]||""),b=o(s[4]||""),w=o(s[8]),x={},E=u?function(e,t){return x[u]=t,x[l]=e,x}:function(e){return x[l]=e,x};return{trackBy:h,getTrackByValue:v,getWatchables:o(w,function(e){var t=[];e=e||[];for(var n=a(e),i=n.length,o=0;i>o;o++){var l=e===n?o:n[o],u=e[l],c=E(u,l),h=m(u,c);if(t.push(h),s[2]||s[1]){var p=$(r,c);t.push(p)}if(s[4]){var d=b(r,c);t.push(d)}}return t}),getOptions:function(){for(var e=[],t={},n=w(r)||[],o=a(n),s=o.length,l=0;s>l;l++){var u=n===o?l:o[l],c=n[u],p=E(c,u),d=f(r,p),g=m(d,p),x=$(r,p),C=y(r,p),S=b(r,p),L=new i(g,d,x,C,S);e.push(L),t[g]=L}return{items:e,selectValueMap:t,getOptionFromViewValue:function(e){return t[v(e)]},getViewValueFromOption:function(e){return h?Wr.copy(e.viewValue):e.viewValue}}}}}function s(e,n,o,s){function c(e,t){var n=l.cloneNode(!1);t.appendChild(n),h(e,n)}function h(e,t){e.element=t,t.disabled=e.disabled,e.label!==t.label&&(t.label=e.label,t.textContent=e.label),e.value!==t.value&&(t.value=e.selectValue)}function p(){var e=E&&f.readValue();if(E)for(var t=E.items.length-1;t>=0;t--){var r=E.items[t];He(r.group?r.element.parentNode:r.element)}E=C.getOptions();var i={};if(w&&n.prepend(d),E.items.forEach(function(e){var t;$(e.group)?(t=i[e.group],t||(t=u.cloneNode(!1),S.appendChild(t),t.label=e.group,i[e.group]=t),c(e,t)):c(e,S)}),n[0].appendChild(S),g.$render(),!g.$isEmpty(e)){var o=f.readValue(),a=C.trackBy||m;(a?B(e,o):e===o)||(g.$setViewValue(o),g.$render())}}for(var d,f=s[0],g=s[1],m=o.multiple,v=0,y=n.children(),b=y.length;b>v;v++)if(""===y[v].value){d=y.eq(v);break}var w=!!d,x=Rr(l.cloneNode(!1));x.val("?");var E,C=a(o.ngOptions,n,e),S=i[0].createDocumentFragment(),L=function(){w||n.prepend(d),n.val(""),d.prop("selected",!0),d.attr("selected",!0)},A=function(){w||d.remove()},T=function(){n.prepend(x),n.val("?"),x.prop("selected",!0),x.attr("selected",!0)},M=function(){x.remove()};m?(g.$isEmpty=function(e){return!e||0===e.length},f.writeValue=function(e){E.items.forEach(function(e){e.element.selected=!1}),e&&e.forEach(function(e){var t=E.getOptionFromViewValue(e);t&&(t.element.selected=!0)})},f.readValue=function(){var e=n.val()||[],t=[];return r(e,function(e){var n=E.selectValueMap[e];n&&!n.disabled&&t.push(E.getViewValueFromOption(n))}),t},C.trackBy&&e.$watchCollection(function(){return Gr(g.$viewValue)?g.$viewValue.map(function(e){return C.getTrackByValue(e)}):void 0},function(){g.$render()})):(f.writeValue=function(e){var t=E.getOptionFromViewValue(e);t?(n[0].value!==t.selectValue&&(M(),A(),n[0].value=t.selectValue,t.element.selected=!0),t.element.setAttribute("selected","selected")):null===e||w?(M(),L()):(A(),T())},f.readValue=function(){var e=E.selectValueMap[n.val()];return e&&!e.disabled?(A(),M(),E.getViewValueFromOption(e)):null},C.trackBy&&e.$watch(function(){return C.getTrackByValue(g.$viewValue)},function(){g.$render()})),w?(d.remove(),t(d)(e),d.removeClass("ng-scope")):d=Rr(l.cloneNode(!1)),n.empty(),p(),e.$watchCollection(C.getWatchables,p)}var l=e.document.createElement("option"),u=e.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(e,t,n,r){r[0].registerOption=d},post:s}}}],Da=["$locale","$interpolate","$log",function(e,t,n){var i=/{}/g,o=/^when(Minus)?(.+)$/;return{link:function(a,s,l){function u(e){s.text(e||"")}var c,h=l.count,p=l.$attr.when&&s.attr(l.$attr.when),f=l.offset||0,g=a.$eval(p)||{},m={},$=t.startSymbol(),y=t.endSymbol(),b=$+h+"-"+f+y,w=Wr.noop;r(l,function(e,t){var n=o.exec(t);if(n){var r=(n[1]?"-":"")+kr(n[2]);g[r]=s.attr(l.$attr[t])}}),r(g,function(e,n){m[n]=t(e.replace(i,b))}),a.$watch(h,function(t){var r=parseFloat(t),i=isNaN(r);if(i||r in g||(r=e.pluralCat(r-f)),r!==c&&!(i&&x(c)&&isNaN(c))){w();var o=m[r];v(o)?(null!=t&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+p),w=d,u()):w=a.$watch(o,u),c=r}})}}}],Oa=["$parse","$animate","$compile",function(e,i,o){var a="$$NG_REMOVED",s=t("ngRepeat"),l=function(e,t,n,r,i,o,a){e[n]=r,i&&(e[i]=o),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0===(1&t))},u=function(e){return e.clone[0]},c=function(e){return e.clone[e.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(t,h){var p=h.ngRepeat,d=o.$$createComment("end ngRepeat",p),f=p.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!f)throw s("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",p);var g=f[1],m=f[2],v=f[3],$=f[4];if(f=g.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/),!f)throw s("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",g);var y=f[3]||f[1],b=f[2];if(v&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(v)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(v)))throw s("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",v);var w,x,E,C,S={$id:Ye};return $?w=e($):(E=function(e,t){return Ye(t)},C=function(e){return e}),function(e,t,o,h,f){w&&(x=function(t,n,r){return b&&(S[b]=t),S[y]=n,S.$index=r,w(e,S)});var g=ge();e.$watchCollection(m,function(o){var h,m,$,w,S,L,A,T,M,k,I,N,D=t[0],O=ge();if(v&&(e[v]=o),n(o))M=o,T=x||E;else{T=x||C,M=[];for(var R in o)Mr.call(o,R)&&"$"!==R.charAt(0)&&M.push(R)}for(w=M.length,I=new Array(w),h=0;w>h;h++)if(S=o===M?h:M[h],L=o[S],A=T(S,L,h),g[A])k=g[A],delete g[A],O[A]=k,I[h]=k;else{if(O[A])throw r(I,function(e){e&&e.scope&&(g[e.id]=e)}),s("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",p,A,L);I[h]={id:A,scope:void 0,clone:void 0},O[A]=!0}for(var j in g){if(k=g[j],N=fe(k.clone),i.leave(N),N[0].parentNode)for(h=0,m=N.length;m>h;h++)N[h][a]=!0;k.scope.$destroy()}for(h=0;w>h;h++)if(S=o===M?h:M[h],L=o[S],k=I[h],k.scope){$=D;do $=$.nextSibling;while($&&$[a]);u(k)!=$&&i.move(fe(k.clone),null,D),D=c(k),l(k.scope,h,y,L,b,S,w)}else f(function(e,t){k.scope=t;var n=d.cloneNode(!1);e[e.length++]=n,i.enter(e,null,D),D=n,k.clone=e,O[k.id]=k,l(k.scope,h,y,L,b,S,w)});g=O})}}}}],Ra="ng-hide",ja="ng-hide-animate",Fa=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,Ra,{tempClasses:ja})})}}}],Pa=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,Ra,{tempClasses:ja})})}}}],_a=sr(function(e,t,n){e.$watch(n.ngStyle,function(e,n){n&&e!==n&&r(n,function(e,n){t.css(n,"")}),e&&t.css(e)},!0)}),Va=["$animate","$compile",function(e,t){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,i,o,a){var s=o.ngSwitch||o.on,l=[],u=[],c=[],h=[],p=function(e,t){return function(){e.splice(t,1)}};n.$watch(s,function(n){var i,o;for(i=0,o=c.length;o>i;++i)e.cancel(c[i]);for(c.length=0,i=0,o=h.length;o>i;++i){var s=fe(u[i].clone);h[i].$destroy();var d=c[i]=e.leave(s);d.then(p(c,i))}u.length=0,h.length=0,(l=a.cases["!"+n]||a.cases["?"])&&r(l,function(n){n.transclude(function(r,i){h.push(i);var o=n.element;r[r.length++]=t.$$createComment("end ngSwitchWhen");
var a={clone:r};u.push(a),e.enter(r,o.parent(),o)})})})}}}],Ba=sr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:t})}}),Ua=sr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:t})}}),Ha=t("ngTransclude"),Wa=sr({restrict:"EAC",link:function(e,t,n,r,i){function o(e){e.length&&(t.empty(),t.append(e))}if(n.ngTransclude===n.$attr.ngTransclude&&(n.ngTransclude=""),!i)throw Ha("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",Y(t));var a=n.ngTransclude||n.ngTranscludeSlot;i(o,null,a)}}),qa=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){if("text/ng-template"==n.type){var r=n.id,i=t[0].text;e.put(r,i)}}}}],Ga={$setViewValue:d,$render:d},za=["$element","$scope",function(t,n){var r=this,i=new Qe;r.ngModelCtrl=Ga,r.unknownOption=Rr(e.document.createElement("option")),r.renderUnknownOption=function(e){var n="? "+Ye(e)+" ?";r.unknownOption.val(n),t.prepend(r.unknownOption),t.val(n)},n.$on("$destroy",function(){r.renderUnknownOption=d}),r.removeUnknownOption=function(){r.unknownOption.parent()&&r.unknownOption.remove()},r.readValue=function(){return r.removeUnknownOption(),t.val()},r.writeValue=function(e){r.hasOption(e)?(r.removeUnknownOption(),t.val(e),""===e&&r.emptyOption.prop("selected",!0)):null==e&&r.emptyOption?(r.removeUnknownOption(),t.val("")):r.renderUnknownOption(e)},r.addOption=function(e,t){if(t[0].nodeType!==oi){pe(e,'"option value"'),""===e&&(r.emptyOption=t);var n=i.get(e)||0;i.put(e,n+1),r.ngModelCtrl.$render(),Lr(t)}},r.removeOption=function(e){var t=i.get(e);t&&(1===t?(i.remove(e),""===e&&(r.emptyOption=void 0)):i.put(e,t-1))},r.hasOption=function(e){return!!i.get(e)},r.registerOption=function(e,t,n,i,o){if(i){var a;n.$observe("value",function(e){$(a)&&r.removeOption(a),a=e,r.addOption(e,t)})}else o?e.$watch(o,function(e,i){n.$set("value",e),i!==e&&r.removeOption(i),r.addOption(e,t)}):r.addOption(n.value,t);t.on("$destroy",function(){r.removeOption(n.value),r.ngModelCtrl.$render()})}}],Ka=function(){function e(e,t,n,i){var o=i[1];if(o){var a=i[0];if(a.ngModelCtrl=o,t.on("change",function(){e.$apply(function(){o.$setViewValue(a.readValue())})}),n.multiple){a.readValue=function(){var e=[];return r(t.find("option"),function(t){t.selected&&e.push(t.value)}),e},a.writeValue=function(e){var n=new Qe(e);r(t.find("option"),function(e){e.selected=$(n.get(e.value))})};var s,l=NaN;e.$watch(function(){l!==o.$viewValue||B(s,o.$viewValue)||(s=V(o.$viewValue),o.$render()),l=o.$viewValue}),o.$isEmpty=function(e){return!e||0===e.length}}}}function t(e,t,n,r){var i=r[1];if(i){var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}return{restrict:"E",require:["select","?ngModel"],controller:za,priority:1,link:{pre:e,post:t}}},Xa=["$interpolate",function(e){return{restrict:"E",priority:100,compile:function(t,n){if($(n.value))var r=e(n.value,!0);else{var i=e(t.text(),!0);i||n.$set("value",t.text())}return function(e,t,n){var o="$selectController",a=t.parent(),s=a.data(o)||a.parent().data(o);s&&s.registerOption(e,t,n,r,i)}}}}],Ja=g({restrict:"E",terminal:!1}),Ya=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){r&&(n.required=!0,r.$validators.required=function(e,t){return!n.required||!r.$isEmpty(t)},n.$observe("required",function(){r.$validate()}))}}},Qa=function(){return{restrict:"A",require:"?ngModel",link:function(e,n,r,i){if(i){var o,a=r.ngPattern||r.pattern;r.$observe("pattern",function(e){if(w(e)&&e.length>0&&(e=new RegExp("^"+e+"$")),e&&!e.test)throw t("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",a,e,Y(n));o=e||void 0,i.$validate()}),i.$validators.pattern=function(e,t){return i.$isEmpty(t)||v(o)||o.test(t)}}}}},Za=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=-1;n.$observe("maxlength",function(e){var t=h(e);i=isNaN(t)?-1:t,r.$validate()}),r.$validators.maxlength=function(e,t){return 0>i||r.$isEmpty(t)||t.length<=i}}}}},es=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=0;n.$observe("minlength",function(e){i=h(e)||0,r.$validate()}),r.$validators.minlength=function(e,t){return r.$isEmpty(t)||t.length>=i}}}}};return e.angular.bootstrap?void(e.console&&console.log("WARNING: Tried to load angular more than once.")):(ue(),ye(Wr),Wr.module("ngLocale",[],["$provide",function(e){function t(e){e+="";var t=e.indexOf(".");return-1==t?0:e.length-t-1}function n(e,n){var r=n;void 0===r&&(r=Math.min(t(e),3));var i=Math.pow(10,r),o=(e*i|0)%i;return{v:r,f:o}}var r={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};e.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],STANDALONEMONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(e,t){var i=0|e,o=n(e,t);return 1==i&&0==o.v?r.ONE:r.OTHER}})}]),void Rr(e.document).ready(function(){ie(e.document,oe)}))}(window),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'),angular.module("chromeStorage",[]).factory("chromeStorage",function(e){var t=null;try{t=chrome.storage.local}catch(n){console.log("could not initiate chrome local storage: "+n)}var r=null,i={},o=function(n){var r=e.defer();return t.getBytesInUse(n,function(e){chrome.runtime.lasterror?(console.log("error retrieving bytes in use for keys "+n),r.reject(chrome.runtime.lasterror.message)):(console.log("retrieved bytes in use for keys "+n+": "+e),r.resolve(e))}),r.promise};return{getDebuggingTotalBytesInUse:function(){return r},getDebuggingCache:function(){return i},getDebuggingPercentUsed:function(){var e=r/t.QUOTA_BYTES;return e},getDebuggingSizeOf:function(e){return angular.toJson(i[e]).length},updateDebuggingCache:function(){var n=e.defer();t.get(null,function(e){chrome.runtime.lasterror?n.reject(chrome.runtime.lasterror.message):n.resolve(e)}),n.promise.then(function(e){i=e})},updateDebuggingTotalBytes:function(){o(null).then(function(e){console.log("total bytes in use: "+e),r=e})},clearCache:function(){t.clear(function(){chrome.runtime.lastError?console.error("error clearing local cache"+chrome.runtime.lastError):console.log("cache has been cleared")})},drop:function(e){t.remove(e,function(){chrome.runtime.lasterror&&console.error(chrome.runtime.lasterror.message)})},get:function(n){var r=e.defer();return t.get(n,function(e){var t=e[n];r.resolve(t)}),r.promise},getOrElse:function(n,r){var i=e.defer();return t.get(n,function(e){var o=e[n];void 0==o||null==o?r().then(function(e){o=e;var r={};r[n]=o,t.set(r,function(){chrome.runtime.lasterror&&console.error(chrome.runtime.lasterror.message)}),i.resolve(o)}):i.resolve(o)}),i.promise},set:function(e,n){var r={};r[e]=n,t.set(r,function(){chrome.runtime.lasterror&&console.error(chrome.runtime.lasterror.message)})},forceGet:function(n,r){var i=e.defer();return r().then(function(e){keyValue=e;var r={};r[n]=keyValue,t.set(r,function(){chrome.runtime.lasterror&&console.error(chrome.runtime.lasterror.message)}),i.resolve(keyValue)}),i.promise},getQuota:function(){return t.QUOTA_BYTES}}}),Array.prototype.push||(Array.prototype.push=function(){for(var e=0,t=arguments.length;t>e;e++)this[this.length]=arguments[e];return this.length}),Array.prototype.shift||(Array.prototype.shift=function(){if(this.length>0){for(var e=this[0],t=0,n=this.length-1;n>t;t++)this[t]=this[t+1];return this.length=this.length-1,e}}),Array.prototype.splice||(Array.prototype.splice=function(e,t){var n=this.slice(e+t),r=this.slice(e,e+t);this.length=e;for(var i=[],o=0,a=arguments.length;a>o;o++)i[o]=arguments[o];var s=i.length>2?n=i.slice(2).concat(n):n;for(o=0,a=s.length;a>o;o++)this.push(s[o]);return r});var log4javascript=function(){function isUndefined(e){return"undefined"==typeof e}function EventSupport(){}function Log4JavaScript(){}function toStr(e){return e&&e.toString?e.toString():String(e)}function getExceptionMessage(e){return e.message?e.message:e.description?e.description:toStr(e)}function getUrlFileName(e){var t=Math.max(e.lastIndexOf("/"),e.lastIndexOf("\\"));return e.substr(t+1)}function getExceptionStringRep(e){if(e){var t="Exception: "+getExceptionMessage(e);try{e.lineNumber&&(t+=" on line number "+e.lineNumber),e.fileName&&(t+=" in file "+getUrlFileName(e.fileName))}catch(n){logLog.warn("Unable to obtain file and line information for error")}return showStackTraces&&e.stack&&(t+=newLine+"Stack trace:"+newLine+e.stack),t}return null}function bool(e){return Boolean(e)}function trim(e){return e.replace(/^\s+/,"").replace(/\s+$/,"")}function splitIntoLines(e){var t=e.replace(/\r\n/g,"\n").replace(/\r/g,"\n");return t.split("\n")}function array_remove(e,t){for(var n=-1,r=0,i=e.length;i>r;r++)if(e[r]===t){n=r;break}return n>=0?(e.splice(n,1),!0):!1}function array_contains(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]==t)return!0;return!1}function extractBooleanFromParam(e,t){return isUndefined(e)?t:bool(e)}function extractStringFromParam(e,t){return isUndefined(e)?t:String(e)}function extractIntFromParam(e,t){if(isUndefined(e))return t;try{var n=parseInt(e,10);return isNaN(n)?t:n}catch(r){return logLog.warn("Invalid int param "+e,r),t}}function extractFunctionFromParam(e,t){return"function"==typeof e?e:t}function isError(e){return e instanceof Error}function getListenersPropertyName(e){return"__log4javascript_listeners__"+e}function addEvent(e,t,n,r,i){if(i=i?i:window,e.addEventListener)e.addEventListener(t,n,r);else if(e.attachEvent)e.attachEvent("on"+t,n);else{var o=getListenersPropertyName(t);e[o]||(e[o]=[],e["on"+t]=function(e){e=getEvent(e,i);for(var n,r=getListenersPropertyName(t),o=this[r].concat([]);n=o.shift();)n.call(this,e)}),e[o].push(n)}}function removeEvent(e,t,n,r){if(e.removeEventListener)e.removeEventListener(t,n,r);else if(e.detachEvent)e.detachEvent("on"+t,n);else{var i=getListenersPropertyName(t);e[i]&&array_remove(e[i],n)}}function getEvent(e,t){return t=t?t:window,e?e:t.event}function stopEventPropagation(e){e.stopPropagation?e.stopPropagation():"undefined"!=typeof e.cancelBubble&&(e.cancelBubble=!0),e.returnValue=!1}function handleError(e,t){logLog.error(e,t),log4javascript.dispatchEvent("error",{message:e,exception:t})}function Timer(e,t){this.name=e,this.level=isUndefined(t)?Level.INFO:t,this.start=new Date}function Logger(e){this.name=e,this.parent=null,this.children=[];var t=[],n=null,r=this.name===rootLoggerName,i=this.name===nullLoggerName,o=null,a=!1;this.addChild=function(e){this.children.push(e),e.parent=this,e.invalidateAppenderCache()};var s=!0;this.getAdditivity=function(){return s},this.setAdditivity=function(e){var t=s!=e;s=e,t&&this.invalidateAppenderCache()},this.addAppender=function(e){i?handleError("Logger.addAppender: you may not add an appender to the null logger"):e instanceof log4javascript.Appender?array_contains(t,e)||(t.push(e),e.setAddedToLogger(this),this.invalidateAppenderCache()):handleError("Logger.addAppender: appender supplied ('"+toStr(e)+"') is not a subclass of Appender")},this.removeAppender=function(e){array_remove(t,e),e.setRemovedFromLogger(this),this.invalidateAppenderCache()},this.removeAllAppenders=function(){var e=t.length;if(e>0){for(var n=0;e>n;n++)t[n].setRemovedFromLogger(this);t.length=0,this.invalidateAppenderCache()}},this.getEffectiveAppenders=function(){if(null===o||a){var e=r||!this.getAdditivity()?[]:this.parent.getEffectiveAppenders();o=e.concat(t),a=!1}return o},this.invalidateAppenderCache=function(){a=!0;for(var e=0,t=this.children.length;t>e;e++)this.children[e].invalidateAppenderCache()},this.log=function(e,t){if(enabled&&e.isGreaterOrEqual(this.getEffectiveLevel())){var n,r=t.length-1,i=t[r];t.length>1&&isError(i)&&(n=i,r--);for(var o=[],a=0;r>=a;a++)o[a]=t[a];var s=new LoggingEvent(this,new Date,e,o,n);this.callAppenders(s)}},this.callAppenders=function(e){for(var t=this.getEffectiveAppenders(),n=0,r=t.length;r>n;n++)t[n].doAppend(e)},this.setLevel=function(e){r&&null===e?handleError("Logger.setLevel: you cannot set the level of the root logger to null"):e instanceof Level?n=e:handleError("Logger.setLevel: level supplied to logger "+this.name+" is not an instance of log4javascript.Level")},this.getLevel=function(){return n},this.getEffectiveLevel=function(){for(var e=this;null!==e;e=e.parent){var t=e.getLevel();if(null!==t)return t}},this.group=function(e,t){if(enabled)for(var n=this.getEffectiveAppenders(),r=0,i=n.length;i>r;r++)n[r].group(e,t)},this.groupEnd=function(){if(enabled)for(var e=this.getEffectiveAppenders(),t=0,n=e.length;n>t;t++)e[t].groupEnd()};var l={};this.time=function(e,t){enabled&&(isUndefined(e)?handleError("Logger.time: a name for the timer must be supplied"):!t||t instanceof Level?l[e]=new Timer(e,t):handleError("Logger.time: level supplied to timer "+e+" is not an instance of log4javascript.Level"))},this.timeEnd=function(e){if(enabled)if(isUndefined(e))handleError("Logger.timeEnd: a name for the timer must be supplied");else if(l[e]){var t=l[e],n=t.getElapsedTime();this.log(t.level,["Timer "+toStr(e)+" completed in "+n+"ms"]),delete l[e]}else logLog.warn("Logger.timeEnd: no timer found with name "+e)},this.assert=function(e){if(enabled&&!e){for(var t=[],n=1,r=arguments.length;r>n;n++)t.push(arguments[n]);t=t.length>0?t:["Assertion Failure"],t.push(newLine),t.push(e),this.log(Level.ERROR,t)}},this.toString=function(){return"Logger["+this.name+"]"}}function SimpleLayout(){this.customFields=[]}function NullLayout(){this.customFields=[]}function XmlLayout(e){this.combineMessages=extractBooleanFromParam(e,!0),this.customFields=[]}function escapeNewLines(e){return e.replace(/\r\n|\r|\n/g,"\\r\\n")}function JsonLayout(e,t){this.readable=extractBooleanFromParam(e,!1),this.combineMessages=extractBooleanFromParam(t,!0),this.batchHeader=this.readable?"["+newLine:"[",this.batchFooter=this.readable?"]"+newLine:"]",this.batchSeparator=this.readable?","+newLine:",",this.setKeys(),this.colon=this.readable?": ":":",this.tab=this.readable?"	":"",this.lineBreak=this.readable?newLine:"",this.customFields=[]}function HttpPostDataLayout(){this.setKeys(),this.customFields=[],this.returnsPostData=!0}function formatObjectExpansion(e,t,n){function r(e,t,n){function o(e){for(var t=splitIntoLines(e),r=1,i=t.length;i>r;r++)t[r]=n+t[r];return t.join(newLine)}var a,s,l,u,c,h,p;if(n||(n=""),null===e)return"null";if("undefined"==typeof e)return"undefined";if("string"==typeof e)return o(e);if("object"==typeof e&&array_contains(i,e)){try{h=toStr(e)}catch(d){h="Error formatting property. Details: "+getExceptionStringRep(d)}return h+" [already expanded]"}if(e instanceof Array&&t>0){for(i.push(e),h="["+newLine,l=t-1,u=n+"  ",c=[],a=0,s=e.length;s>a;a++)try{p=r(e[a],l,u),c.push(u+p)}catch(d){c.push(u+"Error formatting array member. Details: "+getExceptionStringRep(d))}return h+=c.join(","+newLine)+newLine+n+"]"}if("[object Date]"==Object.prototype.toString.call(e))return e.toString();if("object"==typeof e&&t>0){i.push(e),h="{"+newLine,l=t-1,u=n+"  ",c=[];for(a in e)try{p=r(e[a],l,u),c.push(u+a+": "+p)}catch(d){c.push(u+a+": Error formatting property. Details: "+getExceptionStringRep(d))}return h+=c.join(","+newLine)+newLine+n+"}"}return o(toStr(e))}var i=[];return r(e,t,n)}function PatternLayout(e){e?this.pattern=e:this.pattern=PatternLayout.DEFAULT_CONVERSION_PATTERN,this.customFields=[]}function AlertAppender(){}function BrowserConsoleAppender(){}function isHttpRequestSuccessful(e){return isUndefined(e.status)||0===e.status||e.status>=200&&e.status<300||1223==e.status}function AjaxAppender(e,t){function n(e){return L?(handleError("AjaxAppender: configuration option '"+e+"' may not be set after the appender has been initialized"),!1):!0}function r(){if(h&&enabled){S=!0;var e;if(d)E.length>0?(e=E.shift(),l(o(e),r)):(S=!1,p&&a());else{for(;e=E.shift();)l(o(e));S=!1,p&&a()}}}function i(){var e=!1;if(h&&enabled){for(var t,n=c.getLayout().allowBatching()?f:1,i=[];t=x.shift();)i.push(t),x.length>=n&&(E.push(i),i=[]);i.length>0&&E.push(i),e=E.length>0,d=!1,p=!1,r()}return e}function o(e){for(var t,n=[],r="";t=e.shift();)n.push(c.getLayout().formatWithException(t));return r=1==e.length?n.join(""):c.getLayout().batchHeader+n.join(c.getLayout().batchSeparator)+c.getLayout().batchFooter,b==c.defaults.contentType&&(r=c.getLayout().returnsPostData?r:urlEncode($)+"="+urlEncode(r),r.length>0&&(r+="&"),r+="layout="+urlEncode(c.getLayout().toString())),r}function a(){window.setTimeout(r,g)}function s(){var e="AjaxAppender: could not create XMLHttpRequest object. AjaxAppender disabled";handleError(e),h=!1,v&&v(e)}function l(n,r){try{var i=getXmlHttp(s);if(h){t&&withCredentialsSupported&&(i.withCredentials=!0),i.onreadystatechange=function(){if(4==i.readyState){if(isHttpRequestSuccessful(i))m&&m(i),r&&r(i);else{var t="AjaxAppender.append: XMLHttpRequest request to URL "+e+" returned status code "+i.status;handleError(t),v&&v(t)}i.onreadystatechange=emptyFunction,i=null}},i.open("POST",e,!0);try{for(var o,a=0;o=C[a++];)i.setRequestHeader(o.name,o.value);i.setRequestHeader("Content-Type",b)}catch(l){var u="AjaxAppender.append: your browser's XMLHttpRequest implementation does not support setRequestHeader, therefore cannot post data. AjaxAppender disabled";return handleError(u),h=!1,void(v&&v(u))}i.send(n)}}catch(c){var p="AjaxAppender.append: error sending log message to "+e;handleError(p,c),h=!1,v&&v(p+". Details: "+getExceptionStringRep(c))}}function u(){if(L=!0,y){var e=window.onbeforeunload;window.onbeforeunload=function(){return e&&e(),i()?"Sending log messages":void 0}}p&&a()}var c=this,h=!0;e||(handleError("AjaxAppender: URL must be specified in constructor"),h=!1);var p=this.defaults.timed,d=this.defaults.waitForResponse,f=this.defaults.batchSize,g=this.defaults.timerInterval,m=this.defaults.requestSuccessCallback,v=this.defaults.failCallback,$=this.defaults.postVarName,y=this.defaults.sendAllOnUnload,b=this.defaults.contentType,w=null,x=[],E=[],C=[],S=!1,L=!1;this.getSessionId=function(){return w},this.setSessionId=function(e){w=extractStringFromParam(e,null),this.layout.setCustomField("sessionid",w)},this.setLayout=function(e){n("layout")&&(this.layout=e,null!==w&&this.setSessionId(w))},this.isTimed=function(){return p},this.setTimed=function(e){n("timed")&&(p=bool(e))},this.getTimerInterval=function(){return g},this.setTimerInterval=function(e){n("timerInterval")&&(g=extractIntFromParam(e,g))},this.isWaitForResponse=function(){return d},this.setWaitForResponse=function(e){n("waitForResponse")&&(d=bool(e))},this.getBatchSize=function(){return f},this.setBatchSize=function(e){n("batchSize")&&(f=extractIntFromParam(e,f))},this.isSendAllOnUnload=function(){return y},this.setSendAllOnUnload=function(e){n("sendAllOnUnload")&&(y=extractBooleanFromParam(e,y))},this.setRequestSuccessCallback=function(e){m=extractFunctionFromParam(e,m)},this.setFailCallback=function(e){v=extractFunctionFromParam(e,v)},this.getPostVarName=function(){return $},this.setPostVarName=function(e){n("postVarName")&&($=extractStringFromParam(e,$))},this.getHeaders=function(){return C},this.addHeader=function(e,t){"content-type"==e.toLowerCase()?b=t:C.push({name:e,value:t})},this.sendAll=r,this.sendAllRemaining=i,this.append=function(e){if(h){L||u(),x.push(e);var t=this.getLayout().allowBatching()?f:1;if(x.length>=t){for(var n,i=[];n=x.shift();)i.push(n);E.push(i),p||d&&(!d||S)||r()}}}}function setCookie(e,t,n,r){var i;if(r=r?"; path="+r:"",n){var o=new Date;o.setTime(o.getTime()+24*n*60*60*1e3),i="; expires="+o.toGMTString()}else i="";document.cookie=escape(e)+"="+escape(t)+i+r}function getCookie(e){for(var t=escape(e)+"=",n=document.cookie.split(";"),r=0,i=n.length;i>r;r++){for(var o=n[r];" "===o.charAt(0);)o=o.substring(1,o.length);if(0===o.indexOf(t))return unescape(o.substring(t.length,o.length))}return null}function getBaseUrl(){for(var e=document.getElementsByTagName("script"),t=0,n=e.length;n>t;++t)if(-1!=e[t].src.indexOf("log4javascript")){var r=e[t].src.lastIndexOf("/");return-1==r?"":e[t].src.substr(0,r+1)}return null}function isLoaded(e){try{return bool(e.loaded)}catch(t){return!1}}function padWithSpaces(e,t){if(e.length<t){for(var n=[],r=Math.max(0,t-e.length),i=0;r>i;i++)n[i]=" ";e+=n.join("")}return e}EventSupport.prototype={eventTypes:[],eventListeners:{},setEventTypes:function(e){if(e instanceof Array){this.eventTypes=e,this.eventListeners={};for(var t=0,n=this.eventTypes.length;n>t;t++)this.eventListeners[this.eventTypes[t]]=[]}else handleError("log4javascript.EventSupport ["+this+"]: setEventTypes: eventTypes parameter must be an Array")},addEventListener:function(e,t){"function"==typeof t?(array_contains(this.eventTypes,e)||handleError("log4javascript.EventSupport ["+this+"]: addEventListener: no event called '"+e+"'"),this.eventListeners[e].push(t)):handleError("log4javascript.EventSupport ["+this+"]: addEventListener: listener must be a function")},removeEventListener:function(e,t){"function"==typeof t?(array_contains(this.eventTypes,e)||handleError("log4javascript.EventSupport ["+this+"]: removeEventListener: no event called '"+e+"'"),array_remove(this.eventListeners[e],t)):handleError("log4javascript.EventSupport ["+this+"]: removeEventListener: listener must be a function")},dispatchEvent:function(e,t){if(array_contains(this.eventTypes,e))for(var n=this.eventListeners[e],r=0,i=n.length;i>r;r++)n[r](this,e,t);else handleError("log4javascript.EventSupport ["+this+"]: dispatchEvent: no event called '"+e+"'")}};var applicationStartDate=new Date,uniqueId="log4javascript_"+applicationStartDate.getTime()+"_"+Math.floor(1e8*Math.random()),emptyFunction=function(){},newLine="\r\n",pageLoaded=!1;Log4JavaScript.prototype=new EventSupport,log4javascript=new Log4JavaScript,log4javascript.version="1.4.9",log4javascript.edition="log4javascript";var urlEncode="undefined"!=typeof window.encodeURIComponent?function(e){return encodeURIComponent(e)}:function(e){return escape(e).replace(/\+/g,"%2B").replace(/"/g,"%22").replace(/'/g,"%27").replace(/\//g,"%2F").replace(/=/g,"%3D")},urlDecode="undefined"!=typeof window.decodeURIComponent?function(e){return decodeURIComponent(e)}:function(e){return unescape(e).replace(/%2B/g,"+").replace(/%22/g,'"').replace(/%27/g,"'").replace(/%2F/g,"/").replace(/%3D/g,"=")};Function.prototype.apply||(Function.prototype.apply=function(obj,args){var methodName="__apply__";"undefined"!=typeof obj[methodName]&&(methodName+=String(Math.random()).substr(2)),obj[methodName]=this;for(var argsStrings=[],i=0,len=args.length;len>i;i++)argsStrings[i]="args["+i+"]";var script="obj."+methodName+"("+argsStrings.join(",")+")",returnValue=eval(script);return delete obj[methodName],returnValue}),Function.prototype.call||(Function.prototype.call=function(e){for(var t=[],n=1,r=arguments.length;r>n;n++)t[n-1]=arguments[n];return this.apply(e,t)});var logLog={quietMode:!1,debugMessages:[],setQuietMode:function(e){this.quietMode=bool(e)},numberOfErrors:0,alertAllErrors:!1,setAlertAllErrors:function(e){this.alertAllErrors=e},debug:function(e){this.debugMessages.push(e)},displayDebug:function(){alert(this.debugMessages.join(newLine))},warn:function(e,t){},error:function(e,t){if((1==++this.numberOfErrors||this.alertAllErrors)&&!this.quietMode){var n="log4javascript error: "+e;t&&(n+=newLine+newLine+"Original error: "+getExceptionStringRep(t)),alert(n)}}};log4javascript.logLog=logLog,log4javascript.setEventTypes(["load","error"]),log4javascript.handleError=handleError;var enabled=!("undefined"!=typeof log4javascript_disabled&&log4javascript_disabled);log4javascript.setEnabled=function(e){enabled=bool(e)},log4javascript.isEnabled=function(){return enabled};var useTimeStampsInMilliseconds=!0;log4javascript.setTimeStampsInMilliseconds=function(e){useTimeStampsInMilliseconds=bool(e)},log4javascript.isTimeStampsInMilliseconds=function(){return useTimeStampsInMilliseconds},log4javascript.evalInScope=function(expr){return eval(expr)};var showStackTraces=!1;log4javascript.setShowStackTraces=function(e){showStackTraces=bool(e)};var Level=function(e,t){this.level=e,this.name=t};Level.prototype={toString:function(){return this.name},equals:function(e){return this.level==e.level},isGreaterOrEqual:function(e){return this.level>=e.level}},Level.ALL=new Level(Number.MIN_VALUE,"ALL"),Level.TRACE=new Level(1e4,"TRACE"),Level.DEBUG=new Level(2e4,"DEBUG"),Level.INFO=new Level(3e4,"INFO"),Level.WARN=new Level(4e4,"WARN"),Level.ERROR=new Level(5e4,"ERROR"),Level.FATAL=new Level(6e4,"FATAL"),Level.OFF=new Level(Number.MAX_VALUE,"OFF"),log4javascript.Level=Level,Timer.prototype.getElapsedTime=function(){return(new Date).getTime()-this.start.getTime()};var anonymousLoggerName="[anonymous]",defaultLoggerName="[default]",nullLoggerName="[null]",rootLoggerName="root";Logger.prototype={trace:function(){this.log(Level.TRACE,arguments)},debug:function(){this.log(Level.DEBUG,arguments)},info:function(){this.log(Level.INFO,arguments)},warn:function(){this.log(Level.WARN,arguments)},error:function(){this.log(Level.ERROR,arguments)},fatal:function(){this.log(Level.FATAL,arguments)},isEnabledFor:function(e){return e.isGreaterOrEqual(this.getEffectiveLevel())},isTraceEnabled:function(){return this.isEnabledFor(Level.TRACE)},isDebugEnabled:function(){return this.isEnabledFor(Level.DEBUG)},isInfoEnabled:function(){return this.isEnabledFor(Level.INFO)},isWarnEnabled:function(){return this.isEnabledFor(Level.WARN)},isErrorEnabled:function(){return this.isEnabledFor(Level.ERROR)},isFatalEnabled:function(){return this.isEnabledFor(Level.FATAL)}},Logger.prototype.trace.isEntryPoint=!0,Logger.prototype.debug.isEntryPoint=!0,Logger.prototype.info.isEntryPoint=!0,Logger.prototype.warn.isEntryPoint=!0,Logger.prototype.error.isEntryPoint=!0,Logger.prototype.fatal.isEntryPoint=!0;var loggers={},loggerNames=[],ROOT_LOGGER_DEFAULT_LEVEL=Level.DEBUG,rootLogger=new Logger(rootLoggerName);rootLogger.setLevel(ROOT_LOGGER_DEFAULT_LEVEL),log4javascript.getRootLogger=function(){return rootLogger},log4javascript.getLogger=function(e){if("string"!=typeof e&&(e=anonymousLoggerName,logLog.warn("log4javascript.getLogger: non-string logger name "+toStr(e)+" supplied, returning anonymous logger")),e==rootLoggerName&&handleError("log4javascript.getLogger: root logger may not be obtained by name"),!loggers[e]){var t=new Logger(e);loggers[e]=t,loggerNames.push(e);var n,r=e.lastIndexOf(".");if(r>-1){var i=e.substring(0,r);n=log4javascript.getLogger(i)}else n=rootLogger;n.addChild(t)}return loggers[e]};var defaultLogger=null;log4javascript.getDefaultLogger=function(){if(!defaultLogger){defaultLogger=log4javascript.getLogger(defaultLoggerName);var e=new log4javascript.PopUpAppender;defaultLogger.addAppender(e)}return defaultLogger};var nullLogger=null;log4javascript.getNullLogger=function(){return nullLogger||(nullLogger=new Logger(nullLoggerName),nullLogger.setLevel(Level.OFF)),nullLogger},log4javascript.resetConfiguration=function(){rootLogger.setLevel(ROOT_LOGGER_DEFAULT_LEVEL),loggers={}};var LoggingEvent=function(e,t,n,r,i){this.logger=e,this.timeStamp=t,this.timeStampInMilliseconds=t.getTime(),this.timeStampInSeconds=Math.floor(this.timeStampInMilliseconds/1e3),this.milliseconds=this.timeStamp.getMilliseconds(),this.level=n,this.messages=r,this.exception=i};LoggingEvent.prototype={getThrowableStrRep:function(){return this.exception?getExceptionStringRep(this.exception):""},getCombinedMessages:function(){return 1==this.messages.length?this.messages[0]:this.messages.join(newLine)},toString:function(){return"LoggingEvent["+this.level+"]"}},log4javascript.LoggingEvent=LoggingEvent;var Layout=function(){};Layout.prototype={defaults:{loggerKey:"logger",timeStampKey:"timestamp",millisecondsKey:"milliseconds",levelKey:"level",messageKey:"message",exceptionKey:"exception",urlKey:"url"},loggerKey:"logger",timeStampKey:"timestamp",millisecondsKey:"milliseconds",levelKey:"level",messageKey:"message",exceptionKey:"exception",urlKey:"url",batchHeader:"",batchFooter:"",batchSeparator:"",returnsPostData:!1,overrideTimeStampsSetting:!1,useTimeStampsInMilliseconds:null,format:function(){handleError("Layout.format: layout supplied has no format() method")},ignoresThrowable:function(){handleError("Layout.ignoresThrowable: layout supplied has no ignoresThrowable() method")},getContentType:function(){return"text/plain"},allowBatching:function(){return!0},setTimeStampsInMilliseconds:function(e){this.overrideTimeStampsSetting=!0,this.useTimeStampsInMilliseconds=bool(e)},isTimeStampsInMilliseconds:function(){return this.overrideTimeStampsSetting?this.useTimeStampsInMilliseconds:useTimeStampsInMilliseconds},getTimeStampValue:function(e){return this.isTimeStampsInMilliseconds()?e.timeStampInMilliseconds:e.timeStampInSeconds},getDataValues:function(e,t){var n=[[this.loggerKey,e.logger.name],[this.timeStampKey,this.getTimeStampValue(e)],[this.levelKey,e.level.name],[this.urlKey,window.location.href],[this.messageKey,t?e.getCombinedMessages():e.messages]];if(this.isTimeStampsInMilliseconds()||n.push([this.millisecondsKey,e.milliseconds]),e.exception&&n.push([this.exceptionKey,getExceptionStringRep(e.exception)]),this.hasCustomFields())for(var r=0,i=this.customFields.length;i>r;r++){var o=this.customFields[r].value;"function"==typeof o&&(o=o(this,e)),n.push([this.customFields[r].name,o])}return n},setKeys:function(e,t,n,r,i,o,a){this.loggerKey=extractStringFromParam(e,this.defaults.loggerKey),this.timeStampKey=extractStringFromParam(t,this.defaults.timeStampKey),this.levelKey=extractStringFromParam(n,this.defaults.levelKey),this.messageKey=extractStringFromParam(r,this.defaults.messageKey),this.exceptionKey=extractStringFromParam(i,this.defaults.exceptionKey),this.urlKey=extractStringFromParam(o,this.defaults.urlKey),this.millisecondsKey=extractStringFromParam(a,this.defaults.millisecondsKey)},setCustomField:function(e,t){for(var n=!1,r=0,i=this.customFields.length;i>r;r++)this.customFields[r].name===e&&(this.customFields[r].value=t,n=!0);n||this.customFields.push({name:e,value:t})},hasCustomFields:function(){return this.customFields.length>0},formatWithException:function(e){var t=this.format(e);return e.exception&&this.ignoresThrowable()&&(t+=e.getThrowableStrRep()),t},toString:function(){handleError("Layout.toString: all layouts must override this method")}},log4javascript.Layout=Layout;var Appender=function(){};Appender.prototype=new EventSupport,Appender.prototype.layout=new PatternLayout,Appender.prototype.threshold=Level.ALL,Appender.prototype.loggers=[],Appender.prototype.doAppend=function(e){enabled&&e.level.level>=this.threshold.level&&this.append(e);
},Appender.prototype.append=function(e){},Appender.prototype.setLayout=function(e){e instanceof Layout?this.layout=e:handleError("Appender.setLayout: layout supplied to "+this.toString()+" is not a subclass of Layout")},Appender.prototype.getLayout=function(){return this.layout},Appender.prototype.setThreshold=function(e){e instanceof Level?this.threshold=e:handleError("Appender.setThreshold: threshold supplied to "+this.toString()+" is not a subclass of Level")},Appender.prototype.getThreshold=function(){return this.threshold},Appender.prototype.setAddedToLogger=function(e){this.loggers.push(e)},Appender.prototype.setRemovedFromLogger=function(e){array_remove(this.loggers,e)},Appender.prototype.group=emptyFunction,Appender.prototype.groupEnd=emptyFunction,Appender.prototype.toString=function(){handleError("Appender.toString: all appenders must override this method")},log4javascript.Appender=Appender,SimpleLayout.prototype=new Layout,SimpleLayout.prototype.format=function(e){return e.level.name+" - "+e.getCombinedMessages()},SimpleLayout.prototype.ignoresThrowable=function(){return!0},SimpleLayout.prototype.toString=function(){return"SimpleLayout"},log4javascript.SimpleLayout=SimpleLayout,NullLayout.prototype=new Layout,NullLayout.prototype.format=function(e){return e.messages},NullLayout.prototype.ignoresThrowable=function(){return!0},NullLayout.prototype.formatWithException=function(e){var t=e.messages,n=e.exception;return n?t.concat([n]):t},NullLayout.prototype.toString=function(){return"NullLayout"},log4javascript.NullLayout=NullLayout,XmlLayout.prototype=new Layout,XmlLayout.prototype.isCombinedMessages=function(){return this.combineMessages},XmlLayout.prototype.getContentType=function(){return"text/xml"},XmlLayout.prototype.escapeCdata=function(e){return e.replace(/\]\]>/,"]]>]]&gt;<![CDATA[")},XmlLayout.prototype.format=function(e){function t(e){return e="string"==typeof e?e:toStr(e),"<log4javascript:message><![CDATA["+i.escapeCdata(e)+"]]></log4javascript:message>"}var n,r,i=this,o='<log4javascript:event logger="'+e.logger.name+'" timestamp="'+this.getTimeStampValue(e)+'"';if(this.isTimeStampsInMilliseconds()||(o+=' milliseconds="'+e.milliseconds+'"'),o+=' level="'+e.level.name+'">'+newLine,this.combineMessages)o+=t(e.getCombinedMessages());else{for(o+="<log4javascript:messages>"+newLine,n=0,r=e.messages.length;r>n;n++)o+=t(e.messages[n])+newLine;o+="</log4javascript:messages>"+newLine}if(this.hasCustomFields())for(n=0,r=this.customFields.length;r>n;n++)o+='<log4javascript:customfield name="'+this.customFields[n].name+'"><![CDATA['+this.customFields[n].value.toString()+"]]></log4javascript:customfield>"+newLine;return e.exception&&(o+="<log4javascript:exception><![CDATA["+getExceptionStringRep(e.exception)+"]]></log4javascript:exception>"+newLine),o+="</log4javascript:event>"+newLine+newLine},XmlLayout.prototype.ignoresThrowable=function(){return!1},XmlLayout.prototype.toString=function(){return"XmlLayout"},log4javascript.XmlLayout=XmlLayout,JsonLayout.prototype=new Layout,JsonLayout.prototype.isReadable=function(){return this.readable},JsonLayout.prototype.isCombinedMessages=function(){return this.combineMessages},JsonLayout.prototype.format=function(e){function t(e,n,r){var o,a=typeof e;if(e instanceof Date)o=String(e.getTime());else if(r&&e instanceof Array){o="["+i.lineBreak;for(var s=0,l=e.length;l>s;s++){var u=n+i.tab;o+=u+t(e[s],u,!1),s<e.length-1&&(o+=","),o+=i.lineBreak}o+=n+"]"}else o="number"!==a&&"boolean"!==a?'"'+escapeNewLines(toStr(e).replace(/\"/g,'\\"'))+'"':e;return o}var n,r,i=this,o=this.getDataValues(e,this.combineMessages),a="{"+this.lineBreak;for(n=0,r=o.length-1;r>=n;n++)a+=this.tab+'"'+o[n][0]+'"'+this.colon+t(o[n][1],this.tab,!0),r>n&&(a+=","),a+=this.lineBreak;return a+="}"+this.lineBreak},JsonLayout.prototype.ignoresThrowable=function(){return!1},JsonLayout.prototype.toString=function(){return"JsonLayout"},JsonLayout.prototype.getContentType=function(){return"application/json"},log4javascript.JsonLayout=JsonLayout,HttpPostDataLayout.prototype=new Layout,HttpPostDataLayout.prototype.allowBatching=function(){return!1},HttpPostDataLayout.prototype.format=function(e){for(var t=this.getDataValues(e),n=[],r=0,i=t.length;i>r;r++){var o=t[r][1]instanceof Date?String(t[r][1].getTime()):t[r][1];n.push(urlEncode(t[r][0])+"="+urlEncode(o))}return n.join("&")},HttpPostDataLayout.prototype.ignoresThrowable=function(e){return!1},HttpPostDataLayout.prototype.toString=function(){return"HttpPostDataLayout"},log4javascript.HttpPostDataLayout=HttpPostDataLayout;var SimpleDateFormat;!function(){var e=/('[^']*')|(G+|y+|M+|w+|W+|D+|d+|F+|E+|a+|H+|k+|K+|h+|m+|s+|S+|Z+)|([a-zA-Z]+)|([^a-zA-Z']+)/,t=["January","February","March","April","May","June","July","August","September","October","November","December"],n=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],r=0,i=1,o=2,a=3,s=4,l=5,u={G:r,y:a,M:s,w:o,W:o,D:o,d:o,F:o,E:i,a:r,H:o,k:o,K:o,h:o,m:o,s:o,S:o,Z:l},c=864e5,h=7*c,p=1,d=function(e,t,n){var r=new Date(e,t,n,0,0,0);return r.setMilliseconds(0),r};Date.prototype.getDifference=function(e){return this.getTime()-e.getTime()},Date.prototype.isBefore=function(e){return this.getTime()<e.getTime()},Date.prototype.getUTCTime=function(){return Date.UTC(this.getFullYear(),this.getMonth(),this.getDate(),this.getHours(),this.getMinutes(),this.getSeconds(),this.getMilliseconds())},Date.prototype.getTimeSince=function(e){return this.getUTCTime()-e.getUTCTime()},Date.prototype.getPreviousSunday=function(){var e=new Date(this.getFullYear(),this.getMonth(),this.getDate(),12,0,0),t=new Date(e.getTime()-this.getDay()*c);return d(t.getFullYear(),t.getMonth(),t.getDate())},Date.prototype.getWeekInYear=function(e){isUndefined(this.minimalDaysInFirstWeek)&&(e=p);var t=this.getPreviousSunday(),n=d(this.getFullYear(),0,1),r=t.isBefore(n)?0:1+Math.floor(t.getTimeSince(n)/h),i=7-n.getDay(),o=r;return e>i&&o--,o},Date.prototype.getWeekInMonth=function(e){isUndefined(this.minimalDaysInFirstWeek)&&(e=p);var t=this.getPreviousSunday(),n=d(this.getFullYear(),this.getMonth(),1),r=t.isBefore(n)?0:1+Math.floor(t.getTimeSince(n)/h),i=7-n.getDay(),o=r;return i>=e&&o++,o},Date.prototype.getDayInYear=function(){var e=d(this.getFullYear(),0,1);return 1+Math.floor(this.getTimeSince(e)/c)},SimpleDateFormat=function(e){this.formatString=e},SimpleDateFormat.prototype.setMinimalDaysInFirstWeek=function(e){this.minimalDaysInFirstWeek=e},SimpleDateFormat.prototype.getMinimalDaysInFirstWeek=function(){return isUndefined(this.minimalDaysInFirstWeek)?p:this.minimalDaysInFirstWeek};var f=function(e,t){for(;e.length<t;)e="0"+e;return e},g=function(e,t,n){return t>=4?e:e.substr(0,Math.max(n,t))},m=function(e,t){var n=""+e;return f(n,t)};SimpleDateFormat.prototype.format=function(c){for(var h,p="",d=this.formatString;h=e.exec(d);){var v=h[1],$=h[2],y=h[3],b=h[4];if(v)p+="''"==v?"'":v.substring(1,v.length-1);else if(y);else if(b)p+=b;else if($){var w=$.charAt(0),x=$.length,E="";switch(w){case"G":E="AD";break;case"y":E=c.getFullYear();break;case"M":E=c.getMonth();break;case"w":E=c.getWeekInYear(this.getMinimalDaysInFirstWeek());break;case"W":E=c.getWeekInMonth(this.getMinimalDaysInFirstWeek());break;case"D":E=c.getDayInYear();break;case"d":E=c.getDate();break;case"F":E=1+Math.floor((c.getDate()-1)/7);break;case"E":E=n[c.getDay()];break;case"a":E=c.getHours()>=12?"PM":"AM";break;case"H":E=c.getHours();break;case"k":E=c.getHours()||24;break;case"K":E=c.getHours()%12;break;case"h":E=c.getHours()%12||12;break;case"m":E=c.getMinutes();break;case"s":E=c.getSeconds();break;case"S":E=c.getMilliseconds();break;case"Z":E=c.getTimezoneOffset()}switch(u[w]){case r:p+=g(E,x,2);break;case i:p+=g(E,x,3);break;case o:p+=m(E,x);break;case a:if(3>=x){var C=""+E;p+=C.substr(2,2)}else p+=m(E,x);break;case s:p+=x>=3?g(t[E],x,x):m(E+1,x);break;case l:var S=E>0,L=S?"-":"+",A=Math.abs(E),T=""+Math.floor(A/60);T=f(T,2);var M=""+A%60;M=f(M,2),p+=L+T+M}}d=d.substr(h.index+h[0].length)}return p}}(),log4javascript.SimpleDateFormat=SimpleDateFormat,PatternLayout.TTCC_CONVERSION_PATTERN="%r %p %c - %m%n",PatternLayout.DEFAULT_CONVERSION_PATTERN="%m%n",PatternLayout.ISO8601_DATEFORMAT="yyyy-MM-dd HH:mm:ss,SSS",PatternLayout.DATETIME_DATEFORMAT="dd MMM yyyy HH:mm:ss,SSS",PatternLayout.ABSOLUTETIME_DATEFORMAT="HH:mm:ss,SSS",PatternLayout.prototype=new Layout,PatternLayout.prototype.format=function(e){for(var t,n=/%(-?[0-9]+)?(\.?[0-9]+)?([acdfmMnpr%])(\{([^\}]+)\})?|([^%]+)/,r="",i=this.pattern;t=n.exec(i);){var o=t[0],a=t[1],s=t[2],l=t[3],u=t[5],c=t[6];if(c)r+=""+c;else{var h="";switch(l){case"a":case"m":var p=0;u&&(p=parseInt(u,10),isNaN(p)&&(handleError("PatternLayout.format: invalid specifier '"+u+"' for conversion character '"+l+"' - should be a number"),p=0));for(var d="a"===l?e.messages[0]:e.messages,f=0,g=d.length;g>f;f++)f>0&&" "!==h.charAt(h.length-1)&&(h+=" "),h+=0===p?d[f]:formatObjectExpansion(d[f],p);break;case"c":var m=e.logger.name;if(u){var v=parseInt(u,10),$=e.logger.name.split(".");h=v>=$.length?m:$.slice($.length-v).join(".")}else h=m;break;case"d":var y=PatternLayout.ISO8601_DATEFORMAT;u&&(y=u,"ISO8601"==y?y=PatternLayout.ISO8601_DATEFORMAT:"ABSOLUTE"==y?y=PatternLayout.ABSOLUTETIME_DATEFORMAT:"DATE"==y&&(y=PatternLayout.DATETIME_DATEFORMAT)),h=new SimpleDateFormat(y).format(e.timeStamp);break;case"f":if(this.hasCustomFields()){var b=0;u&&(b=parseInt(u,10),isNaN(b)?handleError("PatternLayout.format: invalid specifier '"+u+"' for conversion character 'f' - should be a number"):0===b?handleError("PatternLayout.format: invalid specifier '"+u+"' for conversion character 'f' - must be greater than zero"):b>this.customFields.length?handleError("PatternLayout.format: invalid specifier '"+u+"' for conversion character 'f' - there aren't that many custom fields"):b-=1);var w=this.customFields[b].value;"function"==typeof w&&(w=w(this,e)),h=w}break;case"n":h=newLine;break;case"p":h=e.level.name;break;case"r":h=""+e.timeStamp.getDifference(applicationStartDate);break;case"%":h="%";break;default:h=o}var x;if(s){x=parseInt(s.substr(1),10);var E=h.length;E>x&&(h=h.substring(E-x,E))}if(a)if("-"==a.charAt(0))for(x=parseInt(a.substr(1),10);h.length<x;)h+=" ";else for(x=parseInt(a,10);h.length<x;)h=" "+h;r+=h}i=i.substr(t.index+t[0].length)}return r},PatternLayout.prototype.ignoresThrowable=function(){return!0},PatternLayout.prototype.toString=function(){return"PatternLayout"},log4javascript.PatternLayout=PatternLayout,AlertAppender.prototype=new Appender,AlertAppender.prototype.layout=new SimpleLayout,AlertAppender.prototype.append=function(e){alert(this.getLayout().formatWithException(e))},AlertAppender.prototype.toString=function(){return"AlertAppender"},log4javascript.AlertAppender=AlertAppender,BrowserConsoleAppender.prototype=new log4javascript.Appender,BrowserConsoleAppender.prototype.layout=new NullLayout,BrowserConsoleAppender.prototype.threshold=Level.DEBUG,BrowserConsoleAppender.prototype.append=function(e){var t,n=this,r=function(){var t=n.getLayout().formatWithException(e);return"string"==typeof t?[t]:t};if((t=window.console)&&t.log){var i,o=r();i=t.debug&&Level.DEBUG.isGreaterOrEqual(e.level)?"debug":t.info&&Level.INFO.equals(e.level)?"info":t.warn&&Level.WARN.equals(e.level)?"warn":t.error&&e.level.isGreaterOrEqual(Level.ERROR)?"error":"log",t[i].apply?t[i].apply(t,o):t[i](o)}else"undefined"!=typeof opera&&opera.postError&&opera.postError(r())},BrowserConsoleAppender.prototype.group=function(e){window.console&&window.console.group&&window.console.group(e)},BrowserConsoleAppender.prototype.groupEnd=function(){window.console&&window.console.groupEnd&&window.console.groupEnd()},BrowserConsoleAppender.prototype.toString=function(){return"BrowserConsoleAppender"},log4javascript.BrowserConsoleAppender=BrowserConsoleAppender;var xhrFactory=function(){return new XMLHttpRequest},xmlHttpFactories=[xhrFactory,function(){return new ActiveXObject("Msxml2.XMLHTTP")},function(){return new ActiveXObject("Microsoft.XMLHTTP")}],withCredentialsSupported=!1,getXmlHttp=function(e){for(var t,n=null,r=0,i=xmlHttpFactories.length;i>r;r++){t=xmlHttpFactories[r];try{return n=t(),withCredentialsSupported=t==xhrFactory&&"withCredentials"in n,getXmlHttp=t,n}catch(o){}}e?e():handleError("getXmlHttp: unable to obtain XMLHttpRequest object")};AjaxAppender.prototype=new Appender,AjaxAppender.prototype.defaults={waitForResponse:!1,timed:!1,timerInterval:1e3,batchSize:1,sendAllOnUnload:!1,requestSuccessCallback:null,failCallback:null,postVarName:"data",contentType:"application/x-www-form-urlencoded"},AjaxAppender.prototype.layout=new HttpPostDataLayout,AjaxAppender.prototype.toString=function(){return"AjaxAppender"},log4javascript.AjaxAppender=AjaxAppender;var ConsoleAppender;if(function(){function e(e,t,n,r,i){this.create(!1,null,e,t,n,r,i,this.defaults.focusPopUp)}function t(e,t,n,r,i,o){this.create(!0,e,t,n,r,i,o,!1)}var n=function(){return['<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">','<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">',"<head>","<title>log4javascript</title>",'<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />',"<!-- Make IE8 behave like IE7, having gone to all the trouble of making IE work -->",'<meta http-equiv="X-UA-Compatible" content="IE=7" />','<script type="text/javascript">var isIe = false, isIePre7 = false;</script>','<!--[if IE]><script type="text/javascript">isIe = true</script><![endif]-->','<!--[if lt IE 7]><script type="text/javascript">isIePre7 = true</script><![endif]-->','<script type="text/javascript">',"//<![CDATA[","var loggingEnabled=true;var logQueuedEventsTimer=null;var logEntries=[];var logEntriesAndSeparators=[];var logItems=[];var renderDelay=100;var unrenderedLogItemsExist=false;var rootGroup,currentGroup=null;var loaded=false;var currentLogItem=null;var logMainContainer;function copyProperties(obj,props){for(var i in props){obj[i]=props[i];}}","function LogItem(){}","LogItem.prototype={mainContainer:null,wrappedContainer:null,unwrappedContainer:null,group:null,appendToLog:function(){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].appendToLog();}","this.group.update();},doRemove:function(doUpdate,removeFromGroup){if(this.rendered){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].remove();}","this.unwrappedElementContainer=null;this.wrappedElementContainer=null;this.mainElementContainer=null;}","if(this.group&&removeFromGroup){this.group.removeChild(this,doUpdate);}","if(this===currentLogItem){currentLogItem=null;}},remove:function(doUpdate,removeFromGroup){this.doRemove(doUpdate,removeFromGroup);},render:function(){},accept:function(visitor){visitor.visit(this);},getUnwrappedDomContainer:function(){return this.group.unwrappedElementContainer.contentDiv;},getWrappedDomContainer:function(){return this.group.wrappedElementContainer.contentDiv;},getMainDomContainer:function(){return this.group.mainElementContainer.contentDiv;}};LogItem.serializedItemKeys={LOG_ENTRY:0,GROUP_START:1,GROUP_END:2};function LogItemContainerElement(){}",'LogItemContainerElement.prototype={appendToLog:function(){var insertBeforeFirst=(newestAtTop&&this.containerDomNode.hasChildNodes());if(insertBeforeFirst){this.containerDomNode.insertBefore(this.mainDiv,this.containerDomNode.firstChild);}else{this.containerDomNode.appendChild(this.mainDiv);}}};function SeparatorElementContainer(containerDomNode){this.containerDomNode=containerDomNode;this.mainDiv=document.createElement("div");this.mainDiv.className="separator";this.mainDiv.innerHTML="&nbsp;";}',"SeparatorElementContainer.prototype=new LogItemContainerElement();SeparatorElementContainer.prototype.remove=function(){this.mainDiv.parentNode.removeChild(this.mainDiv);this.mainDiv=null;};function Separator(){this.rendered=false;}","Separator.prototype=new LogItem();copyProperties(Separator.prototype,{render:function(){var containerDomNode=this.group.contentDiv;if(isIe){this.unwrappedElementContainer=new SeparatorElementContainer(this.getUnwrappedDomContainer());this.wrappedElementContainer=new SeparatorElementContainer(this.getWrappedDomContainer());this.elementContainers=[this.unwrappedElementContainer,this.wrappedElementContainer];}else{this.mainElementContainer=new SeparatorElementContainer(this.getMainDomContainer());this.elementContainers=[this.mainElementContainer];}",'this.content=this.formattedMessage;this.rendered=true;}});function GroupElementContainer(group,containerDomNode,isRoot,isWrapped){this.group=group;this.containerDomNode=containerDomNode;this.isRoot=isRoot;this.isWrapped=isWrapped;this.expandable=false;if(this.isRoot){if(isIe){this.contentDiv=logMainContainer.appendChild(document.createElement("div"));this.contentDiv.id=this.isWrapped?"log_wrapped":"log_unwrapped";}else{this.contentDiv=logMainContainer;}}else{var groupElementContainer=this;this.mainDiv=document.createElement("div");this.mainDiv.className="group";this.headingDiv=this.mainDiv.appendChild(document.createElement("div"));this.headingDiv.className="groupheading";this.expander=this.headingDiv.appendChild(document.createElement("span"));this.expander.className="expander unselectable greyedout";this.expander.unselectable=true;var expanderText=this.group.expanded?"-":"+";this.expanderTextNode=this.expander.appendChild(document.createTextNode(expanderText));this.headingDiv.appendChild(document.createTextNode(" "+this.group.name));this.contentDiv=this.mainDiv.appendChild(document.createElement("div"));var contentCssClass=this.group.expanded?"expanded":"collapsed";this.contentDiv.className="groupcontent "+contentCssClass;this.expander.onclick=function(){if(groupElementContainer.group.expandable){groupElementContainer.group.toggleExpanded();}};}}','GroupElementContainer.prototype=new LogItemContainerElement();copyProperties(GroupElementContainer.prototype,{toggleExpanded:function(){if(!this.isRoot){var oldCssClass,newCssClass,expanderText;if(this.group.expanded){newCssClass="expanded";oldCssClass="collapsed";expanderText="-";}else{newCssClass="collapsed";oldCssClass="expanded";expanderText="+";}',"replaceClass(this.contentDiv,newCssClass,oldCssClass);this.expanderTextNode.nodeValue=expanderText;}},remove:function(){if(!this.isRoot){this.headingDiv=null;this.expander.onclick=null;this.expander=null;this.expanderTextNode=null;this.contentDiv=null;this.containerDomNode=null;this.mainDiv.parentNode.removeChild(this.mainDiv);this.mainDiv=null;}},reverseChildren:function(){var node=null;var childDomNodes=[];while((node=this.contentDiv.firstChild)){this.contentDiv.removeChild(node);childDomNodes.push(node);}",'while((node=childDomNodes.pop())){this.contentDiv.appendChild(node);}},update:function(){if(!this.isRoot){if(this.group.expandable){removeClass(this.expander,"greyedout");}else{addClass(this.expander,"greyedout");}}},clear:function(){if(this.isRoot){this.contentDiv.innerHTML="";}}});function Group(name,isRoot,initiallyExpanded){this.name=name;this.group=null;this.isRoot=isRoot;this.initiallyExpanded=initiallyExpanded;this.elementContainers=[];this.children=[];this.expanded=initiallyExpanded;this.rendered=false;this.expandable=false;}',"Group.prototype=new LogItem();copyProperties(Group.prototype,{addChild:function(logItem){this.children.push(logItem);logItem.group=this;},render:function(){if(isIe){var unwrappedDomContainer,wrappedDomContainer;if(this.isRoot){unwrappedDomContainer=logMainContainer;wrappedDomContainer=logMainContainer;}else{unwrappedDomContainer=this.getUnwrappedDomContainer();wrappedDomContainer=this.getWrappedDomContainer();}","this.unwrappedElementContainer=new GroupElementContainer(this,unwrappedDomContainer,this.isRoot,false);this.wrappedElementContainer=new GroupElementContainer(this,wrappedDomContainer,this.isRoot,true);this.elementContainers=[this.unwrappedElementContainer,this.wrappedElementContainer];}else{var mainDomContainer=this.isRoot?logMainContainer:this.getMainDomContainer();this.mainElementContainer=new GroupElementContainer(this,mainDomContainer,this.isRoot,false);this.elementContainers=[this.mainElementContainer];}","this.rendered=true;},toggleExpanded:function(){this.expanded=!this.expanded;for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].toggleExpanded();}},expand:function(){if(!this.expanded){this.toggleExpanded();}},accept:function(visitor){visitor.visitGroup(this);},reverseChildren:function(){if(this.rendered){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].reverseChildren();}}},update:function(){var previouslyExpandable=this.expandable;this.expandable=(this.children.length!==0);if(this.expandable!==previouslyExpandable){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].update();}}},flatten:function(){var visitor=new GroupFlattener();this.accept(visitor);return visitor.logEntriesAndSeparators;},removeChild:function(child,doUpdate){array_remove(this.children,child);child.group=null;if(doUpdate){this.update();}},remove:function(doUpdate,removeFromGroup){for(var i=0,len=this.children.length;i<len;i++){this.children[i].remove(false,false);}","this.children=[];this.update();if(this===currentGroup){currentGroup=this.group;}","this.doRemove(doUpdate,removeFromGroup);},serialize:function(items){items.push([LogItem.serializedItemKeys.GROUP_START,this.name]);for(var i=0,len=this.children.length;i<len;i++){this.children[i].serialize(items);}","if(this!==currentGroup){items.push([LogItem.serializedItemKeys.GROUP_END]);}},clear:function(){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].clear();}}});function LogEntryElementContainer(){}",'LogEntryElementContainer.prototype=new LogItemContainerElement();copyProperties(LogEntryElementContainer.prototype,{remove:function(){this.doRemove();},doRemove:function(){this.mainDiv.parentNode.removeChild(this.mainDiv);this.mainDiv=null;this.contentElement=null;this.containerDomNode=null;},setContent:function(content,wrappedContent){if(content===this.formattedMessage){this.contentElement.innerHTML="";this.contentElement.appendChild(document.createTextNode(this.formattedMessage));}else{this.contentElement.innerHTML=content;}},setSearchMatch:function(isMatch){var oldCssClass=isMatch?"searchnonmatch":"searchmatch";var newCssClass=isMatch?"searchmatch":"searchnonmatch";replaceClass(this.mainDiv,newCssClass,oldCssClass);},clearSearch:function(){removeClass(this.mainDiv,"searchmatch");removeClass(this.mainDiv,"searchnonmatch");}});function LogEntryWrappedElementContainer(logEntry,containerDomNode){this.logEntry=logEntry;this.containerDomNode=containerDomNode;this.mainDiv=document.createElement("div");this.mainDiv.appendChild(document.createTextNode(this.logEntry.formattedMessage));this.mainDiv.className="logentry wrapped "+this.logEntry.level;this.contentElement=this.mainDiv;}','LogEntryWrappedElementContainer.prototype=new LogEntryElementContainer();LogEntryWrappedElementContainer.prototype.setContent=function(content,wrappedContent){if(content===this.formattedMessage){this.contentElement.innerHTML="";this.contentElement.appendChild(document.createTextNode(this.formattedMessage));}else{this.contentElement.innerHTML=wrappedContent;}};function LogEntryUnwrappedElementContainer(logEntry,containerDomNode){this.logEntry=logEntry;this.containerDomNode=containerDomNode;this.mainDiv=document.createElement("div");this.mainDiv.className="logentry unwrapped "+this.logEntry.level;this.pre=this.mainDiv.appendChild(document.createElement("pre"));this.pre.appendChild(document.createTextNode(this.logEntry.formattedMessage));this.pre.className="unwrapped";this.contentElement=this.pre;}','LogEntryUnwrappedElementContainer.prototype=new LogEntryElementContainer();LogEntryUnwrappedElementContainer.prototype.remove=function(){this.doRemove();this.pre=null;};function LogEntryMainElementContainer(logEntry,containerDomNode){this.logEntry=logEntry;this.containerDomNode=containerDomNode;this.mainDiv=document.createElement("div");this.mainDiv.className="logentry nonielogentry "+this.logEntry.level;this.contentElement=this.mainDiv.appendChild(document.createElement("span"));this.contentElement.appendChild(document.createTextNode(this.logEntry.formattedMessage));}',"LogEntryMainElementContainer.prototype=new LogEntryElementContainer();function LogEntry(level,formattedMessage){this.level=level;this.formattedMessage=formattedMessage;this.rendered=false;}",'LogEntry.prototype=new LogItem();copyProperties(LogEntry.prototype,{render:function(){var logEntry=this;var containerDomNode=this.group.contentDiv;if(isIe){this.formattedMessage=this.formattedMessage.replace(/\\r\\n/g,"\\r");this.unwrappedElementContainer=new LogEntryUnwrappedElementContainer(this,this.getUnwrappedDomContainer());this.wrappedElementContainer=new LogEntryWrappedElementContainer(this,this.getWrappedDomContainer());this.elementContainers=[this.unwrappedElementContainer,this.wrappedElementContainer];}else{this.mainElementContainer=new LogEntryMainElementContainer(this,this.getMainDomContainer());this.elementContainers=[this.mainElementContainer];}','this.content=this.formattedMessage;this.rendered=true;},setContent:function(content,wrappedContent){if(content!=this.content){if(isIe&&(content!==this.formattedMessage)){content=content.replace(/\\r\\n/g,"\\r");}',"for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].setContent(content,wrappedContent);}",'this.content=content;}},getSearchMatches:function(){var matches=[];var i,len;if(isIe){var unwrappedEls=getElementsByClass(this.unwrappedElementContainer.mainDiv,"searchterm","span");var wrappedEls=getElementsByClass(this.wrappedElementContainer.mainDiv,"searchterm","span");for(i=0,len=unwrappedEls.length;i<len;i++){matches[i]=new Match(this.level,null,unwrappedEls[i],wrappedEls[i]);}}else{var els=getElementsByClass(this.mainElementContainer.mainDiv,"searchterm","span");for(i=0,len=els.length;i<len;i++){matches[i]=new Match(this.level,els[i]);}}',"return matches;},setSearchMatch:function(isMatch){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].setSearchMatch(isMatch);}},clearSearch:function(){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].clearSearch();}},accept:function(visitor){visitor.visitLogEntry(this);},serialize:function(items){items.push([LogItem.serializedItemKeys.LOG_ENTRY,this.level,this.formattedMessage]);}});function LogItemVisitor(){}","LogItemVisitor.prototype={visit:function(logItem){},visitParent:function(logItem){if(logItem.group){logItem.group.accept(this);}},visitChildren:function(logItem){for(var i=0,len=logItem.children.length;i<len;i++){logItem.children[i].accept(this);}},visitLogEntry:function(logEntry){this.visit(logEntry);},visitSeparator:function(separator){this.visit(separator);},visitGroup:function(group){this.visit(group);}};function GroupFlattener(){this.logEntriesAndSeparators=[];}",'GroupFlattener.prototype=new LogItemVisitor();GroupFlattener.prototype.visitGroup=function(group){this.visitChildren(group);};GroupFlattener.prototype.visitLogEntry=function(logEntry){this.logEntriesAndSeparators.push(logEntry);};GroupFlattener.prototype.visitSeparator=function(separator){this.logEntriesAndSeparators.push(separator);};window.onload=function(){if(location.search){var queryBits=unescape(location.search).substr(1).split("&"),nameValueBits;for(var i=0,len=queryBits.length;i<len;i++){nameValueBits=queryBits[i].split("=");if(nameValueBits[0]=="log4javascript_domain"){document.domain=nameValueBits[1];break;}}}','logMainContainer=$("log");if(isIePre7){addClass(logMainContainer,"oldIe");}','rootGroup=new Group("root",true);rootGroup.render();currentGroup=rootGroup;setCommandInputWidth();setLogContainerHeight();toggleLoggingEnabled();toggleSearchEnabled();toggleSearchFilter();toggleSearchHighlight();applyFilters();checkAllLevels();toggleWrap();toggleNewestAtTop();toggleScrollToLatest();renderQueuedLogItems();loaded=true;$("command").value="";$("command").autocomplete="off";$("command").onkeydown=function(evt){evt=getEvent(evt);if(evt.keyCode==10||evt.keyCode==13){evalCommandLine();stopPropagation(evt);}else if(evt.keyCode==27){this.value="";this.focus();}else if(evt.keyCode==38&&commandHistory.length>0){currentCommandIndex=Math.max(0,currentCommandIndex-1);this.value=commandHistory[currentCommandIndex];moveCaretToEnd(this);}else if(evt.keyCode==40&&commandHistory.length>0){currentCommandIndex=Math.min(commandHistory.length-1,currentCommandIndex+1);this.value=commandHistory[currentCommandIndex];moveCaretToEnd(this);}};$("command").onkeypress=function(evt){evt=getEvent(evt);if(evt.keyCode==38&&commandHistory.length>0&&evt.preventDefault){evt.preventDefault();}};$("command").onkeyup=function(evt){evt=getEvent(evt);if(evt.keyCode==27&&evt.preventDefault){evt.preventDefault();this.focus();}};document.onkeydown=function keyEventHandler(evt){evt=getEvent(evt);switch(evt.keyCode){case 69:if(evt.shiftKey&&(evt.ctrlKey||evt.metaKey)){evalLastCommand();cancelKeyEvent(evt);return false;}',"break;case 75:if(evt.shiftKey&&(evt.ctrlKey||evt.metaKey)){focusSearch();cancelKeyEvent(evt);return false;}","break;case 40:case 76:if(evt.shiftKey&&(evt.ctrlKey||evt.metaKey)){focusCommandLine();cancelKeyEvent(evt);return false;}","break;}};setTimeout(setLogContainerHeight,20);setShowCommandLine(showCommandLine);doSearch();};window.onunload=function(){if(mainWindowExists()){appender.unload();}",'appender=null;};function toggleLoggingEnabled(){setLoggingEnabled($("enableLogging").checked);}',"function setLoggingEnabled(enable){loggingEnabled=enable;}","var appender=null;function setAppender(appenderParam){appender=appenderParam;}",'function setShowCloseButton(showCloseButton){$("closeButton").style.display=showCloseButton?"inline":"none";}','function setShowHideButton(showHideButton){$("hideButton").style.display=showHideButton?"inline":"none";}',"var newestAtTop=false;function LogItemContentReverser(){}","LogItemContentReverser.prototype=new LogItemVisitor();LogItemContentReverser.prototype.visitGroup=function(group){group.reverseChildren();this.visitChildren(group);};function setNewestAtTop(isNewestAtTop){var oldNewestAtTop=newestAtTop;var i,iLen,j,jLen;newestAtTop=Boolean(isNewestAtTop);if(oldNewestAtTop!=newestAtTop){var visitor=new LogItemContentReverser();rootGroup.accept(visitor);if(currentSearch){var currentMatch=currentSearch.matches[currentMatchIndex];var matchIndex=0;var matches=[];var actOnLogEntry=function(logEntry){var logEntryMatches=logEntry.getSearchMatches();for(j=0,jLen=logEntryMatches.length;j<jLen;j++){matches[matchIndex]=logEntryMatches[j];if(currentMatch&&logEntryMatches[j].equals(currentMatch)){currentMatchIndex=matchIndex;}","matchIndex++;}};if(newestAtTop){for(i=logEntries.length-1;i>=0;i--){actOnLogEntry(logEntries[i]);}}else{for(i=0,iLen=logEntries.length;i<iLen;i++){actOnLogEntry(logEntries[i]);}}","currentSearch.matches=matches;if(currentMatch){currentMatch.setCurrent();}}else if(scrollToLatest){doScrollToLatest();}}",'$("newestAtTop").checked=isNewestAtTop;}','function toggleNewestAtTop(){var isNewestAtTop=$("newestAtTop").checked;setNewestAtTop(isNewestAtTop);}',"var scrollToLatest=true;function setScrollToLatest(isScrollToLatest){scrollToLatest=isScrollToLatest;if(scrollToLatest){doScrollToLatest();}",'$("scrollToLatest").checked=isScrollToLatest;}','function toggleScrollToLatest(){var isScrollToLatest=$("scrollToLatest").checked;setScrollToLatest(isScrollToLatest);}','function doScrollToLatest(){var l=logMainContainer;if(typeof l.scrollTop!="undefined"){if(newestAtTop){l.scrollTop=0;}else{var latestLogEntry=l.lastChild;if(latestLogEntry){l.scrollTop=l.scrollHeight;}}}}',"var closeIfOpenerCloses=true;function setCloseIfOpenerCloses(isCloseIfOpenerCloses){closeIfOpenerCloses=isCloseIfOpenerCloses;}","var maxMessages=null;function setMaxMessages(max){maxMessages=max;pruneLogEntries();}",'var showCommandLine=false;function setShowCommandLine(isShowCommandLine){showCommandLine=isShowCommandLine;if(loaded){$("commandLine").style.display=showCommandLine?"block":"none";setCommandInputWidth();setLogContainerHeight();}}','function focusCommandLine(){if(loaded){$("command").focus();}}','function focusSearch(){if(loaded){$("searchBox").focus();}}',"function getLogItems(){var items=[];for(var i=0,len=logItems.length;i<len;i++){logItems[i].serialize(items);}","return items;}","function setLogItems(items){var loggingReallyEnabled=loggingEnabled;loggingEnabled=true;for(var i=0,len=items.length;i<len;i++){switch(items[i][0]){case LogItem.serializedItemKeys.LOG_ENTRY:log(items[i][1],items[i][2]);break;case LogItem.serializedItemKeys.GROUP_START:group(items[i][1]);break;case LogItem.serializedItemKeys.GROUP_END:groupEnd();break;}}","loggingEnabled=loggingReallyEnabled;}","function log(logLevel,formattedMessage){if(loggingEnabled){var logEntry=new LogEntry(logLevel,formattedMessage);logEntries.push(logEntry);logEntriesAndSeparators.push(logEntry);logItems.push(logEntry);currentGroup.addChild(logEntry);if(loaded){if(logQueuedEventsTimer!==null){clearTimeout(logQueuedEventsTimer);}","logQueuedEventsTimer=setTimeout(renderQueuedLogItems,renderDelay);unrenderedLogItemsExist=true;}}}","function renderQueuedLogItems(){logQueuedEventsTimer=null;var pruned=pruneLogEntries();var initiallyHasMatches=currentSearch?currentSearch.hasMatches():false;for(var i=0,len=logItems.length;i<len;i++){if(!logItems[i].rendered){logItems[i].render();logItems[i].appendToLog();if(currentSearch&&(logItems[i]instanceof LogEntry)){currentSearch.applyTo(logItems[i]);}}}","if(currentSearch){if(pruned){if(currentSearch.hasVisibleMatches()){if(currentMatchIndex===null){setCurrentMatchIndex(0);}","displayMatches();}else{displayNoMatches();}}else if(!initiallyHasMatches&&currentSearch.hasVisibleMatches()){setCurrentMatchIndex(0);displayMatches();}}","if(scrollToLatest){doScrollToLatest();}","unrenderedLogItemsExist=false;}","function pruneLogEntries(){if((maxMessages!==null)&&(logEntriesAndSeparators.length>maxMessages)){var numberToDelete=logEntriesAndSeparators.length-maxMessages;var prunedLogEntries=logEntriesAndSeparators.slice(0,numberToDelete);if(currentSearch){currentSearch.removeMatches(prunedLogEntries);}","var group;for(var i=0;i<numberToDelete;i++){group=logEntriesAndSeparators[i].group;array_remove(logItems,logEntriesAndSeparators[i]);array_remove(logEntries,logEntriesAndSeparators[i]);logEntriesAndSeparators[i].remove(true,true);if(group.children.length===0&&group!==currentGroup&&group!==rootGroup){array_remove(logItems,group);group.remove(true,true);}}","logEntriesAndSeparators=array_removeFromStart(logEntriesAndSeparators,numberToDelete);return true;}","return false;}",'function group(name,startExpanded){if(loggingEnabled){initiallyExpanded=(typeof startExpanded==="undefined")?true:Boolean(startExpanded);var newGroup=new Group(name,false,initiallyExpanded);currentGroup.addChild(newGroup);currentGroup=newGroup;logItems.push(newGroup);if(loaded){if(logQueuedEventsTimer!==null){clearTimeout(logQueuedEventsTimer);}',"logQueuedEventsTimer=setTimeout(renderQueuedLogItems,renderDelay);unrenderedLogItemsExist=true;}}}","function groupEnd(){currentGroup=(currentGroup===rootGroup)?rootGroup:currentGroup.group;}","function mainPageReloaded(){currentGroup=rootGroup;var separator=new Separator();logEntriesAndSeparators.push(separator);logItems.push(separator);currentGroup.addChild(separator);}","function closeWindow(){if(appender&&mainWindowExists()){appender.close(true);}else{window.close();}}","function hide(){if(appender&&mainWindowExists()){appender.hide();}}",'var mainWindow=window;var windowId="log4javascriptConsoleWindow_"+new Date().getTime()+"_"+(""+Math.random()).substr(2);function setMainWindow(win){mainWindow=win;mainWindow[windowId]=window;if(opener&&closeIfOpenerCloses){pollOpener();}}',"function pollOpener(){if(closeIfOpenerCloses){if(mainWindowExists()){setTimeout(pollOpener,500);}else{closeWindow();}}}","function mainWindowExists(){try{return(mainWindow&&!mainWindow.closed&&mainWindow[windowId]==window);}catch(ex){}","return false;}",'var logLevels=["TRACE","DEBUG","INFO","WARN","ERROR","FATAL"];function getCheckBox(logLevel){return $("switch_"+logLevel);}','function getIeWrappedLogContainer(){return $("log_wrapped");}','function getIeUnwrappedLogContainer(){return $("log_unwrapped");}',"function applyFilters(){for(var i=0;i<logLevels.length;i++){if(getCheckBox(logLevels[i]).checked){addClass(logMainContainer,logLevels[i]);}else{removeClass(logMainContainer,logLevels[i]);}}","updateSearchFromFilters();}",'function toggleAllLevels(){var turnOn=$("switch_ALL").checked;for(var i=0;i<logLevels.length;i++){getCheckBox(logLevels[i]).checked=turnOn;if(turnOn){addClass(logMainContainer,logLevels[i]);}else{removeClass(logMainContainer,logLevels[i]);}}}','function checkAllLevels(){for(var i=0;i<logLevels.length;i++){if(!getCheckBox(logLevels[i]).checked){getCheckBox("ALL").checked=false;return;}}','getCheckBox("ALL").checked=true;}',"function clearLog(){rootGroup.clear();currentGroup=rootGroup;logEntries=[];logItems=[];logEntriesAndSeparators=[];doSearch();}",'function toggleWrap(){var enable=$("wrap").checked;if(enable){addClass(logMainContainer,"wrap");}else{removeClass(logMainContainer,"wrap");}',"refreshCurrentMatch();}","var searchTimer=null;function scheduleSearch(){try{clearTimeout(searchTimer);}catch(ex){}","searchTimer=setTimeout(doSearch,500);}","function Search(searchTerm,isRegex,searchRegex,isCaseSensitive){this.searchTerm=searchTerm;this.isRegex=isRegex;this.searchRegex=searchRegex;this.isCaseSensitive=isCaseSensitive;this.matches=[];}","Search.prototype={hasMatches:function(){return this.matches.length>0;},hasVisibleMatches:function(){if(this.hasMatches()){for(var i=0;i<this.matches.length;i++){if(this.matches[i].isVisible()){return true;}}}","return false;},match:function(logEntry){var entryText=String(logEntry.formattedMessage);var matchesSearch=false;if(this.isRegex){matchesSearch=this.searchRegex.test(entryText);}else if(this.isCaseSensitive){matchesSearch=(entryText.indexOf(this.searchTerm)>-1);}else{matchesSearch=(entryText.toLowerCase().indexOf(this.searchTerm.toLowerCase())>-1);}","return matchesSearch;},getNextVisibleMatchIndex:function(){for(var i=currentMatchIndex+1;i<this.matches.length;i++){if(this.matches[i].isVisible()){return i;}}","for(i=0;i<=currentMatchIndex;i++){if(this.matches[i].isVisible()){return i;}}","return-1;},getPreviousVisibleMatchIndex:function(){for(var i=currentMatchIndex-1;i>=0;i--){if(this.matches[i].isVisible()){return i;}}","for(var i=this.matches.length-1;i>=currentMatchIndex;i--){if(this.matches[i].isVisible()){return i;}}",'return-1;},applyTo:function(logEntry){var doesMatch=this.match(logEntry);if(doesMatch){logEntry.group.expand();logEntry.setSearchMatch(true);var logEntryContent;var wrappedLogEntryContent;var searchTermReplacementStartTag="<span class=\\"searchterm\\">";var searchTermReplacementEndTag="<"+"/span>";var preTagName=isIe?"pre":"span";var preStartTag="<"+preTagName+" class=\\"pre\\">";var preEndTag="<"+"/"+preTagName+">";var startIndex=0;var searchIndex,matchedText,textBeforeMatch;if(this.isRegex){var flags=this.isCaseSensitive?"g":"gi";var capturingRegex=new RegExp("("+this.searchRegex.source+")",flags);var rnd=(""+Math.random()).substr(2);var startToken="%%s"+rnd+"%%";var endToken="%%e"+rnd+"%%";logEntryContent=logEntry.formattedMessage.replace(capturingRegex,startToken+"$1"+endToken);logEntryContent=escapeHtml(logEntryContent);var result;var searchString=logEntryContent;logEntryContent="";wrappedLogEntryContent="";while((searchIndex=searchString.indexOf(startToken,startIndex))>-1){var endTokenIndex=searchString.indexOf(endToken,searchIndex);matchedText=searchString.substring(searchIndex+startToken.length,endTokenIndex);textBeforeMatch=searchString.substring(startIndex,searchIndex);logEntryContent+=preStartTag+textBeforeMatch+preEndTag;logEntryContent+=searchTermReplacementStartTag+preStartTag+matchedText+',"preEndTag+searchTermReplacementEndTag;if(isIe){wrappedLogEntryContent+=textBeforeMatch+searchTermReplacementStartTag+","matchedText+searchTermReplacementEndTag;}","startIndex=endTokenIndex+endToken.length;}",'logEntryContent+=preStartTag+searchString.substr(startIndex)+preEndTag;if(isIe){wrappedLogEntryContent+=searchString.substr(startIndex);}}else{logEntryContent="";wrappedLogEntryContent="";var searchTermReplacementLength=searchTermReplacementStartTag.length+',"this.searchTerm.length+searchTermReplacementEndTag.length;var searchTermLength=this.searchTerm.length;var searchTermLowerCase=this.searchTerm.toLowerCase();var logTextLowerCase=logEntry.formattedMessage.toLowerCase();while((searchIndex=logTextLowerCase.indexOf(searchTermLowerCase,startIndex))>-1){matchedText=escapeHtml(logEntry.formattedMessage.substr(searchIndex,this.searchTerm.length));textBeforeMatch=escapeHtml(logEntry.formattedMessage.substring(startIndex,searchIndex));var searchTermReplacement=searchTermReplacementStartTag+","preStartTag+matchedText+preEndTag+searchTermReplacementEndTag;logEntryContent+=preStartTag+textBeforeMatch+preEndTag+searchTermReplacement;if(isIe){wrappedLogEntryContent+=textBeforeMatch+searchTermReplacementStartTag+","matchedText+searchTermReplacementEndTag;}","startIndex=searchIndex+searchTermLength;}","var textAfterLastMatch=escapeHtml(logEntry.formattedMessage.substr(startIndex));logEntryContent+=preStartTag+textAfterLastMatch+preEndTag;if(isIe){wrappedLogEntryContent+=textAfterLastMatch;}}","logEntry.setContent(logEntryContent,wrappedLogEntryContent);var logEntryMatches=logEntry.getSearchMatches();this.matches=this.matches.concat(logEntryMatches);}else{logEntry.setSearchMatch(false);logEntry.setContent(logEntry.formattedMessage,logEntry.formattedMessage);}","return doesMatch;},removeMatches:function(logEntries){var matchesToRemoveCount=0;var currentMatchRemoved=false;var matchesToRemove=[];var i,iLen,j,jLen;for(i=0,iLen=this.matches.length;i<iLen;i++){for(j=0,jLen=logEntries.length;j<jLen;j++){if(this.matches[i].belongsTo(logEntries[j])){matchesToRemove.push(this.matches[i]);if(i===currentMatchIndex){currentMatchRemoved=true;}}}}","var newMatch=currentMatchRemoved?null:this.matches[currentMatchIndex];if(currentMatchRemoved){for(i=currentMatchIndex,iLen=this.matches.length;i<iLen;i++){if(this.matches[i].isVisible()&&!array_contains(matchesToRemove,this.matches[i])){newMatch=this.matches[i];break;}}}","for(i=0,iLen=matchesToRemove.length;i<iLen;i++){array_remove(this.matches,matchesToRemove[i]);matchesToRemove[i].remove();}","if(this.hasVisibleMatches()){if(newMatch===null){setCurrentMatchIndex(0);}else{var newMatchIndex=0;for(i=0,iLen=this.matches.length;i<iLen;i++){if(newMatch===this.matches[i]){newMatchIndex=i;break;}}","setCurrentMatchIndex(newMatchIndex);}}else{currentMatchIndex=null;displayNoMatches();}}};function getPageOffsetTop(el,container){var currentEl=el;var y=0;while(currentEl&&currentEl!=container){y+=currentEl.offsetTop;currentEl=currentEl.offsetParent;}","return y;}",'function scrollIntoView(el){var logContainer=logMainContainer;if(!$("wrap").checked){var logContainerLeft=logContainer.scrollLeft;var logContainerRight=logContainerLeft+logContainer.offsetWidth;var elLeft=el.offsetLeft;var elRight=elLeft+el.offsetWidth;if(elLeft<logContainerLeft||elRight>logContainerRight){logContainer.scrollLeft=elLeft-(logContainer.offsetWidth-el.offsetWidth)/2;}}',"var logContainerTop=logContainer.scrollTop;var logContainerBottom=logContainerTop+logContainer.offsetHeight;var elTop=getPageOffsetTop(el)-getToolBarsHeight();var elBottom=elTop+el.offsetHeight;if(elTop<logContainerTop||elBottom>logContainerBottom){logContainer.scrollTop=elTop-(logContainer.offsetHeight-el.offsetHeight)/2;}}","function Match(logEntryLevel,spanInMainDiv,spanInUnwrappedPre,spanInWrappedDiv){this.logEntryLevel=logEntryLevel;this.spanInMainDiv=spanInMainDiv;if(isIe){this.spanInUnwrappedPre=spanInUnwrappedPre;this.spanInWrappedDiv=spanInWrappedDiv;}","this.mainSpan=isIe?spanInUnwrappedPre:spanInMainDiv;}",'Match.prototype={equals:function(match){return this.mainSpan===match.mainSpan;},setCurrent:function(){if(isIe){addClass(this.spanInUnwrappedPre,"currentmatch");addClass(this.spanInWrappedDiv,"currentmatch");var elementToScroll=$("wrap").checked?this.spanInWrappedDiv:this.spanInUnwrappedPre;scrollIntoView(elementToScroll);}else{addClass(this.spanInMainDiv,"currentmatch");scrollIntoView(this.spanInMainDiv);}},belongsTo:function(logEntry){if(isIe){return isDescendant(this.spanInUnwrappedPre,logEntry.unwrappedPre);}else{return isDescendant(this.spanInMainDiv,logEntry.mainDiv);}},setNotCurrent:function(){if(isIe){removeClass(this.spanInUnwrappedPre,"currentmatch");removeClass(this.spanInWrappedDiv,"currentmatch");}else{removeClass(this.spanInMainDiv,"currentmatch");}},isOrphan:function(){return isOrphan(this.mainSpan);},isVisible:function(){return getCheckBox(this.logEntryLevel).checked;},remove:function(){if(isIe){this.spanInUnwrappedPre=null;this.spanInWrappedDiv=null;}else{this.spanInMainDiv=null;}}};var currentSearch=null;var currentMatchIndex=null;function doSearch(){var searchBox=$("searchBox");var searchTerm=searchBox.value;var isRegex=$("searchRegex").checked;var isCaseSensitive=$("searchCaseSensitive").checked;var i;if(searchTerm===""){$("searchReset").disabled=true;$("searchNav").style.display="none";removeClass(document.body,"searching");removeClass(searchBox,"hasmatches");removeClass(searchBox,"nomatches");for(i=0;i<logEntries.length;i++){logEntries[i].clearSearch();logEntries[i].setContent(logEntries[i].formattedMessage,logEntries[i].formattedMessage);}','currentSearch=null;setLogContainerHeight();}else{$("searchReset").disabled=false;$("searchNav").style.display="block";var searchRegex;var regexValid;if(isRegex){try{searchRegex=isCaseSensitive?new RegExp(searchTerm,"g"):new RegExp(searchTerm,"gi");regexValid=true;replaceClass(searchBox,"validregex","invalidregex");searchBox.title="Valid regex";}catch(ex){regexValid=false;replaceClass(searchBox,"invalidregex","validregex");searchBox.title="Invalid regex: "+(ex.message?ex.message:(ex.description?ex.description:"unknown error"));return;}}else{searchBox.title="";removeClass(searchBox,"validregex");removeClass(searchBox,"invalidregex");}','addClass(document.body,"searching");currentSearch=new Search(searchTerm,isRegex,searchRegex,isCaseSensitive);for(i=0;i<logEntries.length;i++){currentSearch.applyTo(logEntries[i]);}',"setLogContainerHeight();if(currentSearch.hasVisibleMatches()){setCurrentMatchIndex(0);displayMatches();}else{displayNoMatches();}}}","function updateSearchFromFilters(){if(currentSearch){if(currentSearch.hasMatches()){if(currentMatchIndex===null){currentMatchIndex=0;}","var currentMatch=currentSearch.matches[currentMatchIndex];if(currentMatch.isVisible()){displayMatches();setCurrentMatchIndex(currentMatchIndex);}else{currentMatch.setNotCurrent();var nextVisibleMatchIndex=currentSearch.getNextVisibleMatchIndex();if(nextVisibleMatchIndex>-1){setCurrentMatchIndex(nextVisibleMatchIndex);displayMatches();}else{displayNoMatches();}}}else{displayNoMatches();}}}","function refreshCurrentMatch(){if(currentSearch&&currentSearch.hasVisibleMatches()){setCurrentMatchIndex(currentMatchIndex);}}",'function displayMatches(){replaceClass($("searchBox"),"hasmatches","nomatches");$("searchBox").title=""+currentSearch.matches.length+" matches found";$("searchNav").style.display="block";setLogContainerHeight();}','function displayNoMatches(){replaceClass($("searchBox"),"nomatches","hasmatches");$("searchBox").title="No matches found";$("searchNav").style.display="none";setLogContainerHeight();}','function toggleSearchEnabled(enable){enable=(typeof enable=="undefined")?!$("searchDisable").checked:enable;$("searchBox").disabled=!enable;$("searchReset").disabled=!enable;$("searchRegex").disabled=!enable;$("searchNext").disabled=!enable;$("searchPrevious").disabled=!enable;$("searchCaseSensitive").disabled=!enable;$("searchNav").style.display=(enable&&($("searchBox").value!=="")&&currentSearch&&currentSearch.hasVisibleMatches())?"block":"none";if(enable){removeClass($("search"),"greyedout");addClass(document.body,"searching");if($("searchHighlight").checked){addClass(logMainContainer,"searchhighlight");}else{removeClass(logMainContainer,"searchhighlight");}','if($("searchFilter").checked){addClass(logMainContainer,"searchfilter");}else{removeClass(logMainContainer,"searchfilter");}','$("searchDisable").checked=!enable;}else{addClass($("search"),"greyedout");removeClass(document.body,"searching");removeClass(logMainContainer,"searchhighlight");removeClass(logMainContainer,"searchfilter");}',"setLogContainerHeight();}",'function toggleSearchFilter(){var enable=$("searchFilter").checked;if(enable){addClass(logMainContainer,"searchfilter");}else{removeClass(logMainContainer,"searchfilter");}',"refreshCurrentMatch();}",'function toggleSearchHighlight(){var enable=$("searchHighlight").checked;if(enable){addClass(logMainContainer,"searchhighlight");}else{removeClass(logMainContainer,"searchhighlight");}}','function clearSearch(){$("searchBox").value="";doSearch();}','function searchNext(){if(currentSearch!==null&&currentMatchIndex!==null){currentSearch.matches[currentMatchIndex].setNotCurrent();var nextMatchIndex=currentSearch.getNextVisibleMatchIndex();if(nextMatchIndex>currentMatchIndex||confirm("Reached the end of the page. Start from the top?")){setCurrentMatchIndex(nextMatchIndex);}}}','function searchPrevious(){if(currentSearch!==null&&currentMatchIndex!==null){currentSearch.matches[currentMatchIndex].setNotCurrent();var previousMatchIndex=currentSearch.getPreviousVisibleMatchIndex();if(previousMatchIndex<currentMatchIndex||confirm("Reached the start of the page. Continue from the bottom?")){setCurrentMatchIndex(previousMatchIndex);}}}',"function setCurrentMatchIndex(index){currentMatchIndex=index;currentSearch.matches[currentMatchIndex].setCurrent();}",'function addClass(el,cssClass){if(!hasClass(el,cssClass)){if(el.className){el.className+=" "+cssClass;}else{el.className=cssClass;}}}','function hasClass(el,cssClass){if(el.className){var classNames=el.className.split(" ");return array_contains(classNames,cssClass);}',"return false;}",'function removeClass(el,cssClass){if(hasClass(el,cssClass)){var existingClasses=el.className.split(" ");var newClasses=[];for(var i=0,len=existingClasses.length;i<len;i++){if(existingClasses[i]!=cssClass){newClasses[newClasses.length]=existingClasses[i];}}','el.className=newClasses.join(" ");}}',"function replaceClass(el,newCssClass,oldCssClass){removeClass(el,oldCssClass);addClass(el,newCssClass);}","function getElementsByClass(el,cssClass,tagName){var elements=el.getElementsByTagName(tagName);var matches=[];for(var i=0,len=elements.length;i<len;i++){if(hasClass(elements[i],cssClass)){matches.push(elements[i]);}}","return matches;}","function $(id){return document.getElementById(id);}","function isDescendant(node,ancestorNode){while(node!=null){if(node===ancestorNode){return true;}","node=node.parentNode;}","return false;}","function isOrphan(node){var currentNode=node;while(currentNode){if(currentNode==document.body){return false;}","currentNode=currentNode.parentNode;}","return true;}",'function escapeHtml(str){return str.replace(/&/g,"&amp;").replace(/[<]/g,"&lt;").replace(/>/g,"&gt;");}',"function getWindowWidth(){if(window.innerWidth){return window.innerWidth;}else if(document.documentElement&&document.documentElement.clientWidth){return document.documentElement.clientWidth;}else if(document.body){return document.body.clientWidth;}","return 0;}","function getWindowHeight(){if(window.innerHeight){return window.innerHeight;}else if(document.documentElement&&document.documentElement.clientHeight){return document.documentElement.clientHeight;}else if(document.body){return document.body.clientHeight;}","return 0;}",'function getToolBarsHeight(){return $("switches").offsetHeight;}','function getChromeHeight(){var height=getToolBarsHeight();if(showCommandLine){height+=$("commandLine").offsetHeight;}',"return height;}",'function setLogContainerHeight(){if(logMainContainer){var windowHeight=getWindowHeight();$("body").style.height=getWindowHeight()+"px";logMainContainer.style.height=""+','Math.max(0,windowHeight-getChromeHeight())+"px";}}','function setCommandInputWidth(){if(showCommandLine){$("command").style.width=""+Math.max(0,$("commandLineContainer").offsetWidth-','($("evaluateButton").offsetWidth+13))+"px";}}',"window.onresize=function(){setCommandInputWidth();setLogContainerHeight();};if(!Array.prototype.push){Array.prototype.push=function(){for(var i=0,len=arguments.length;i<len;i++){this[this.length]=arguments[i];}","return this.length;};}","if(!Array.prototype.pop){Array.prototype.pop=function(){if(this.length>0){var val=this[this.length-1];this.length=this.length-1;return val;}};}","if(!Array.prototype.shift){Array.prototype.shift=function(){if(this.length>0){var firstItem=this[0];for(var i=0,len=this.length-1;i<len;i++){this[i]=this[i+1];}","this.length=this.length-1;return firstItem;}};}","if(!Array.prototype.splice){Array.prototype.splice=function(startIndex,deleteCount){var itemsAfterDeleted=this.slice(startIndex+deleteCount);var itemsDeleted=this.slice(startIndex,startIndex+deleteCount);this.length=startIndex;var argumentsArray=[];for(var i=0,len=arguments.length;i<len;i++){argumentsArray[i]=arguments[i];}","var itemsToAppend=(argumentsArray.length>2)?itemsAfterDeleted=argumentsArray.slice(2).concat(itemsAfterDeleted):itemsAfterDeleted;for(i=0,len=itemsToAppend.length;i<len;i++){this.push(itemsToAppend[i]);}","return itemsDeleted;};}","function array_remove(arr,val){var index=-1;for(var i=0,len=arr.length;i<len;i++){if(arr[i]===val){index=i;break;}}","if(index>=0){arr.splice(index,1);return index;}else{return false;}}","function array_removeFromStart(array,numberToRemove){if(Array.prototype.splice){array.splice(0,numberToRemove);}else{for(var i=numberToRemove,len=array.length;i<len;i++){array[i-numberToRemove]=array[i];}","array.length=array.length-numberToRemove;}","return array;}","function array_contains(arr,val){for(var i=0,len=arr.length;i<len;i++){if(arr[i]==val){return true;}}","return false;}","function getErrorMessage(ex){if(ex.message){return ex.message;}else if(ex.description){return ex.description;}",'return""+ex;}',"function moveCaretToEnd(input){if(input.setSelectionRange){input.focus();var length=input.value.length;input.setSelectionRange(length,length);}else if(input.createTextRange){var range=input.createTextRange();range.collapse(false);range.select();}","input.focus();}",'function stopPropagation(evt){if(evt.stopPropagation){evt.stopPropagation();}else if(typeof evt.cancelBubble!="undefined"){evt.cancelBubble=true;}}',"function getEvent(evt){return evt?evt:event;}","function getTarget(evt){return evt.target?evt.target:evt.srcElement;}",'function getRelatedTarget(evt){if(evt.relatedTarget){return evt.relatedTarget;}else if(evt.srcElement){switch(evt.type){case"mouseover":return evt.fromElement;case"mouseout":return evt.toElement;default:return evt.srcElement;}}}',"function cancelKeyEvent(evt){evt.returnValue=false;stopPropagation(evt);}",'function evalCommandLine(){var expr=$("command").value;evalCommand(expr);$("command").value="";}',"function evalLastCommand(){if(lastCommand!=null){evalCommand(lastCommand);}}",'var lastCommand=null;var commandHistory=[];var currentCommandIndex=0;function evalCommand(expr){if(appender){appender.evalCommandAndAppend(expr);}else{var prefix=">>> "+expr+"\\r\\n";try{log("INFO",prefix+eval(expr));}catch(ex){log("ERROR",prefix+"Error: "+getErrorMessage(ex));}}',"if(expr!=commandHistory[commandHistory.length-1]){commandHistory.push(expr);if(appender){appender.storeCommandHistory(commandHistory);}}","currentCommandIndex=(expr==commandHistory[currentCommandIndex])?currentCommandIndex+1:commandHistory.length;lastCommand=expr;}","//]]>","</script>",'<style type="text/css">',"body{background-color:white;color:black;padding:0;margin:0;font-family:tahoma,verdana,arial,helvetica,sans-serif;overflow:hidden}div#switchesContainer input{margin-bottom:0}div.toolbar{border-top:solid #ffffff 1px;border-bottom:solid #aca899 1px;background-color:#f1efe7;padding:3px 5px;font-size:68.75%}div.toolbar,div#search input{font-family:tahoma,verdana,arial,helvetica,sans-serif}div.toolbar input.button{padding:0 5px;font-size:100%}div.toolbar input.hidden{display:none}div#switches input#clearButton{margin-left:20px}div#levels label{font-weight:bold}div#levels label,div#options label{margin-right:5px}div#levels label#wrapLabel{font-weight:normal}div#search label{margin-right:10px}div#search label.searchboxlabel{margin-right:0}div#search input{font-size:100%}div#search input.validregex{color:green}div#search input.invalidregex{color:red}div#search input.nomatches{color:white;background-color:#ff6666}div#search input.nomatches{color:white;background-color:#ff6666}div#searchNav{display:none}div#commandLine{display:none}div#commandLine input#command{font-size:100%;font-family:Courier New,Courier}div#commandLine input#evaluateButton{}*.greyedout{color:gray !important;border-color:gray !important}*.greyedout *.alwaysenabled{color:black}*.unselectable{-khtml-user-select:none;-moz-user-select:none;user-select:none}div#log{font-family:Courier New,Courier;font-size:75%;width:100%;overflow:auto;clear:both;position:relative}div.group{border-color:#cccccc;border-style:solid;border-width:1px 0 1px 1px;overflow:visible}div.oldIe div.group,div.oldIe div.group *,div.oldIe *.logentry{height:1%}div.group div.groupheading span.expander{border:solid black 1px;font-family:Courier New,Courier;font-size:0.833em;background-color:#eeeeee;position:relative;top:-1px;color:black;padding:0 2px;cursor:pointer;cursor:hand;height:1%}div.group div.groupcontent{margin-left:10px;padding-bottom:2px;overflow:visible}div.group div.expanded{display:block}div.group div.collapsed{display:none}*.logentry{overflow:visible;display:none;white-space:pre}span.pre{white-space:pre}pre.unwrapped{display:inline !important}pre.unwrapped pre.pre,div.wrapped pre.pre{display:inline}div.wrapped pre.pre{white-space:normal}div.wrapped{display:none}body.searching *.logentry span.currentmatch{color:white !important;background-color:green !important}body.searching div.searchhighlight *.logentry span.searchterm{color:black;background-color:yellow}div.wrap *.logentry{white-space:normal !important;border-width:0 0 1px 0;border-color:#dddddd;border-style:dotted}div.wrap #log_wrapped,#log_unwrapped{display:block}div.wrap #log_unwrapped,#log_wrapped{display:none}div.wrap *.logentry span.pre{overflow:visible;white-space:normal}div.wrap *.logentry pre.unwrapped{display:none}div.wrap *.logentry span.wrapped{display:inline}div.searchfilter *.searchnonmatch{display:none !important}div#log *.TRACE,label#label_TRACE{color:#666666}div#log *.DEBUG,label#label_DEBUG{color:green}div#log *.INFO,label#label_INFO{color:#000099}div#log *.WARN,label#label_WARN{color:#999900}div#log *.ERROR,label#label_ERROR{color:red}div#log *.FATAL,label#label_FATAL{color:#660066}div.TRACE#log *.TRACE,div.DEBUG#log *.DEBUG,div.INFO#log *.INFO,div.WARN#log *.WARN,div.ERROR#log *.ERROR,div.FATAL#log *.FATAL{display:block}div#log div.separator{background-color:#cccccc;margin:5px 0;line-height:1px}","</style>","</head>",'<body id="body">','<div id="switchesContainer">','<div id="switches">','<div id="levels" class="toolbar">',"Filters:",'<input type="checkbox" id="switch_TRACE" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide trace messages" /><label for="switch_TRACE" id="label_TRACE">trace</label>','<input type="checkbox" id="switch_DEBUG" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide debug messages" /><label for="switch_DEBUG" id="label_DEBUG">debug</label>','<input type="checkbox" id="switch_INFO" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide info messages" /><label for="switch_INFO" id="label_INFO">info</label>','<input type="checkbox" id="switch_WARN" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide warn messages" /><label for="switch_WARN" id="label_WARN">warn</label>','<input type="checkbox" id="switch_ERROR" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide error messages" /><label for="switch_ERROR" id="label_ERROR">error</label>','<input type="checkbox" id="switch_FATAL" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide fatal messages" /><label for="switch_FATAL" id="label_FATAL">fatal</label>','<input type="checkbox" id="switch_ALL" onclick="toggleAllLevels(); applyFilters()" checked="checked" title="Show/hide all messages" /><label for="switch_ALL" id="label_ALL">all</label>',"</div>",'<div id="search" class="toolbar">','<label for="searchBox" class="searchboxlabel">Search:</label> <input type="text" id="searchBox" onclick="toggleSearchEnabled(true)" onkeyup="scheduleSearch()" size="20" />','<input type="button" id="searchReset" disabled="disabled" value="Reset" onclick="clearSearch()" class="button" title="Reset the search" />','<input type="checkbox" id="searchRegex" onclick="doSearch()" title="If checked, search is treated as a regular expression" /><label for="searchRegex">Regex</label>','<input type="checkbox" id="searchCaseSensitive" onclick="doSearch()" title="If checked, search is case sensitive" /><label for="searchCaseSensitive">Match case</label>','<input type="checkbox" id="searchDisable" onclick="toggleSearchEnabled()" title="Enable/disable search" /><label for="searchDisable" class="alwaysenabled">Disable</label>','<div id="searchNav">','<input type="button" id="searchNext" disabled="disabled" value="Next" onclick="searchNext()" class="button" title="Go to the next matching log entry" />','<input type="button" id="searchPrevious" disabled="disabled" value="Previous" onclick="searchPrevious()" class="button" title="Go to the previous matching log entry" />','<input type="checkbox" id="searchFilter" onclick="toggleSearchFilter()" title="If checked, non-matching log entries are filtered out" /><label for="searchFilter">Filter</label>','<input type="checkbox" id="searchHighlight" onclick="toggleSearchHighlight()" title="Highlight matched search terms" /><label for="searchHighlight" class="alwaysenabled">Highlight all</label>',"</div>","</div>",'<div id="options" class="toolbar">',"Options:",'<input type="checkbox" id="enableLogging" onclick="toggleLoggingEnabled()" checked="checked" title="Enable/disable logging" /><label for="enableLogging" id="enableLoggingLabel">Log</label>','<input type="checkbox" id="wrap" onclick="toggleWrap()" title="Enable / disable word wrap" /><label for="wrap" id="wrapLabel">Wrap</label>','<input type="checkbox" id="newestAtTop" onclick="toggleNewestAtTop()" title="If checked, causes newest messages to appear at the top" /><label for="newestAtTop" id="newestAtTopLabel">Newest at the top</label>','<input type="checkbox" id="scrollToLatest" onclick="toggleScrollToLatest()" checked="checked" title="If checked, window automatically scrolls to a new message when it is added" /><label for="scrollToLatest" id="scrollToLatestLabel">Scroll to latest</label>','<input type="button" id="clearButton" value="Clear" onclick="clearLog()" class="button" title="Clear all log messages"  />','<input type="button" id="hideButton" value="Hide" onclick="hide()" class="hidden button" title="Hide the console" />','<input type="button" id="closeButton" value="Close" onclick="closeWindow()" class="hidden button" title="Close the window" />',"</div>","</div>","</div>",'<div id="log" class="TRACE DEBUG INFO WARN ERROR FATAL"></div>','<div id="commandLine" class="toolbar">','<div id="commandLineContainer">','<input type="text" id="command" title="Enter a JavaScript command here and hit return or press \'Evaluate\'" />','<input type="button" id="evaluateButton" value="Evaluate" class="button" title="Evaluate the command" onclick="evalCommandLine()" />',"</div>","</div>","</body>","</html>",""];
},r=[];ConsoleAppender=function(){};var i=1;ConsoleAppender.prototype=new Appender,ConsoleAppender.prototype.create=function(e,t,o,a,s,l,u,c){function h(e,t){this.loggingEvent=e,this.levelName=e.level.name,this.formattedMessage=t}function p(e,t){this.name=e,this.initiallyExpanded=t}function d(){}var f=this,g=!1,m=!1,v=!1,$=!1,y=[],b=!0,w=i++;a=extractBooleanFromParam(a,this.defaults.initiallyMinimized),o=extractBooleanFromParam(o,this.defaults.lazyInit),s=extractBooleanFromParam(s,this.defaults.useDocumentWrite);var x=this.defaults.newestMessageAtTop,E=this.defaults.scrollToLatestMessage;l=l?l:this.defaults.width,u=u?u:this.defaults.height;var C=this.defaults.maxMessages,S=this.defaults.showCommandLine,L=this.defaults.commandLineObjectExpansionDepth,A=this.defaults.showHideButton,T=this.defaults.showCloseButton;this.defaults.showLogEntryDeleteButtons;this.setLayout(this.defaults.layout);var M,k,I,N,D,O=e?"InPageAppender":"PopUpAppender",R=function(e){return m?(handleError(O+": configuration option '"+e+"' may not be set after the appender has been initialized"),!1):!0},j=function(){return v&&b&&!$};this.isNewestMessageAtTop=function(){return x},this.setNewestMessageAtTop=function(e){x=bool(e),j()&&N().setNewestAtTop(x)},this.isScrollToLatestMessage=function(){return E},this.setScrollToLatestMessage=function(e){E=bool(e),j()&&N().setScrollToLatest(E)},this.getWidth=function(){return l},this.setWidth=function(e){R("width")&&(l=extractStringFromParam(e,l))},this.getHeight=function(){return u},this.setHeight=function(e){R("height")&&(u=extractStringFromParam(e,u))},this.getMaxMessages=function(){return C},this.setMaxMessages=function(e){C=extractIntFromParam(e,C),j()&&N().setMaxMessages(C)},this.isShowCommandLine=function(){return S},this.setShowCommandLine=function(e){S=bool(e),j()&&N().setShowCommandLine(S)},this.isShowHideButton=function(){return A},this.setShowHideButton=function(e){A=bool(e),j()&&N().setShowHideButton(A)},this.isShowCloseButton=function(){return T},this.setShowCloseButton=function(e){T=bool(e),j()&&N().setShowCloseButton(T)},this.getCommandLineObjectExpansionDepth=function(){return L},this.setCommandLineObjectExpansionDepth=function(e){L=extractIntFromParam(e,L)};var F=a;this.isInitiallyMinimized=function(){return a},this.setInitiallyMinimized=function(e){R("initiallyMinimized")&&(a=bool(e),F=a)},this.isUseDocumentWrite=function(){return s},this.setUseDocumentWrite=function(e){R("useDocumentWrite")&&(s=bool(e))},h.prototype.append=function(){N().log(this.levelName,this.formattedMessage)},p.prototype.append=function(){N().group(this.name,this.initiallyExpanded)},d.prototype.append=function(){N().groupEnd()};var P=function(){I(),g?$&&te&&k():M(),I()&&_()};this.append=function(e){if(b){var t=f.getLayout().formatWithException(e);y.push(new h(e,t)),P()}},this.group=function(e,t){b&&(y.push(new p(e,t)),P())},this.groupEnd=function(){b&&(y.push(new d),P())};var _=function(){for(;y.length>0;)y.shift().append();c&&N().focus()};this.setAddedToLogger=function(e){this.loggers.push(e),enabled&&!o&&M()},this.clear=function(){j()&&N().clearLog(),y.length=0},this.focus=function(){j()&&N().focus()},this.focusCommandLine=function(){j()&&N().focusCommandLine()},this.focusSearch=function(){j()&&N().focusSearch()};var V=window;this.getCommandWindow=function(){return V},this.setCommandWindow=function(e){V=e},this.executeLastCommand=function(){j()&&N().evalLastCommand()};var B=new PatternLayout("%m");this.getCommandLayout=function(){return B},this.setCommandLayout=function(e){B=e},this.evalCommandAndAppend=function(e){var t={appendResult:!0,isError:!1},n="";try{var r,i;!V.eval&&V.execScript&&V.execScript("null");var o={};for(i=0,len=U.length;i<len;i++)o[U[i][0]]=U[i][1];var a=[],s=function(e){a.push([e,V[e]])};s("appender"),V.appender=f,s("commandReturnValue"),V.commandReturnValue=t,s("commandLineFunctionsHash"),V.commandLineFunctionsHash=o;var l=function(e){s(e),V[e]=function(){return this.commandLineFunctionsHash[e](f,arguments,t)}};for(i=0,len=U.length;i<len;i++)l(U[i][0]);for(V===window&&V.execScript?(s("evalExpr"),s("result"),window.evalExpr=e,V.execScript("window.result=eval(window.evalExpr);"),r=window.result):r=V.eval(e),n=isUndefined(r)?r:formatObjectExpansion(r,L),i=0,len=a.length;i<len;i++)V[a[i][0]]=a[i][1]}catch(u){n="Error evaluating command: "+getExceptionStringRep(u),t.isError=!0}if(t.appendResult){var c=">>> "+e;isUndefined(n)||(c+=newLine+n);var h=t.isError?Level.ERROR:Level.INFO,p=new LoggingEvent(null,new Date,h,[c],null),d=this.getLayout();this.setLayout(B),this.append(p),this.setLayout(d)}};var U=r.concat([]);this.addCommandLineFunction=function(e,t){U.push([e,t])};var H="log4javascriptCommandHistory";this.storeCommandHistory=function(e){setCookie(H,e.join(","))};var W=function(e){var t=n();e.open();for(var r=0,i=t.length;i>r;r++)e.writeln(t[r]);e.close()};this.setEventTypes(["load","unload"]);var q=function(){var e=N();e.setAppender(f),e.setNewestAtTop(x),e.setScrollToLatest(E),e.setMaxMessages(C),e.setShowCommandLine(S),e.setShowHideButton(A),e.setShowCloseButton(T),e.setMainWindow(window);var t=getCookie(H);t&&(e.commandHistory=t.split(","),e.currentCommandIndex=e.commandHistory.length),f.dispatchEvent("load",{win:e})};this.unload=function(){logLog.debug("unload "+this+", caller: "+this.unload.caller),$||(logLog.debug("really doing unload "+this),$=!0,v=!1,m=!1,f.dispatchEvent("unload",{}))};var G=function(e,t,n,r){function i(){try{$&&clearInterval(o),e(N())&&(clearInterval(o),n())}catch(t){clearInterval(o),b=!1,handleError(r,t)}}var o=setInterval(i,t)},z=function(){var e=document.domain!=location.hostname;return s?"":getBaseUrl()+"console.html"+(e?"?log4javascript_domain="+escape(document.domain):"")};if(e){var K=null,X=[];this.addCssProperty=function(e,t){R("cssProperties")&&X.push([e,t])};var J,Y=!1,Q=uniqueId+"_InPageAppender_"+w;this.hide=function(){g&&m&&(j()&&N().$("command").blur(),J.style.display="none",F=!0)},this.show=function(){g&&(m?(J.style.display="block",this.setShowCommandLine(S),F=!1):Y||k(!0))},this.isVisible=function(){return!F&&!$},this.close=function(e){$||e&&!confirm("This will permanently remove the console from the page. No more messages will be logged. Do you wish to continue?")||(J.parentNode.removeChild(J),this.unload())},D=function(){function e(){try{a||f.show(),q(),v=!0,_()}catch(e){b=!1,handleError(n,e)}}function t(){try{var t=function(e){return isLoaded(e)};s&&W(N().document),t(N())?e():G(t,100,e,n)}catch(r){b=!1,handleError(n,r)}}var n="InPageAppender.open: unable to create console iframe";F=!1,J=K.appendChild(document.createElement("div")),J.style.width=l,J.style.height=u,J.style.border="solid gray 1px";for(var r=0,i=X.length;i>r;r++)J.style[X[r][0]]=X[r][1];var o=s?"":" src='"+z()+"'";J.innerHTML="<iframe id='"+Q+"' name='"+Q+"' width='100%' height='100%' frameborder='0'"+o+" scrolling='no'></iframe>",$=!1;var c=function(e){try{return bool(e)&&bool(e.document)}catch(t){return!1}};c(N())?t():G(c,100,t,n),m=!0},k=function(e){if(e||!a){var n=function(){if(t)try{var e=document.getElementById(t);1==e.nodeType&&(K=e),D()}catch(n){handleError("InPageAppender.init: invalid container element '"+t+"' supplied",n)}else K=document.createElement("div"),K.style.position="fixed",K.style.left="0",K.style.right="0",K.style.bottom="0",document.body.appendChild(K),f.addCssProperty("borderWidth","1px 0 0 0"),f.addCssProperty("zIndex",1e6),D()};pageLoaded&&t&&t.appendChild?(K=t,D()):pageLoaded?n():log4javascript.addEventListener("load",n),Y=!0}},M=function(){k(),g=!0},N=function(){var e=window.frames[Q];return e?e:void 0},I=function(){return b&&!$?(m&&!v&&N()&&isLoaded(N())&&(v=!0),v):!1}}else{var Z=f.defaults.useOldPopUp,ee=f.defaults.complainAboutPopUpBlocking,te=this.defaults.reopenWhenClosed;this.isUseOldPopUp=function(){return Z},this.setUseOldPopUp=function(e){R("useOldPopUp")&&(Z=bool(e))},this.isComplainAboutPopUpBlocking=function(){return ee},this.setComplainAboutPopUpBlocking=function(e){R("complainAboutPopUpBlocking")&&(ee=bool(e))},this.isFocusPopUp=function(){return c},this.setFocusPopUp=function(e){c=bool(e)},this.isReopenWhenClosed=function(){return te},this.setReopenWhenClosed=function(e){te=bool(e)},this.close=function(){logLog.debug("close "+this);try{ne.close(),this.unload()}catch(e){}},this.hide=function(){logLog.debug("hide "+this),j()&&this.close()},this.show=function(){logLog.debug("show "+this),m||D()},this.isVisible=function(){return I()};var ne;D=function(){function e(){N().setCloseIfOpenerCloses(!Z||!s),q(),v=!0,_(),G(a,500,c,"PopUpAppender.checkPopUpClosed: error checking pop-up window")}var t="width="+l+",height="+u+",status,resizable",n="";try{var r=window.frameElement;r&&(n="_"+r.tagName+"_"+(r.name||r.id||""))}catch(i){n="_inaccessibleParentFrame"}var o="PopUp_"+location.host.replace(/[^a-z0-9]/gi,"_")+"_"+w+n;Z&&s||(o=o+"_"+uniqueId);var a=function(e){if($)return!0;try{return bool(e)&&e.closed}catch(t){}return!1},c=function(){$||f.unload()};try{if(ne=window.open(z(),o,t),$=!1,m=!0,ne&&ne.document)if(s&&Z&&isLoaded(ne))ne.mainPageReloaded(),e();else{s&&W(ne.document);var h=function(e){return bool(e)&&isLoaded(e)};isLoaded(ne)?e():G(h,100,e,"PopUpAppender.init: unable to create console window")}else b=!1,logLog.warn("PopUpAppender.init: pop-ups blocked, please unblock to use PopUpAppender"),ee&&handleError("log4javascript: pop-up windows appear to be blocked. Please unblock them to use pop-up logging.")}catch(p){handleError("PopUpAppender.init: error creating pop-up",p)}},k=function(){a||D()},M=function(){k(),g=!0},N=function(){return ne},I=function(){if(b&&!isUndefined(ne)&&!$){if(ne.closed||v&&isUndefined(ne.closed))return f.unload(),logLog.debug("PopUpAppender: pop-up closed"),!1;!v&&isLoaded(ne)&&(v=!0)}return b&&v&&!$}}this.getConsoleWindow=N},ConsoleAppender.addGlobalCommandLineFunction=function(e,t){r.push([e,t])},e.prototype=new ConsoleAppender,e.prototype.defaults={layout:new PatternLayout("%d{HH:mm:ss} %-5p - %m{1}%n"),initiallyMinimized:!1,focusPopUp:!1,lazyInit:!0,useOldPopUp:!0,complainAboutPopUpBlocking:!0,newestMessageAtTop:!1,scrollToLatestMessage:!0,width:"600",height:"400",reopenWhenClosed:!1,maxMessages:null,showCommandLine:!0,commandLineObjectExpansionDepth:1,showHideButton:!1,showCloseButton:!0,showLogEntryDeleteButtons:!0,useDocumentWrite:!0},e.prototype.toString=function(){return"PopUpAppender"},log4javascript.PopUpAppender=e,t.prototype=new ConsoleAppender,t.prototype.defaults={layout:new PatternLayout("%d{HH:mm:ss} %-5p - %m{1}%n"),initiallyMinimized:!1,lazyInit:!0,newestMessageAtTop:!1,scrollToLatestMessage:!0,width:"100%",height:"220px",maxMessages:null,showCommandLine:!0,commandLineObjectExpansionDepth:1,showHideButton:!1,showCloseButton:!1,showLogEntryDeleteButtons:!0,useDocumentWrite:!0},t.prototype.toString=function(){return"InPageAppender"},log4javascript.InPageAppender=t,log4javascript.InlineAppender=t}(),function(){function e(e){var t=0;for(var n in e)t=Math.max(toStr(n).length,t);var r=[];for(n in e){var i,o="  "+padWithSpaces(toStr(n),t+2);try{i=splitIntoLines(toStr(e[n])).join(padWithSpaces(newLine,t+6))}catch(a){i="[Error obtaining property. Details: "+getExceptionMessage(a)+"]"}r.push(o+i)}return r.join(newLine)}function t(e,n,r,l,u){function c(e){return e.nodeType==i.TEXT_NODE&&/^[ \t\r\n]*$/.test(e.nodeValue)}function h(e){return e.toString().replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/"/g,"&quot;")}function p(e){for(var t=e.style.cssText.split(";"),n="",r=0,i=t.length;i>r;r++){var o=t[r].split(":"),a=[];/^\s*$/.test(o[0])||a.push(trim(o[0]).toLowerCase()+":"+trim(o[1])),n=a.join(";")}return n}function d(e){if(e.prefix)return e.prefix;if(e.outerHTML){var t=new RegExp("<([^:]+):"+e.tagName+"[^>]*>","i");if(t.test(e.outerHTML))return RegExp.$1.toLowerCase()}return""}n="undefined"==typeof n?!0:!!n,"string"!=typeof r&&(r=""),l=!!l,u=!!u;var f,g="<",m=">";if(!n||e.nodeType==i.DOCUMENT_FRAGMENT_NODE){f="";for(var v=0,$=e.childNodes.length;$>v;v++)f+=t(e.childNodes[v],!0,r+s);return f}switch(e.nodeType){case i.ELEMENT_NODE:var y=e.tagName.toLowerCase();f=l?newLine+r:"",f+=g;var b=d(e),w=!!b;for(w&&(f+=b+":"),f+=y,v=0,$=e.attributes.length;$>v;v++){var x=e.attributes[v];x.specified&&null!==x.nodeValue&&"style"!==x.nodeName.toLowerCase()&&"string"==typeof x.nodeValue&&0!==x.nodeName.indexOf("_moz")&&(f+=" "+x.nodeName.toLowerCase()+'="',f+=h(x.nodeValue),f+='"')}if(e.style.cssText){var E=p(e);""!==E&&(f+=' style="'+p(e)+'"')}if(array_contains(a,y)||w&&!e.hasChildNodes())f+="/"+m;else{f+=m;for(var C=!(1===e.childNodes.length&&e.childNodes[0].nodeType===i.TEXT_NODE),S=array_contains(o,y),v=0,$=e.childNodes.length;$>v;v++)f+=t(e.childNodes[v],!0,r+s,C,S);var L=g+"/"+y+m;f+=C?newLine+r+L:L}return f;case i.TEXT_NODE:if(c(e))f="";else{if(u)f=e.nodeValue;else{for(var A=splitIntoLines(trim(e.nodeValue)),T=[],v=0,$=A.length;$>v;v++)T[v]=trim(A[v]);f=T.join(newLine+r)}l&&(f=newLine+r+f)}return f;case i.CDATA_SECTION_NODE:return"<![CDATA["+e.nodeValue+"]]>"+newLine;case i.DOCUMENT_NODE:f="";for(var v=0,$=e.childNodes.length;$>v;v++)f+=t(e.childNodes[v],!0,r);return f;default:return""}}function n(){ConsoleAppender.addGlobalCommandLineFunction("$",function(e,t,n){return document.getElementById(t[0])}),ConsoleAppender.addGlobalCommandLineFunction("dir",function(t,n,r){for(var i=[],o=0,a=n.length;a>o;o++)i[o]=e(n[o]);return i.join(newLine+newLine)}),ConsoleAppender.addGlobalCommandLineFunction("dirxml",function(e,n,r){for(var i=[],o=0,a=n.length;a>o;o++){e.getCommandWindow();i[o]=t(n[o])}return i.join(newLine+newLine)}),ConsoleAppender.addGlobalCommandLineFunction("cd",function(e,t,n){var r,i;return 0===t.length||""===t[0]?(r=window,i="Command line set to run in main window"):t[0].window==t[0]?(r=t[0],i="Command line set to run in frame '"+t[0].name+"'"):(r=window.frames[t[0]],r?i="Command line set to run in frame '"+t[0]+"'":(n.isError=!0,i="Frame '"+t[0]+"' does not exist",r=e.getCommandWindow())),e.setCommandWindow(r),i}),ConsoleAppender.addGlobalCommandLineFunction("clear",function(e,t,n){n.appendResult=!1,e.clear()}),ConsoleAppender.addGlobalCommandLineFunction("keys",function(e,t,n){var r=[];for(var i in t[0])r.push(i);return r}),ConsoleAppender.addGlobalCommandLineFunction("values",function(e,t,n){var r=[];for(var i in t[0])try{r.push(t[0][i])}catch(o){logLog.warn("values(): Unable to obtain value for key "+i+". Details: "+getExceptionMessage(o))}return r}),ConsoleAppender.addGlobalCommandLineFunction("expansionDepth",function(e,t,n){var r=parseInt(t[0],10);return isNaN(r)||0>r?(n.isError=!0,""+t[0]+" is not a valid expansion depth"):(e.setCommandLineObjectExpansionDepth(r),"Object expansion depth set to "+r)})}function r(){n()}var i={ELEMENT_NODE:1,ATTRIBUTE_NODE:2,TEXT_NODE:3,CDATA_SECTION_NODE:4,ENTITY_REFERENCE_NODE:5,ENTITY_NODE:6,PROCESSING_INSTRUCTION_NODE:7,COMMENT_NODE:8,DOCUMENT_NODE:9,DOCUMENT_TYPE_NODE:10,DOCUMENT_FRAGMENT_NODE:11,NOTATION_NODE:12},o=["script","pre"],a=["br","img","hr","param","link","area","input","col","base","meta"],s="  ";r()}(),log4javascript.setDocumentReady=function(){pageLoaded=!0,log4javascript.dispatchEvent("load",{})},window.addEventListener)window.addEventListener("load",log4javascript.setDocumentReady,!1);else if(window.attachEvent)window.attachEvent("onload",log4javascript.setDocumentReady);else{var oldOnload=window.onload;"function"!=typeof window.onload?window.onload=log4javascript.setDocumentReady:window.onload=function(e){oldOnload&&oldOnload(e),log4javascript.setDocumentReady()}}return window.log4javascript=log4javascript,log4javascript}();!function(e,t){"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?module.exports=t():e.store=t()}(this,function(){function e(){try{return o in r&&r[o]}catch(e){return!1}}var t,n={},r="undefined"!=typeof window?window:global,i=r.document,o="localStorage",a="script";if(n.disabled=!1,n.version="1.3.20",n.set=function(e,t){},n.get=function(e,t){},n.has=function(e){return void 0!==n.get(e)},n.remove=function(e){},n.clear=function(){},n.transact=function(e,t,r){null==r&&(r=t,t=null),null==t&&(t={});var i=n.get(e,t);r(i),n.set(e,i)},n.getAll=function(){},n.forEach=function(){},n.serialize=function(e){return JSON.stringify(e)},n.deserialize=function(e){if("string"==typeof e)try{return JSON.parse(e)}catch(t){return e||void 0}},e())t=r[o],n.set=function(e,r){return void 0===r?n.remove(e):(t.setItem(e,n.serialize(r)),r)},n.get=function(e,r){var i=n.deserialize(t.getItem(e));return void 0===i?r:i},n.remove=function(e){t.removeItem(e)},n.clear=function(){t.clear()},n.getAll=function(){var e={};return n.forEach(function(t,n){e[t]=n}),e},n.forEach=function(e){for(var r=0;r<t.length;r++){var i=t.key(r);e(i,n.get(i))}};else if(i&&i.documentElement.addBehavior){var s,l;try{l=new ActiveXObject("htmlfile"),l.open(),l.write("<"+a+">document.w=window</"+a+'><iframe src="/favicon.ico"></iframe>'),l.close(),s=l.w.frames[0].document,t=s.createElement("div")}catch(u){t=i.createElement("div"),s=i.body}var c=function(e){return function(){var r=Array.prototype.slice.call(arguments,0);r.unshift(t),s.appendChild(t),t.addBehavior("#default#userData"),t.load(o);var i=e.apply(n,r);return s.removeChild(t),i}},h=new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]","g"),p=function(e){return e.replace(/^d/,"___$&").replace(h,"___")};n.set=c(function(e,t,r){return t=p(t),void 0===r?n.remove(t):(e.setAttribute(t,n.serialize(r)),e.save(o),r)}),n.get=c(function(e,t,r){t=p(t);var i=n.deserialize(e.getAttribute(t));return void 0===i?r:i}),n.remove=c(function(e,t){t=p(t),e.removeAttribute(t),e.save(o)}),n.clear=c(function(e){var t=e.XMLDocument.documentElement.attributes;e.load(o);for(var n=t.length-1;n>=0;n--)e.removeAttribute(t[n].name);e.save(o)}),n.getAll=function(e){var t={};return n.forEach(function(e,n){t[e]=n}),t},n.forEach=c(function(e,t){for(var r,i=e.XMLDocument.documentElement.attributes,o=0;r=i[o];++o)t(r.name,n.deserialize(e.getAttribute(r.name)))})}try{var d="__storejs__";n.set(d,d),n.get(d)!=d&&(n.disabled=!0),n.remove(d)}catch(u){n.disabled=!0}return n.enabled=!n.disabled,n});
//# sourceMappingURL=data:application/json;base64,
