!function(e){"use strict";function t(e,t){return t=t||Error,function(){var n,r,i=2,o=arguments,a=o[0],s="["+(e?e+":":"")+a+"] ",l=o[1];for(s+=l.replace(/\{\d+\}/g,function(e){var t=+e.slice(1,-1),n=t+i;return n<o.length?ye(o[n]):e}),s+="\nhttp://errors.angularjs.org/1.5.5/"+(e?e+"/":"")+a,r=i,n="?";r<o.length;r++,n="&")s+=n+"p"+(r-i)+"="+encodeURIComponent(ye(o[r]));return new t(s)}}function n(e){if(null==e||T(e))return!1;if(Wr(e)||w(e)||_r&&e instanceof _r)return!0;var t="length"in Object(e)&&e.length;return x(t)&&(t>=0&&(t-1 in e||e instanceof Array)||"function"==typeof e.item)}function r(e,t,i){var o,a;if(e)if(C(e))for(o in e)"prototype"==o||"length"==o||"name"==o||e.hasOwnProperty&&!e.hasOwnProperty(o)||t.call(i,e[o],o,e);else if(Wr(e)||n(e)){var s="object"!=typeof e;for(o=0,a=e.length;a>o;o++)(s||o in e)&&t.call(i,e[o],o,e)}else if(e.forEach&&e.forEach!==r)e.forEach(t,i,e);else if(b(e))for(o in e)t.call(i,e[o],o,e);else if("function"==typeof e.hasOwnProperty)for(o in e)e.hasOwnProperty(o)&&t.call(i,e[o],o,e);else for(o in e)Lr.call(e,o)&&t.call(i,e[o],o,e);return e}function i(e,t,n){for(var r=Object.keys(e).sort(),i=0;i<r.length;i++)t.call(n,e[r[i]],r[i]);return r}function o(e){return function(t,n){e(n,t)}}function a(){return++Gr}function s(e,t){t?e.$$hashKey=t:delete e.$$hashKey}function l(e,t,n){for(var r=e.$$hashKey,i=0,o=t.length;o>i;++i){var a=t[i];if($(a)||C(a))for(var u=Object.keys(a),c=0,p=u.length;p>c;c++){var d=u[c],h=a[d];n&&$(h)?E(h)?e[d]=new Date(h.valueOf()):S(h)?e[d]=new RegExp(h):h.nodeName?e[d]=h.cloneNode(!0):_(h)?e[d]=h.clone():($(e[d])||(e[d]=Wr(h)?[]:{}),l(e[d],[h],!0)):e[d]=h}}return s(e,r),e}function u(e){return l(e,Pr.call(arguments,1),!1)}function c(e){return l(e,Pr.call(arguments,1),!0)}function p(e){return parseInt(e,10)}function d(e,t){return u(Object.create(e),t)}function h(){}function f(e){return e}function g(e){return function(){return e}}function m(e){return C(e.toString)&&e.toString!==Ur}function v(e){return"undefined"==typeof e}function y(e){return"undefined"!=typeof e}function $(e){return null!==e&&"object"==typeof e}function b(e){return null!==e&&"object"==typeof e&&!Br(e)}function w(e){return"string"==typeof e}function x(e){return"number"==typeof e}function E(e){return"[object Date]"===Ur.call(e)}function C(e){return"function"==typeof e}function S(e){return"[object RegExp]"===Ur.call(e)}function T(e){return e&&e.window===e}function A(e){return e&&e.$evalAsync&&e.$watch}function N(e){return"[object File]"===Ur.call(e)}function L(e){return"[object FormData]"===Ur.call(e)}function O(e){return"[object Blob]"===Ur.call(e)}function I(e){return"boolean"==typeof e}function k(e){return e&&C(e.then)}function R(e){return e&&x(e.length)&&zr.test(Ur.call(e))}function M(e){return"[object ArrayBuffer]"===Ur.call(e)}function _(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function D(e){var t,n={},r=e.split(",");for(t=0;t<r.length;t++)n[r[t]]=!0;return n}function j(e){return Or(e.nodeName||e[0]&&e[0].nodeName)}function P(e,t){var n=e.indexOf(t);return n>=0&&e.splice(n,1),n}function F(e,t){function n(e,t){var n,r=t.$$hashKey;if(Wr(e))for(var o=0,a=e.length;a>o;o++)t.push(i(e[o]));else if(b(e))for(n in e)t[n]=i(e[n]);else if(e&&"function"==typeof e.hasOwnProperty)for(n in e)e.hasOwnProperty(n)&&(t[n]=i(e[n]));else for(n in e)Lr.call(e,n)&&(t[n]=i(e[n]));return s(t,r),t}function i(e){if(!$(e))return e;var t=a.indexOf(e);if(-1!==t)return l[t];if(T(e)||A(e))throw Hr("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r=!1,i=o(e);return void 0===i&&(i=Wr(e)?[]:Object.create(Br(e)),r=!0),a.push(e),l.push(i),r?n(e,i):i}function o(e){switch(Ur.call(e)){case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Float32Array]":case"[object Float64Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return new e.constructor(i(e.buffer));case"[object ArrayBuffer]":if(!e.slice){var t=new ArrayBuffer(e.byteLength);return new Uint8Array(t).set(new Uint8Array(e)),t}return e.slice(0);case"[object Boolean]":case"[object Number]":case"[object String]":case"[object Date]":return new e.constructor(e.valueOf());case"[object RegExp]":var n=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]);return n.lastIndex=e.lastIndex,n;case"[object Blob]":return new e.constructor([e],{type:e.type})}return C(e.cloneNode)?e.cloneNode(!0):void 0}var a=[],l=[];if(t){if(R(t)||M(t))throw Hr("cpta","Can't copy! TypedArray destination cannot be mutated.");if(e===t)throw Hr("cpi","Can't copy! Source and destination are identical.");return Wr(t)?t.length=0:r(t,function(e,n){"$$hashKey"!==n&&delete t[n]}),a.push(e),l.push(t),n(e,t)}return i(e)}function q(e,t){if(Wr(e)){t=t||[];for(var n=0,r=e.length;r>n;n++)t[n]=e[n]}else if($(e)){t=t||{};for(var i in e)"$"===i.charAt(0)&&"$"===i.charAt(1)||(t[i]=e[i])}return t||e}function U(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var n,r,i,o=typeof e,a=typeof t;if(o==a&&"object"==o){if(!Wr(e)){if(E(e))return E(t)?U(e.getTime(),t.getTime()):!1;if(S(e))return S(t)?e.toString()==t.toString():!1;if(A(e)||A(t)||T(e)||T(t)||Wr(t)||E(t)||S(t))return!1;i=ge();for(r in e)if("$"!==r.charAt(0)&&!C(e[r])){if(!U(e[r],t[r]))return!1;i[r]=!0}for(r in t)if(!(r in i)&&"$"!==r.charAt(0)&&y(t[r])&&!C(t[r]))return!1;return!0}if(!Wr(t))return!1;if((n=e.length)==t.length){for(r=0;n>r;r++)if(!U(e[r],t[r]))return!1;return!0}}return!1}function B(e,t,n){return e.concat(Pr.call(t,n))}function H(e,t){return Pr.call(e,t||0)}function V(e,t){var n=arguments.length>2?H(arguments,2):[];return!C(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,B(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function G(t,n){var r=n;return"string"==typeof t&&"$"===t.charAt(0)&&"$"===t.charAt(1)?r=void 0:T(n)?r="$WINDOW":n&&e.document===n?r="$DOCUMENT":A(n)&&(r="$SCOPE"),r}function W(e,t){return v(e)?void 0:(x(t)||(t=t?2:null),JSON.stringify(e,G,t))}function z(e){return w(e)?JSON.parse(e):e}function K(e,t){e=e.replace(Jr,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function Y(e,t){return e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+t),e}function X(e,t,n){n=n?-1:1;var r=e.getTimezoneOffset(),i=K(t,r);return Y(e,n*(i-r))}function Q(e){e=_r(e).clone();try{e.empty()}catch(t){}var n=_r("<div>").append(e).html();try{return e[0].nodeType===ii?Or(n):n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(e,t){return"<"+Or(t)})}catch(t){return Or(n)}}function J(e){try{return decodeURIComponent(e)}catch(t){}}function Z(e){var t={};return r((e||"").split("&"),function(e){var n,r,i;e&&(r=e=e.replace(/\+/g,"%20"),n=e.indexOf("="),-1!==n&&(r=e.substring(0,n),i=e.substring(n+1)),r=J(r),y(r)&&(i=y(i)?J(i):!0,Lr.call(t,r)?Wr(t[r])?t[r].push(i):t[r]=[t[r],i]:t[r]=i))}),t}function ee(e){var t=[];return r(e,function(e,n){Wr(e)?r(e,function(e){t.push(ne(n,!0)+(e===!0?"":"="+ne(e,!0)))}):t.push(ne(n,!0)+(e===!0?"":"="+ne(e,!0)))}),t.length?t.join("&"):""}function te(e){return ne(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function ne(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function re(e,t){var n,r,i=Zr.length;for(r=0;i>r;++r)if(n=Zr[r]+t,w(n=e.getAttribute(n)))return n;return null}function ie(e,t){var n,i,o={};r(Zr,function(t){var r=t+"app";!n&&e.hasAttribute&&e.hasAttribute(r)&&(n=e,i=e.getAttribute(r))}),r(Zr,function(t){var r,o=t+"app";!n&&(r=e.querySelector("["+o.replace(":","\\:")+"]"))&&(n=r,i=r.getAttribute(o))}),n&&(o.strictDi=null!==re(n,"strict-di"),t(n,i?[i]:[],o))}function oe(t,n,i){$(i)||(i={});var o={strictDi:!1};i=u(o,i);var a=function(){if(t=_r(t),t.injector()){var r=t[0]===e.document?"document":Q(t);throw Hr("btstrpd","App already bootstrapped with this element '{0}'",r.replace(/</,"&lt;").replace(/>/,"&gt;"))}n=n||[],n.unshift(["$provide",function(e){e.value("$rootElement",t)}]),i.debugInfoEnabled&&n.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),n.unshift("ng");var o=nt(n,i.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),o},s=/^NG_ENABLE_DEBUG_INFO!/,l=/^NG_DEFER_BOOTSTRAP!/;return e&&s.test(e.name)&&(i.debugInfoEnabled=!0,e.name=e.name.replace(s,"")),e&&!l.test(e.name)?a():(e.name=e.name.replace(l,""),Vr.resumeBootstrap=function(e){return r(e,function(e){n.push(e)}),a()},void(C(Vr.resumeDeferredBootstrap)&&Vr.resumeDeferredBootstrap()))}function ae(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function se(e){var t=Vr.element(e).injector();if(!t)throw Hr("test","no injector found for element argument to getTestability");return t.get("$$testability")}function le(e,t){return t=t||"_",e.replace(ei,function(e,n){return(n?t:"")+e.toLowerCase()})}function ue(){var t;if(!ti){var n=Qr();Dr=v(n)?e.jQuery:n?e[n]:void 0,Dr&&Dr.fn.on?(_r=Dr,u(Dr.fn,{scope:Ei.scope,isolateScope:Ei.isolateScope,controller:Ei.controller,injector:Ei.injector,inheritedData:Ei.inheritedData}),t=Dr.cleanData,Dr.cleanData=function(e){for(var n,r,i=0;null!=(r=e[i]);i++)n=Dr._data(r,"events"),n&&n.$destroy&&Dr(r).triggerHandler("$destroy");t(e)}):_r=Le,Vr.element=_r,ti=!0}}function ce(e,t,n){if(!e)throw Hr("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function pe(e,t,n){return n&&Wr(e)&&(e=e[e.length-1]),ce(C(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function de(e,t){if("hasOwnProperty"===e)throw Hr("badname","hasOwnProperty is not a valid {0} name",t)}function he(e,t,n){if(!t)return e;for(var r,i=t.split("."),o=e,a=i.length,s=0;a>s;s++)r=i[s],e&&(e=(o=e)[r]);return!n&&C(e)?V(o,e):e}function fe(e){for(var t,n=e[0],r=e[e.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(t||e[i]!==n)&&(t||(t=_r(Pr.call(e,0,i))),t.push(n));return t||e}function ge(){return Object.create(null)}function me(e){function n(e,t,n){return e[t]||(e[t]=n())}var r=t("$injector"),i=t("ng"),o=n(e,"angular",Object);return o.$$minErr=o.$$minErr||t,n(o,"module",function(){var e={};return function(t,o,a){var s=function(e,t){if("hasOwnProperty"===e)throw i("badname","hasOwnProperty is not a valid {0} name",t)};return s(t,"module"),o&&e.hasOwnProperty(t)&&(e[t]=null),n(e,t,function(){function e(e,t,n,r){return r||(r=i),function(){return r[n||"push"]([e,t,arguments]),c}}function n(e,n){return function(r,o){return o&&C(o)&&(o.$$moduleName=t),i.push([e,n,arguments]),c}}if(!o)throw r("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",t);var i=[],s=[],l=[],u=e("$injector","invoke","push",s),c={_invokeQueue:i,_configBlocks:s,_runBlocks:l,requires:o,name:t,provider:n("$provide","provider"),factory:n("$provide","factory"),service:n("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:n("$provide","decorator"),animation:n("$animateProvider","register"),filter:n("$filterProvider","register"),controller:n("$controllerProvider","register"),directive:n("$compileProvider","directive"),component:n("$compileProvider","component"),config:u,run:function(e){return l.push(e),this}};return a&&u(a),c})}})}function ve(e){var t=[];return JSON.stringify(e,function(e,n){if(n=G(e,n),$(n)){if(t.indexOf(n)>=0)return"...";t.push(n)}return n})}function ye(e){return"function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):v(e)?"undefined":"string"!=typeof e?ve(e):e}function $e(n){u(n,{bootstrap:oe,copy:F,extend:u,merge:c,equals:U,element:_r,forEach:r,injector:nt,noop:h,bind:V,toJson:W,fromJson:z,identity:f,isUndefined:v,isDefined:y,isString:w,isFunction:C,isObject:$,isNumber:x,isElement:_,isArray:Wr,version:li,isDate:E,lowercase:Or,uppercase:Ir,callbacks:{counter:0},getTestability:se,$$minErr:t,$$csp:Xr,reloadWithDebugInfo:ae}),(jr=me(e))("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:En}),e.provider("$compile",ht).directive({a:Io,input:Xo,textarea:Xo,form:Do,script:Ga,select:Ka,style:Xa,option:Ya,ngBind:Zo,ngBindHtml:ta,ngBindTemplate:ea,ngClass:ra,ngClassEven:oa,ngClassOdd:ia,ngCloak:aa,ngController:sa,ngForm:jo,ngHide:Pa,ngIf:ca,ngInclude:pa,ngInit:ha,ngNonBindable:La,ngPluralize:Ra,ngRepeat:Ma,ngShow:ja,ngStyle:Fa,ngSwitch:qa,ngSwitchWhen:Ua,ngSwitchDefault:Ba,ngOptions:ka,ngTransclude:Va,ngModel:Ta,ngList:fa,ngChange:na,pattern:Ja,ngPattern:Ja,required:Qa,ngRequired:Qa,minlength:es,ngMinlength:es,maxlength:Za,ngMaxlength:Za,ngValue:Jo,ngModelOptions:Na}).directive({ngInclude:da}).directive(ko).directive(la),e.provider({$anchorScroll:rt,$animate:Fi,$animateCss:Bi,$$animateJs:ji,$$animateQueue:Pi,$$AnimateRunner:Ui,$$animateAsyncRun:qi,$browser:ut,$cacheFactory:ct,$controller:$t,$document:bt,$exceptionHandler:wt,$filter:jn,$$forceReflow:Ki,$interpolate:_t,$interval:Dt,$http:It,$httpParamSerializer:Et,$httpParamSerializerJQLike:Ct,$httpBackend:Rt,$xhrFactory:kt,$location:Xt,$log:Qt,$parse:vn,$rootScope:xn,$q:yn,$$q:$n,$sce:An,$sceDelegate:Tn,$sniffer:Nn,$templateCache:pt,$templateRequest:Ln,$$testability:On,$timeout:In,$window:Mn,$$rAF:wn,$$jqLite:Xe,$$HashMap:Ai,$$cookieReader:Dn})}])}function be(){return++ci}function we(e){return e.replace(hi,function(e,t,n,r){return r?n.toUpperCase():n}).replace(fi,"Moz$1")}function xe(e){return!yi.test(e)}function Ee(e){var t=e.nodeType;return t===ni||!t||t===ai}function Ce(e){for(var t in ui[e.ng339])return!0;return!1}function Se(e){for(var t=0,n=e.length;n>t;t++)Re(e[t])}function Te(e,t){var n,i,o,a,s=t.createDocumentFragment(),l=[];if(xe(e))l.push(t.createTextNode(e));else{for(n=n||s.appendChild(t.createElement("div")),i=($i.exec(e)||["",""])[1].toLowerCase(),o=wi[i]||wi._default,n.innerHTML=o[1]+e.replace(bi,"<$1></$2>")+o[2],a=o[0];a--;)n=n.lastChild;l=B(l,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",r(l,function(e){s.appendChild(e)}),s}function Ae(t,n){n=n||e.document;var r;return(r=vi.exec(t))?[n.createElement(r[1])]:(r=Te(t,n))?r.childNodes:[]}function Ne(e,t){var n=e.parentNode;n&&n.replaceChild(t,e),t.appendChild(e)}function Le(e){if(e instanceof Le)return e;var t;if(w(e)&&(e=Kr(e),t=!0),!(this instanceof Le)){if(t&&"<"!=e.charAt(0))throw mi("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new Le(e)}t?Fe(this,Ae(e)):Fe(this,e)}function Oe(e){return e.cloneNode(!0)}function Ie(e,t){if(t||Re(e),e.querySelectorAll)for(var n=e.querySelectorAll("*"),r=0,i=n.length;i>r;r++)Re(n[r])}function ke(e,t,n,i){if(y(i))throw mi("offargs","jqLite#off() does not support the `selector` argument");var o=Me(e),a=o&&o.events,s=o&&o.handle;if(s)if(t){var l=function(t){var r=a[t];y(n)&&P(r||[],n),y(n)&&r&&r.length>0||(di(e,t,s),delete a[t])};r(t.split(" "),function(e){l(e),gi[e]&&l(gi[e])})}else for(t in a)"$destroy"!==t&&di(e,t,s),delete a[t]}function Re(e,t){var n=e.ng339,r=n&&ui[n];if(r){if(t)return void delete r.data[t];r.handle&&(r.events.$destroy&&r.handle({},"$destroy"),ke(e)),delete ui[n],e.ng339=void 0}}function Me(e,t){var n=e.ng339,r=n&&ui[n];return t&&!r&&(e.ng339=n=be(),r=ui[n]={events:{},data:{},handle:void 0}),r}function _e(e,t,n){if(Ee(e)){var r=y(n),i=!r&&t&&!$(t),o=!t,a=Me(e,!i),s=a&&a.data;if(r)s[t]=n;else{if(o)return s;if(i)return s&&s[t];u(s,t)}}}function De(e,t){return e.getAttribute?(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")>-1:!1}function je(e,t){t&&e.setAttribute&&r(t.split(" "),function(t){e.setAttribute("class",Kr((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+Kr(t)+" "," ")))})}function Pe(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");r(t.split(" "),function(e){e=Kr(e),-1===n.indexOf(" "+e+" ")&&(n+=e+" ")}),e.setAttribute("class",Kr(n))}}function Fe(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;n>r;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function qe(e,t){return Ue(e,"$"+(t||"ngController")+"Controller")}function Ue(e,t,n){e.nodeType==ai&&(e=e.documentElement);for(var r=Wr(t)?t:[t];e;){for(var i=0,o=r.length;o>i;i++)if(y(n=_r.data(e,r[i])))return n;e=e.parentNode||e.nodeType===si&&e.host}}function Be(e){for(Ie(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function He(e,t){t||Ie(e);var n=e.parentNode;n&&n.removeChild(e)}function Ve(t,n){n=n||e,"complete"===n.document.readyState?n.setTimeout(t):_r(n).on("load",t)}function Ge(e,t){var n=Ci[t.toLowerCase()];return n&&Si[j(e)]&&n}function We(e){return Ti[e]}function ze(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=t[r||n.type],o=i?i.length:0;if(o){if(v(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0};var s=i.specialHandlerWrapper||Ke;o>1&&(i=q(i));for(var l=0;o>l;l++)n.isImmediatePropagationStopped()||s(e,n,i[l])}};return n.elem=e,n}function Ke(e,t,n){n.call(e,t)}function Ye(e,t,n){var r=t.relatedTarget;r&&(r===e||xi.call(e,r))||n.call(e,t)}function Xe(){this.$get=function(){return u(Le,{hasClass:function(e,t){return e.attr&&(e=e[0]),De(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),Pe(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),je(e,t)}})}}function Qe(e,t){var n=e&&e.$$hashKey;if(n)return"function"==typeof n&&(n=e.$$hashKey()),n;var r=typeof e;return n="function"==r||"object"==r&&null!==e?e.$$hashKey=r+":"+(t||a)():r+":"+e}function Je(e,t){if(t){var n=0;this.nextUid=function(){return++n}}r(e,this.put,this)}function Ze(e){var t=Function.prototype.toString.call(e).replace(ki,""),n=t.match(Ni)||t.match(Li);return n}function et(e){var t=Ze(e);return t?"function("+(t[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function tt(e,t,n){var i,o,a;if("function"==typeof e){if(!(i=e.$inject)){if(i=[],e.length){if(t)throw w(n)&&n||(n=e.name||et(e)),Ri("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);o=Ze(e),r(o[1].split(Oi),function(e){e.replace(Ii,function(e,t,n){i.push(n)})})}e.$inject=i}}else Wr(e)?(a=e.length-1,pe(e[a],"fn"),i=e.slice(0,a)):pe(e,"fn",!0);return i}function nt(e,t){function n(e){return function(t,n){return $(t)?void r(t,o(e)):e(t,n)}}function i(e,t){if(de(e,"service"),(C(t)||Wr(t))&&(t=E.instantiate(t)),!t.$get)throw Ri("pget","Provider '{0}' must define $get factory method.",e);return x[e+m]=t}function a(e,t){return function(){var n=A.invoke(t,this);if(v(n))throw Ri("undef","Provider '{0}' must return a value from $get factory method.",e);return n}}function s(e,t,n){return i(e,{$get:n!==!1?a(e,t):t})}function l(e,t){return s(e,["$injector",function(e){return e.instantiate(t)}])}function u(e,t){return s(e,g(t),!1)}function c(e,t){de(e,"constant"),x[e]=t,S[e]=t}function p(e,t){var n=E.get(e+m),r=n.$get;n.$get=function(){var e=A.invoke(r,n);return A.invoke(t,null,{$delegate:e})}}function d(e){ce(v(e)||Wr(e),"modulesToLoad","not an array");var t,n=[];return r(e,function(e){function r(e){var t,n;for(t=0,n=e.length;n>t;t++){var r=e[t],i=E.get(r[0]);i[r[1]].apply(i,r[2])}}if(!b.get(e)){b.put(e,!0);try{w(e)?(t=jr(e),n=n.concat(d(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):C(e)?n.push(E.invoke(e)):Wr(e)?n.push(E.invoke(e)):pe(e,"module")}catch(i){throw Wr(e)&&(e=e[e.length-1]),i.message&&i.stack&&-1==i.stack.indexOf(i.message)&&(i=i.message+"\n"+i.stack),Ri("modulerr","Failed to instantiate module {0} due to:\n{1}",e,i.stack||i.message||i)}}}),n}function h(e,n){function r(t,r){if(e.hasOwnProperty(t)){if(e[t]===f)throw Ri("cdep","Circular dependency found: {0}",t+" <- "+y.join(" <- "));return e[t]}try{return y.unshift(t),e[t]=f,e[t]=n(t,r)}catch(i){throw e[t]===f&&delete e[t],i}finally{y.shift()}}function i(e,n,i){for(var o=[],a=nt.$$annotate(e,t,i),s=0,l=a.length;l>s;s++){var u=a[s];if("string"!=typeof u)throw Ri("itkn","Incorrect injection token! Expected service name as string, got {0}",u);o.push(n&&n.hasOwnProperty(u)?n[u]:r(u,i))}return o}function o(e){return 11>=Mr?!1:"function"==typeof e&&/^(?:class\s|constructor\()/.test(Function.prototype.toString.call(e))}function a(e,t,n,r){"string"==typeof n&&(r=n,n=null);var a=i(e,n,r);return Wr(e)&&(e=e[e.length-1]),o(e)?(a.unshift(null),new(Function.prototype.bind.apply(e,a))):e.apply(t,a)}function s(e,t,n){var r=Wr(e)?e[e.length-1]:e,o=i(e,t,n);return o.unshift(null),new(Function.prototype.bind.apply(r,o))}return{invoke:a,instantiate:s,get:r,annotate:nt.$$annotate,has:function(t){return x.hasOwnProperty(t+m)||e.hasOwnProperty(t)}}}t=t===!0;var f={},m="Provider",y=[],b=new Je([],!0),x={$provide:{provider:n(i),factory:n(s),service:n(l),value:n(u),constant:n(c),decorator:p}},E=x.$injector=h(x,function(e,t){throw Vr.isString(t)&&y.push(t),Ri("unpr","Unknown provider: {0}",y.join(" <- "))}),S={},T=h(S,function(e,t){var n=E.get(e+m,t);return A.invoke(n.$get,n,void 0,e)}),A=T;x["$injector"+m]={$get:g(T)};var N=d(e);return A=T.get("$injector"),A.strictDi=t,r(N,function(e){e&&A.invoke(e)}),A}function rt(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,n,r){function i(e){var t=null;return Array.prototype.some.call(e,function(e){return"a"===j(e)?(t=e,!0):void 0}),t}function o(){var e=s.yOffset;if(C(e))e=e();else if(_(e)){var n=e[0],r=t.getComputedStyle(n);e="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else x(e)||(e=0);return e}function a(e){if(e){e.scrollIntoView();var n=o();if(n){var r=e.getBoundingClientRect().top;t.scrollBy(0,r-n)}}else t.scrollTo(0,0)}function s(e){e=w(e)?e:n.hash();var t;e?(t=l.getElementById(e))?a(t):(t=i(l.getElementsByName(e)))?a(t):"top"===e&&a(null):a(null)}var l=t.document;return e&&r.$watch(function(){return n.hash()},function(e,t){e===t&&""===e||Ve(function(){r.$evalAsync(s)})}),s}]}function it(e,t){return e||t?e?t?(Wr(e)&&(e=e.join(" ")),Wr(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function ot(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType===_i)return n}}function at(e){w(e)&&(e=e.split(" "));var t=ge();return r(e,function(e){e.length&&(t[e]=!0)}),t}function st(e){return $(e)?e:{}}function lt(e,t,n,i){function o(e){try{e.apply(null,H(arguments,1))}finally{if(y--,0===y)for(;$.length;)try{$.pop()()}catch(t){n.error(t)}}}function a(e){var t=e.indexOf("#");return-1===t?"":e.substr(t)}function s(){C=null,l(),u()}function l(){b=S(),b=v(b)?null:b,U(b,N)&&(b=N),N=b}function u(){x===c.url()&&w===b||(x=c.url(),w=b,r(T,function(e){e(c.url(),b)}))}var c=this,p=e.location,d=e.history,f=e.setTimeout,g=e.clearTimeout,m={};c.isMock=!1;var y=0,$=[];c.$$completeOutstandingRequest=o,c.$$incOutstandingRequestCount=function(){y++},c.notifyWhenNoOutstandingRequests=function(e){0===y?e():$.push(e)};var b,w,x=p.href,E=t.find("base"),C=null,S=i.history?function(){try{return d.state}catch(e){}}:h;l(),w=b,c.url=function(t,n,r){if(v(r)&&(r=null),p!==e.location&&(p=e.location),d!==e.history&&(d=e.history),t){var o=w===r;if(x===t&&(!i.history||o))return c;var s=x&&Ut(x)===Ut(t);return x=t,w=r,!i.history||s&&o?(s&&!C||(C=t),n?p.replace(t):s?p.hash=a(t):p.href=t,p.href!==t&&(C=t)):(d[n?"replaceState":"pushState"](r,"",t),l(),w=b),c}return C||p.href.replace(/%27/g,"'")},c.state=function(){return b};var T=[],A=!1,N=null;c.onUrlChange=function(t){return A||(i.history&&_r(e).on("popstate",s),_r(e).on("hashchange",s),A=!0),T.push(t),t},c.$$applicationDestroyed=function(){_r(e).off("hashchange popstate",s)},c.$$checkUrlChange=u,c.baseHref=function(){var e=E.attr("href");return e?e.replace(/^(https?\:)?\/\/[^\/]*/,""):""},c.defer=function(e,t){var n;return y++,n=f(function(){delete m[n],o(e)},t||0),m[n]=!0,n},c.defer.cancel=function(e){return m[e]?(delete m[e],g(e),o(h),!0):!1}}function ut(){this.$get=["$window","$log","$sniffer","$document",function(e,t,n,r){return new lt(e,r,t,n)}]}function ct(){this.$get=function(){function e(e,r){function i(e){e!=d&&(h?h==e&&(h=e.n):h=e,o(e.n,e.p),o(e,d),d=e,d.n=null)}function o(e,t){e!=t&&(e&&(e.p=t),t&&(t.n=e))}if(e in n)throw t("$cacheFactory")("iid","CacheId '{0}' is already taken!",e);var a=0,s=u({},r,{id:e}),l=ge(),c=r&&r.capacity||Number.MAX_VALUE,p=ge(),d=null,h=null;return n[e]={put:function(e,t){if(!v(t)){if(c<Number.MAX_VALUE){var n=p[e]||(p[e]={key:e});i(n)}return e in l||a++,l[e]=t,a>c&&this.remove(h.key),t}},get:function(e){if(c<Number.MAX_VALUE){var t=p[e];if(!t)return;i(t)}return l[e]},remove:function(e){if(c<Number.MAX_VALUE){var t=p[e];if(!t)return;t==d&&(d=t.p),t==h&&(h=t.n),o(t.n,t.p),delete p[e]}e in l&&(delete l[e],a--)},removeAll:function(){l=ge(),a=0,p=ge(),d=h=null},destroy:function(){l=null,s=null,p=null,delete n[e]},info:function(){return u({},s,{size:a})}}}var n={};return e.info=function(){var e={};return r(n,function(t,n){e[n]=t.info()}),e},e.get=function(e){return n[e]},e}}function pt(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function dt(){}function ht(t,n){function i(e,t,n){var i=/^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/,o=ge();return r(e,function(e,r){if(e in S)return void(o[r]=S[e]);var a=e.match(i);if(!a)throw Hi("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",t,r,e,n?"controller bindings definition":"isolate scope definition");o[r]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||r},a[4]&&(S[e]=o[r])}),o}function a(e,t){var n={isolateScope:null,bindToController:null};if($(e.scope)&&(e.bindToController===!0?(n.bindToController=i(e.scope,t,!0),n.isolateScope={}):n.isolateScope=i(e.scope,t,!1)),$(e.bindToController)&&(n.bindToController=i(e.bindToController,t,!0)),$(n.bindToController)){var r=e.controller,o=e.controllerAs;if(!r)throw Hi("noctrl","Cannot bind to controller without directive '{0}'s controller.",t);if(!yt(r,o))throw Hi("noident","Cannot bind to controller without identifier for directive '{0}'.",t)}return n}function s(e){var t=e.charAt(0);if(!t||t!==Or(t))throw Hi("baddir","Directive/Component name '{0}' is invalid. The first character must be a lowercase letter",e);if(e!==e.trim())throw Hi("baddir","Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",e)}var l={},c="Directive",p=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,m=/(([\w\-]+)(?:\:([^;]+))?;?)/,b=D("ngSrc,ngSrcset,src,srcset"),x=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,E=/^(on[a-z]+|formaction)$/,S=ge();this.directive=function L(e,n){return de(e,"directive"),w(e)?(s(e),ce(n,"directiveFactory"),l.hasOwnProperty(e)||(l[e]=[],t.factory(e+c,["$injector","$exceptionHandler",function(t,n){var i=[];return r(l[e],function(r,o){try{var a=t.invoke(r);C(a)?a={compile:g(a)}:!a.compile&&a.link&&(a.compile=g(a.link)),a.priority=a.priority||0,a.index=o,a.name=a.name||e,a.require=a.require||a.controller&&a.name,a.restrict=a.restrict||"EA",a.$$moduleName=r.$$moduleName,i.push(a)}catch(s){n(s)}}),i}])),l[e].push(n)):r(e,o(L)),this},this.component=function(e,t){function n(e){function n(t){return C(t)||Wr(t)?function(n,r){return e.invoke(t,this,{$element:n,$attrs:r})}:t}var o=t.template||t.templateUrl?t.template:"",a={controller:i,controllerAs:yt(t.controller)||t.controllerAs||"$ctrl",template:n(o),templateUrl:n(t.templateUrl),transclude:t.transclude,scope:{},bindToController:t.bindings||{},restrict:"E",require:t.require};return r(t,function(e,t){"$"===t.charAt(0)&&(a[t]=e)}),a}var i=t.controller||function(){};return r(t,function(e,t){"$"===t.charAt(0)&&(n[t]=e,C(i)&&(i[t]=e))}),n.$inject=["$injector"],this.directive(e,n)},this.aHrefSanitizationWhitelist=function(e){return y(e)?(n.aHrefSanitizationWhitelist(e),this):n.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return y(e)?(n.imgSrcSanitizationWhitelist(e),this):n.imgSrcSanitizationWhitelist()};var T=!0;this.debugInfoEnabled=function(e){return y(e)?(T=e,this):T};var N=10;this.onChangesTtl=function(e){return arguments.length?(N=e,this):N},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(t,n,i,o,s,g,y,S,L,O){function k(){try{if(!--$e)throw me=void 0,Hi("infchng","{0} $onChanges() iterations reached. Aborting!\n",N);y.$apply(function(){for(var e=0,t=me.length;t>e;++e)me[e]();me=void 0})}finally{$e++}}function R(e,t){if(t){var n,r,i,o=Object.keys(t);for(n=0,r=o.length;r>n;n++)i=o[n],this[i]=t[i]}else this.$attr={};this.$$element=e}function M(e,t,n){ye.innerHTML="<span "+t+">";var r=ye.firstChild.attributes,i=r[0];r.removeNamedItem(i.name),i.value=n,e.attributes.setNamedItem(i)}function _(e,t){try{e.addClass(t)}catch(n){}}function D(t,n,r,i,o){t instanceof _r||(t=_r(t));for(var a=/\S+/,s=0,l=t.length;l>s;s++){var u=t[s];u.nodeType===ii&&u.nodeValue.match(a)&&Ne(u,t[s]=e.document.createElement("span"))}var c=q(t,n,t,r,i,o);D.$$addScopeClass(t);var p=null;return function(e,n,r){ce(e,"scope"),o&&o.needsNewScope&&(e=e.$parent.$new()),r=r||{};var i=r.parentBoundTranscludeFn,a=r.transcludeControllers,s=r.futureParentElement;i&&i.$$boundTransclude&&(i=i.$$boundTransclude),p||(p=F(s));var l;if(l="html"!==p?_r(ae(p,_r("<div>").append(t).html())):n?Ei.clone.call(t):t,a)for(var u in a)l.data("$"+u+"Controller",a[u].instance);return D.$$addScopeInfo(l,e),n&&n(l,e),c&&c(e,l,l,i),l}}function F(e){var t=e&&e[0];return t&&"foreignobject"!==j(t)&&Ur.call(t).match(/SVG/)?"svg":"html"}function q(e,t,n,r,i,o){function a(e,n,r,i){var o,a,s,l,u,c,p,d,g;if(h){var m=n.length;for(g=new Array(m),u=0;u<f.length;u+=3)p=f[u],g[p]=n[p]}else g=n;for(u=0,c=f.length;c>u;)s=g[f[u++]],o=f[u++],a=f[u++],o?(o.scope?(l=e.$new(),D.$$addScopeInfo(_r(s),l)):l=e,d=o.transcludeOnThisElement?B(e,o.transclude,i):!o.templateOnThisElement&&i?i:!i&&t?B(e,t):null,o(a,l,s,r,d)):a&&a(e,s.childNodes,void 0,i)}for(var s,l,u,c,p,d,h,f=[],g=0;g<e.length;g++)s=new R,l=V(e[g],[],s,0===g?r:void 0,i),u=l.length?K(l,e[g],s,t,n,null,[],[],o):null,u&&u.scope&&D.$$addScopeClass(s.$$element),p=u&&u.terminal||!(c=e[g].childNodes)||!c.length?null:q(c,u?(u.transcludeOnThisElement||!u.templateOnThisElement)&&u.transclude:t),(u||p)&&(f.push(g,u,p),d=!0,h=h||u),o=null;return d?a:null}function B(e,t,n){function r(r,i,o,a,s){return r||(r=e.$new(!1,s),r.$$transcluded=!0),t(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})}var i=r.$$slots=ge();for(var o in t.$$slots)t.$$slots[o]?i[o]=B(e,t.$$slots[o],n):i[o]=null;return r}function V(e,t,n,r,i){var o,a,s=e.nodeType,l=n.$attr;switch(s){case ni:Z(t,gt(j(e)),"E",r,i);for(var u,c,d,h,f,g,v=e.attributes,y=0,b=v&&v.length;b>y;y++){var x=!1,E=!1;u=v[y],c=u.name,f=Kr(u.value),h=gt(c),(g=Ce.test(h))&&(c=c.replace(Gi,"").substr(8).replace(/_(.)/g,function(e,t){return t.toUpperCase()}));var C=h.match(Se);C&&ee(C[1])&&(x=c,E=c.substr(0,c.length-5)+"end",c=c.substr(0,c.length-6)),d=gt(c.toLowerCase()),l[d]=c,!g&&n.hasOwnProperty(d)||(n[d]=f,Ge(e,d)&&(n[d]=!0)),ue(e,t,f,d,g),Z(t,d,"A",r,i,x,E)}if(a=e.className,$(a)&&(a=a.animVal),w(a)&&""!==a)for(;o=m.exec(a);)d=gt(o[2]),Z(t,d,"C",r,i)&&(n[d]=Kr(o[3])),a=a.substr(o.index+o[0].length);break;case ii:if(11===Mr)for(;e.parentNode&&e.nextSibling&&e.nextSibling.nodeType===ii;)e.nodeValue=e.nodeValue+e.nextSibling.nodeValue,e.parentNode.removeChild(e.nextSibling);oe(t,e.nodeValue);break;case oi:try{o=p.exec(e.nodeValue),o&&(d=gt(o[1]),Z(t,d,"M",r,i)&&(n[d]=Kr(o[2])))}catch(S){}}return t.sort(re),t}function G(e,t,n){var r=[],i=0;if(t&&e.hasAttribute&&e.hasAttribute(t)){do{if(!e)throw Hi("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",t,n);e.nodeType==ni&&(e.hasAttribute(t)&&i++,
e.hasAttribute(n)&&i--),r.push(e),e=e.nextSibling}while(i>0)}else r.push(e);return _r(r)}function W(e,t,n){return function(r,i,o,a,s){return i=G(i[0],t,n),e(r,i,o,a,s)}}function z(e,t,n,r,i,o){var a;return e?D(t,n,r,i,o):function(){return a||(a=D(t,n,r,i,o),t=n=o=null),a.apply(this,arguments)}}function K(e,t,n,o,a,s,l,c,p){function d(e,t,n,r){e&&(n&&(e=W(e,n,r)),e.require=f.require,e.directiveName=g,(S===f||f.$$isolateScope)&&(e=de(e,{isolateScope:!0})),l.push(e)),t&&(n&&(t=W(t,n,r)),t.require=f.require,t.directiveName=g,(S===f||f.$$isolateScope)&&(t=de(t,{isolateScope:!0})),c.push(t))}function h(e,i,o,a,s){function p(e,t,n,r){var i;if(A(e)||(r=n,n=t,t=e,e=void 0),I&&(i=y),n||(n=I?w.parent():w),!r)return s(e,t,i,n,P);var o=s.$$slots[r];if(o)return o(e,t,i,n,P);if(v(o))throw Hi("noslot",'No parent directive that requires a transclusion with slot name "{0}". Element: {1}',r,Q(w))}var d,h,f,g,m,y,b,w,N,L;t===o?(N=n,w=n.$$element):(w=_r(o),N=new R(w,n)),m=i,S?g=i.$new(!0):x&&(m=i.$parent),s&&(b=p,b.$$boundTransclude=s,b.isSlotFilled=function(e){return!!s.$$slots[e]}),E&&(y=X(w,N,b,E,g,i,S)),S&&(D.$$addScopeInfo(w,g,!0,!(T&&(T===S||T===S.$$originalDirective))),D.$$addScopeClass(w,!0),g.$$isolateBindings=S.$$isolateBindings,L=fe(i,N,g,g.$$isolateBindings,S),L.removeWatches&&g.$on("$destroy",L.removeWatches));for(var O in y){var k=E[O],M=y[O],_=k.$$bindings.bindToController;M.identifier&&_?M.bindingInfo=fe(m,N,M.instance,_,k):M.bindingInfo={};var j=M();j!==M.instance&&(M.instance=j,w.data("$"+k.name+"Controller",j),M.bindingInfo.removeWatches&&M.bindingInfo.removeWatches(),M.bindingInfo=fe(m,N,M.instance,_,k))}for(r(E,function(e,t){var n=e.require;e.bindToController&&!Wr(n)&&$(n)&&u(y[t].instance,Y(t,n,w,y))}),r(y,function(e){var t=e.instance;C(t.$onChanges)&&t.$onChanges(e.bindingInfo.initialChanges),C(t.$onInit)&&t.$onInit(),C(t.$onDestroy)&&m.$on("$destroy",function(){t.$onDestroy()})}),d=0,h=l.length;h>d;d++)f=l[d],he(f,f.isolateScope?g:i,w,N,f.require&&Y(f.directiveName,f.require,w,y),b);var P=i;for(S&&(S.template||null===S.templateUrl)&&(P=g),e&&e(P,o.childNodes,void 0,s),d=c.length-1;d>=0;d--)f=c[d],he(f,f.isolateScope?g:i,w,N,f.require&&Y(f.directiveName,f.require,w,y),b);r(y,function(e){var t=e.instance;C(t.$postLink)&&t.$postLink()})}p=p||{};for(var f,g,m,y,b,w=-Number.MAX_VALUE,x=p.newScopeDirective,E=p.controllerDirectives,S=p.newIsolateScopeDirective,T=p.templateDirective,N=p.nonTlbTranscludeDirective,L=!1,O=!1,I=p.hasElementTranscludeDirective,k=n.$$element=_r(t),M=s,_=o,P=!1,F=!1,q=0,U=e.length;U>q;q++){f=e[q];var B=f.$$start,K=f.$$end;if(B&&(k=G(t,B,K)),m=void 0,w>f.priority)break;if((b=f.scope)&&(f.templateUrl||($(b)?(ie("new/isolated scope",S||x,f,k),S=f):ie("new/isolated scope",S,f,k)),x=x||f),g=f.name,!P&&(f.replace&&(f.templateUrl||f.template)||f.transclude&&!f.$$tlb)){for(var Z,ee=q+1;Z=e[ee++];)if(Z.transclude&&!Z.$$tlb||Z.replace&&(Z.templateUrl||Z.template)){F=!0;break}P=!0}if(!f.templateUrl&&f.controller&&(b=f.controller,E=E||ge(),ie("'"+g+"' controller",E[g],f,k),E[g]=f),b=f.transclude)if(L=!0,f.$$tlb||(ie("transclusion",N,f,k),N=f),"element"==b)I=!0,w=f.priority,m=k,k=n.$$element=_r(D.$$createComment(g,n[g])),t=k[0],pe(a,H(m),t),m[0].$$parentNode=m[0].parentNode,_=z(F,m,o,w,M&&M.name,{nonTlbTranscludeDirective:N});else{var re=ge();if(m=_r(Oe(t)).contents(),$(b)){m=[];var oe=ge(),se=ge();r(b,function(e,t){var n="?"===e.charAt(0);e=n?e.substring(1):e,oe[e]=t,re[t]=null,se[t]=n}),r(k.contents(),function(e){var t=oe[gt(j(e))];t?(se[t]=!0,re[t]=re[t]||[],re[t].push(e)):m.push(e)}),r(se,function(e,t){if(!e)throw Hi("reqslot","Required transclusion slot `{0}` was not filled.",t)});for(var le in re)re[le]&&(re[le]=z(F,re[le],o))}k.empty(),_=z(F,m,o,void 0,void 0,{needsNewScope:f.$$isolateScope||f.$$newScope}),_.$$slots=re}if(f.template)if(O=!0,ie("template",T,f,k),T=f,b=C(f.template)?f.template(k,n):f.template,b=Ee(b),f.replace){if(M=f,m=xe(b)?[]:vt(ae(f.templateNamespace,Kr(b))),t=m[0],1!=m.length||t.nodeType!==ni)throw Hi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",g,"");pe(a,k,t);var ue={$attr:{}},ce=V(t,[],ue),me=e.splice(q+1,e.length-(q+1));(S||x)&&J(ce,S,x),e=e.concat(ce).concat(me),te(n,ue),U=e.length}else k.html(b);if(f.templateUrl)O=!0,ie("template",T,f,k),T=f,f.replace&&(M=f),h=ne(e.splice(q,e.length-q),k,n,a,L&&_,l,c,{controllerDirectives:E,newScopeDirective:x!==f&&x,newIsolateScopeDirective:S,templateDirective:T,nonTlbTranscludeDirective:N}),U=e.length;else if(f.compile)try{y=f.compile(k,n,_),C(y)?d(null,y,B,K):y&&d(y.pre,y.post,B,K)}catch(ve){i(ve,Q(k))}f.terminal&&(h.terminal=!0,w=Math.max(w,f.priority))}return h.scope=x&&x.scope===!0,h.transcludeOnThisElement=L,h.templateOnThisElement=O,h.transclude=_,p.hasElementTranscludeDirective=I,h}function Y(e,t,n,i){var o;if(w(t)){var a=t.match(x),s=t.substring(a[0].length),l=a[1]||a[3],u="?"===a[2];if("^^"===l?n=n.parent():(o=i&&i[s],o=o&&o.instance),!o){var c="$"+s+"Controller";o=l?n.inheritedData(c):n.data(c)}if(!o&&!u)throw Hi("ctreq","Controller '{0}', required by directive '{1}', can't be found!",s,e)}else if(Wr(t)){o=[];for(var p=0,d=t.length;d>p;p++)o[p]=Y(e,t[p],n,i)}else $(t)&&(o={},r(t,function(t,r){o[r]=Y(e,t,n,i)}));return o||null}function X(e,t,n,r,i,o,a){var s=ge();for(var l in r){var u=r[l],c={$scope:u===a||u.$$isolateScope?i:o,$element:e,$attrs:t,$transclude:n},p=u.controller;"@"==p&&(p=t[u.name]);var d=g(p,c,!0,u.controllerAs);s[u.name]=d,e.data("$"+u.name+"Controller",d.instance)}return s}function J(e,t,n){for(var r=0,i=e.length;i>r;r++)e[r]=d(e[r],{$$isolateScope:t,$$newScope:n})}function Z(e,n,r,o,s,u,p){if(n===s)return null;var h=null;if(l.hasOwnProperty(n))for(var f,g=t.get(n+c),m=0,y=g.length;y>m;m++)try{if(f=g[m],(v(o)||o>f.priority)&&-1!=f.restrict.indexOf(r)){if(u&&(f=d(f,{$$start:u,$$end:p})),!f.$$bindings){var b=f.$$bindings=a(f,f.name);$(b.isolateScope)&&(f.$$isolateBindings=b.isolateScope)}e.push(f),h=f}}catch(w){i(w)}return h}function ee(e){if(l.hasOwnProperty(e))for(var n,r=t.get(e+c),i=0,o=r.length;o>i;i++)if(n=r[i],n.multiElement)return!0;return!1}function te(e,t){var n=t.$attr,i=e.$attr,o=e.$$element;r(e,function(r,i){"$"!=i.charAt(0)&&(t[i]&&t[i]!==r&&(r+=("style"===i?";":" ")+t[i]),e.$set(i,r,!0,n[i]))}),r(t,function(t,r){"class"==r?(_(o,t),e["class"]=(e["class"]?e["class"]+" ":"")+t):"style"==r?(o.attr("style",o.attr("style")+";"+t),e.style=(e.style?e.style+";":"")+t):"$"==r.charAt(0)||e.hasOwnProperty(r)||(e[r]=t,i[r]=n[r])})}function ne(e,t,n,i,a,s,l,u){var c,p,h=[],f=t[0],g=e.shift(),m=d(g,{templateUrl:null,transclude:null,replace:null,$$originalDirective:g}),v=C(g.templateUrl)?g.templateUrl(t,n):g.templateUrl,y=g.templateNamespace;return t.empty(),o(v).then(function(o){var d,b,w,x;if(o=Ee(o),g.replace){if(w=xe(o)?[]:vt(ae(y,Kr(o))),d=w[0],1!=w.length||d.nodeType!==ni)throw Hi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",g.name,v);b={$attr:{}},pe(i,t,d);var E=V(d,[],b);$(g.scope)&&J(E,!0),e=E.concat(e),te(n,b)}else d=f,t.html(o);for(e.unshift(m),c=K(e,d,n,a,t,g,s,l,u),r(i,function(e,n){e==d&&(i[n]=t[0])}),p=q(t[0].childNodes,a);h.length;){var C=h.shift(),S=h.shift(),T=h.shift(),A=h.shift(),N=t[0];if(!C.$$destroyed){if(S!==f){var L=S.className;u.hasElementTranscludeDirective&&g.replace||(N=Oe(d)),pe(T,_r(S),N),_(_r(N),L)}x=c.transcludeOnThisElement?B(C,c.transclude,A):A,c(p,C,N,i,x)}}h=null}),function(e,t,n,r,i){var o=i;t.$$destroyed||(h?h.push(t,n,r,o):(c.transcludeOnThisElement&&(o=B(t,c.transclude,i)),c(p,t,n,r,o)))}}function re(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function ie(e,t,n,r){function i(e){return e?" (module: "+e+")":""}if(t)throw Hi("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",t.name,i(t.$$moduleName),n.name,i(n.$$moduleName),e,Q(r))}function oe(e,t){var r=n(t,!0);r&&e.push({priority:0,compile:function(e){var t=e.parent(),n=!!t.length;return n&&D.$$addBindingClass(t),function(e,t){var i=t.parent();n||D.$$addBindingClass(i),D.$$addBindingInfo(i,r.expressions),e.$watch(r,function(e){t[0].nodeValue=e})}}})}function ae(t,n){switch(t=Or(t||"html")){case"svg":case"math":var r=e.document.createElement("div");return r.innerHTML="<"+t+">"+n+"</"+t+">",r.childNodes[0].childNodes;default:return n}}function se(e,t){if("srcdoc"==t)return S.HTML;var n=j(e);return"xlinkHref"==t||"form"==n&&"action"==t||"img"!=n&&("src"==t||"ngSrc"==t)?S.RESOURCE_URL:void 0}function ue(e,t,r,i,o){var a=se(e,i);o=b[i]||o;var s=n(r,!0,a,o);if(s){if("multiple"===i&&"select"===j(e))throw Hi("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",Q(e));t.push({priority:100,compile:function(){return{pre:function(e,t,l){var u=l.$$observers||(l.$$observers=ge());if(E.test(i))throw Hi("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");var c=l[i];c!==r&&(s=c&&n(c,!0,a,o),r=c),s&&(l[i]=s(e),(u[i]||(u[i]=[])).$$inter=!0,(l.$$observers&&l.$$observers[i].$$scope||e).$watch(s,function(e,t){"class"===i&&e!=t?l.$updateClass(e,t):l.$set(i,e)}))}}}})}}function pe(t,n,r){var i,o,a=n[0],s=n.length,l=a.parentNode;if(t)for(i=0,o=t.length;o>i;i++)if(t[i]==a){t[i++]=r;for(var u=i,c=u+s-1,p=t.length;p>u;u++,c++)p>c?t[u]=t[c]:delete t[u];t.length-=s-1,t.context===a&&(t.context=r);break}l&&l.replaceChild(r,a);var d=e.document.createDocumentFragment();for(i=0;s>i;i++)d.appendChild(n[i]);for(_r.hasData(a)&&(_r.data(r,_r.data(a)),_r(a).off("$destroy")),_r.cleanData(d.querySelectorAll("*")),i=1;s>i;i++)delete n[i];n[0]=r,n.length=1}function de(e,t){return u(function(){return e.apply(null,arguments)},e,t)}function he(e,t,n,r,o,a){try{e(t,n,r,o,a)}catch(s){i(s,Q(n))}}function fe(e,t,i,o,a){function l(t,n,r){C(i.$onChanges)&&n!==r&&(me||(e.$$postDigest(k),me=[]),c||(c={},me.push(u)),c[t]&&(r=c[t].previousValue),c[t]=new ft(r,n))}function u(){i.$onChanges(c),c=void 0}var c,p=[],d={};return r(o,function(r,o){var u,c,f,g,m,v=r.attrName,y=r.optional,$=r.mode;switch($){case"@":y||Lr.call(t,v)||(i[o]=t[v]=void 0),t.$observe(v,function(e){if(w(e)||I(e)){var t=i[o];l(o,e,t),i[o]=e}}),t.$$observers[v].$$scope=e,u=t[v],w(u)?i[o]=n(u)(e):I(u)&&(i[o]=u),d[o]=new ft(Vi,i[o]);break;case"=":if(!Lr.call(t,v)){if(y)break;t[v]=void 0}if(y&&!t[v])break;c=s(t[v]),g=c.literal?U:function(e,t){return e===t||e!==e&&t!==t},f=c.assign||function(){throw u=i[o]=c(e),Hi("nonassign","Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",t[v],v,a.name)},u=i[o]=c(e);var b=function(t){return g(t,i[o])||(g(t,u)?f(e,t=i[o]):i[o]=t),u=t};b.$stateful=!0,m=r.collection?e.$watchCollection(t[v],b):e.$watch(s(t[v],b),null,c.literal),p.push(m);break;case"<":if(!Lr.call(t,v)){if(y)break;t[v]=void 0}if(y&&!t[v])break;c=s(t[v]),i[o]=c(e),d[o]=new ft(Vi,i[o]),m=e.$watch(c,function(e,t){e===t&&(t=i[o]),l(o,e,t),i[o]=e},c.literal),p.push(m);break;case"&":if(c=t.hasOwnProperty(v)?s(t[v]):h,c===h&&y)break;i[o]=function(t){return c(e,t)}}}),{initialChanges:d,removeWatches:p.length&&function(){for(var e=0,t=p.length;t>e;++e)p[e]()}}}var me,ve=/^\w/,ye=e.document.createElement("div"),$e=N;R.prototype={$normalize:gt,$addClass:function(e){e&&e.length>0&&L.addClass(this.$$element,e)},$removeClass:function(e){e&&e.length>0&&L.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=mt(e,t);n&&n.length&&L.addClass(this.$$element,n);var r=mt(t,e);r&&r.length&&L.removeClass(this.$$element,r)},$set:function(e,t,n,o){var a,s=this.$$element[0],l=Ge(s,e),u=We(e),c=e;if(l?(this.$$element.prop(e,t),o=l):u&&(this[u]=t,c=u),this[e]=t,o?this.$attr[e]=o:(o=this.$attr[e],o||(this.$attr[e]=o=le(e,"-"))),a=j(this.$$element),"a"===a&&("href"===e||"xlinkHref"===e)||"img"===a&&"src"===e)this[e]=t=O(t,"src"===e);else if("img"===a&&"srcset"===e){for(var p="",d=Kr(t),h=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,f=/\s/.test(d)?h:/(,)/,g=d.split(f),m=Math.floor(g.length/2),y=0;m>y;y++){var $=2*y;p+=O(Kr(g[$]),!0),p+=" "+Kr(g[$+1])}var b=Kr(g[2*y]).split(/\s/);p+=O(Kr(b[0]),!0),2===b.length&&(p+=" "+Kr(b[1])),this[e]=t=p}n!==!1&&(null===t||v(t)?this.$$element.removeAttr(o):ve.test(o)?this.$$element.attr(o,t):M(this.$$element[0],o,t));var w=this.$$observers;w&&r(w[c],function(e){try{e(t)}catch(n){i(n)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=ge()),i=r[e]||(r[e]=[]);return i.push(t),y.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(e)||v(n[e])||t(n[e])}),function(){P(i,t)}}};var be=n.startSymbol(),we=n.endSymbol(),Ee="{{"==be&&"}}"==we?f:function(e){return e.replace(/\{\{/g,be).replace(/}}/g,we)},Ce=/^ngAttr[A-Z]/,Se=/^(.+)Start$/;return D.$$addBindingInfo=T?function(e,t){var n=e.data("$binding")||[];Wr(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:h,D.$$addBindingClass=T?function(e){_(e,"ng-binding")}:h,D.$$addScopeInfo=T?function(e,t,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";e.data(i,t)}:h,D.$$addScopeClass=T?function(e,t){_(e,t?"ng-isolate-scope":"ng-scope")}:h,D.$$createComment=function(t,n){var r="";return T&&(r=" "+(t||"")+": "+(n||"")+" "),e.document.createComment(r)},D}]}function ft(e,t){this.previousValue=e,this.currentValue=t}function gt(e){return we(e.replace(Gi,""))}function mt(e,t){var n="",r=e.split(/\s+/),i=t.split(/\s+/);e:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a==i[s])continue e;n+=(n.length>0?" ":"")+a}return n}function vt(e){e=_r(e);var t=e.length;if(1>=t)return e;for(;t--;){var n=e[t];n.nodeType===oi&&Fr.call(e,t,1)}return e}function yt(e,t){if(t&&w(t))return t;if(w(e)){var n=zi.exec(e);if(n)return n[3]}}function $t(){var e={},n=!1;this.has=function(t){return e.hasOwnProperty(t)},this.register=function(t,n){de(t,"controller"),$(t)?u(e,t):e[t]=n},this.allowGlobals=function(){n=!0},this.$get=["$injector","$window",function(r,i){function o(e,n,r,i){if(!e||!$(e.$scope))throw t("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,n);e.$scope[n]=r}return function(t,a,s,l){var c,p,d,h;if(s=s===!0,l&&w(l)&&(h=l),w(t)){if(p=t.match(zi),!p)throw Wi("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",t);d=p[1],h=h||p[3],t=e.hasOwnProperty(d)?e[d]:he(a.$scope,d,!0)||(n?he(i,d,!0):void 0),pe(t,d,!0)}if(s){var f=(Wr(t)?t[t.length-1]:t).prototype;c=Object.create(f||null),h&&o(a,h,c,d||t.name);var g;return g=u(function(){var e=r.invoke(t,c,a,d);return e!==c&&($(e)||C(e))&&(c=e,h&&o(a,h,c,d||t.name)),c},{instance:c,identifier:h})}return c=r.instantiate(t,a,d),h&&o(a,h,c,d||t.name),c}}]}function bt(){this.$get=["$window",function(e){return _r(e.document)}]}function wt(){this.$get=["$log",function(e){return function(t,n){e.error.apply(e,arguments)}}]}function xt(e){return $(e)?E(e)?e.toISOString():W(e):e}function Et(){this.$get=function(){return function(e){if(!e)return"";var t=[];return i(e,function(e,n){null===e||v(e)||(Wr(e)?r(e,function(e){t.push(ne(n)+"="+ne(xt(e)))}):t.push(ne(n)+"="+ne(xt(e))))}),t.join("&")}}}function Ct(){this.$get=function(){return function(e){function t(e,o,a){null===e||v(e)||(Wr(e)?r(e,function(e,n){t(e,o+"["+($(e)?n:"")+"]")}):$(e)&&!E(e)?i(e,function(e,n){t(e,o+(a?"":"[")+n+(a?"":"]"))}):n.push(ne(o)+"="+ne(xt(e))))}if(!e)return"";var n=[];return t(e,"",!0),n.join("&")}}}function St(e,t){if(w(e)){var n=e.replace(Zi,"").trim();if(n){var r=t("Content-Type");(r&&0===r.indexOf(Yi)||Tt(n))&&(e=z(n))}}return e}function Tt(e){var t=e.match(Qi);return t&&Ji[t[0]].test(e)}function At(e){function t(e,t){e&&(i[e]=i[e]?i[e]+", "+t:t)}var n,i=ge();return w(e)?r(e.split("\n"),function(e){n=e.indexOf(":"),t(Or(Kr(e.substr(0,n))),Kr(e.substr(n+1)))}):$(e)&&r(e,function(e,n){t(Or(n),Kr(e))}),i}function Nt(e){var t;return function(n){if(t||(t=At(e)),n){var r=t[Or(n)];return void 0===r&&(r=null),r}return t}}function Lt(e,t,n,i){return C(i)?i(e,t,n):(r(i,function(r){e=r(e,t,n)}),e)}function Ot(e){return e>=200&&300>e}function It(){var e=this.defaults={transformResponse:[St],transformRequest:[function(e){return!$(e)||N(e)||O(e)||L(e)?e:W(e)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:q(Xi),put:q(Xi),patch:q(Xi)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},n=!1;this.useApplyAsync=function(e){return y(e)?(n=!!e,this):n};var i=!0;this.useLegacyPromiseExtensions=function(e){return y(e)?(i=!!e,this):i};var o=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(a,s,l,c,p,d){function h(n){function o(e){var t=u({},e);return t.data=Lt(e.data,e.headers,e.status,l.transformResponse),Ot(e.status)?t:p.reject(t)}function a(e,t){var n,i={};return r(e,function(e,r){C(e)?(n=e(t),null!=n&&(i[r]=n)):i[r]=e}),i}function s(t){var n,r,i,o=e.headers,s=u({},t.headers);o=u({},o.common,o[Or(t.method)]);e:for(n in o){r=Or(n);for(i in s)if(Or(i)===r)continue e;s[n]=o[n]}return a(s,q(t))}if(!$(n))throw t("$http")("badreq","Http request configuration must be an object.  Received: {0}",n);if(!w(n.url))throw t("$http")("badreq","Http request configuration url must be a string.  Received: {0}",n.url);var l=u({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse,paramSerializer:e.paramSerializer},n);l.headers=s(n),l.method=Ir(l.method),l.paramSerializer=w(l.paramSerializer)?d.get(l.paramSerializer):l.paramSerializer;var c=function(t){var n=t.headers,i=Lt(t.data,Nt(n),void 0,t.transformRequest);return v(i)&&r(n,function(e,t){"content-type"===Or(t)&&delete n[t]}),v(t.withCredentials)&&!v(e.withCredentials)&&(t.withCredentials=e.withCredentials),m(t,i).then(o,o)},h=[c,void 0],f=p.when(l);for(r(E,function(e){(e.request||e.requestError)&&h.unshift(e.request,e.requestError),(e.response||e.responseError)&&h.push(e.response,e.responseError)});h.length;){var g=h.shift(),y=h.shift();f=f.then(g,y)}return i?(f.success=function(e){return pe(e,"fn"),f.then(function(t){e(t.data,t.status,t.headers,l)}),f},f.error=function(e){return pe(e,"fn"),f.then(null,function(t){e(t.data,t.status,t.headers,l)}),f}):(f.success=to("success"),f.error=to("error")),f}function f(e){r(arguments,function(e){h[e]=function(t,n){return h(u({},n||{},{method:e,url:t}))}})}function g(e){r(arguments,function(e){h[e]=function(t,n,r){return h(u({},r||{},{method:e,url:t,data:n}))}})}function m(t,i){function o(e){if(e){var t={};return r(e,function(e,r){t[r]=function(t){function r(){e(t)}n?c.$applyAsync(r):c.$$phase?r():c.$apply(r)}}),t}}function l(e,t,r,i){function o(){u(t,e,r,i)}g&&(Ot(e)?g.put(S,[e,t,At(r),i]):g.remove(S)),n?c.$applyAsync(o):(o(),c.$$phase||c.$apply())}function u(e,n,r,i){n=n>=-1?n:0,(Ot(n)?w.resolve:w.reject)({data:e,status:n,headers:Nt(r),config:t,statusText:i})}function d(e){u(e.data,e.status,q(e.headers()),e.statusText)}function f(){var e=h.pendingRequests.indexOf(t);-1!==e&&h.pendingRequests.splice(e,1)}var g,m,w=p.defer(),E=w.promise,C=t.headers,S=b(t.url,t.paramSerializer(t.params));if(h.pendingRequests.push(t),E.then(f,f),!t.cache&&!e.cache||t.cache===!1||"GET"!==t.method&&"JSONP"!==t.method||(g=$(t.cache)?t.cache:$(e.cache)?e.cache:x),g&&(m=g.get(S),y(m)?k(m)?m.then(d,d):Wr(m)?u(m[1],m[0],q(m[2]),m[3]):u(m,200,{},"OK"):g.put(S,E)),v(m)){var T=Rn(t.url)?s()[t.xsrfCookieName||e.xsrfCookieName]:void 0;T&&(C[t.xsrfHeaderName||e.xsrfHeaderName]=T),a(t.method,S,i,l,C,t.timeout,t.withCredentials,t.responseType,o(t.eventHandlers),o(t.uploadEventHandlers))}return E}function b(e,t){return t.length>0&&(e+=(-1==e.indexOf("?")?"?":"&")+t),e}var x=l("$http");e.paramSerializer=w(e.paramSerializer)?d.get(e.paramSerializer):e.paramSerializer;var E=[];return r(o,function(e){E.unshift(w(e)?d.get(e):d.invoke(e))}),h.pendingRequests=[],f("get","delete","head","jsonp"),g("post","put","patch"),h.defaults=e,h}]}function kt(){this.$get=function(){return function(){return new e.XMLHttpRequest}}}function Rt(){this.$get=["$browser","$window","$document","$xhrFactory",function(e,t,n,r){return Mt(e,r,e.defer,t.angular.callbacks,n[0])}]}function Mt(e,t,n,i,o){function a(e,t,n){var r=o.createElement("script"),a=null;return r.type="text/javascript",r.src=e,r.async=!0,a=function(e){di(r,"load",a),di(r,"error",a),o.body.removeChild(r),r=null;var s=-1,l="unknown";e&&("load"!==e.type||i[t].called||(e={type:"error"}),l=e.type,s="error"===e.type?404:200),n&&n(s,l)},pi(r,"load",a),pi(r,"error",a),o.body.appendChild(r),a}return function(o,s,l,u,c,p,d,f,g,m){function $(){x&&x(),E&&E.abort()}function b(t,r,i,o,a){y(T)&&n.cancel(T),x=E=null,t(r,i,o,a),e.$$completeOutstandingRequest(h)}if(e.$$incOutstandingRequestCount(),s=s||e.url(),"jsonp"==Or(o)){var w="_"+(i.counter++).toString(36);i[w]=function(e){i[w].data=e,i[w].called=!0};var x=a(s.replace("JSON_CALLBACK","angular.callbacks."+w),w,function(e,t){b(u,e,i[w].data,"",t),i[w]=h})}else{var E=t(o,s);E.open(o,s,!0),r(c,function(e,t){y(e)&&E.setRequestHeader(t,e)}),E.onload=function(){var e=E.statusText||"",t="response"in E?E.response:E.responseText,n=1223===E.status?204:E.status;0===n&&(n=t?200:"file"==kn(s).protocol?404:0),b(u,n,t,E.getAllResponseHeaders(),e)};var C=function(){b(u,-1,null,null,"")};if(E.onerror=C,E.onabort=C,r(g,function(e,t){E.addEventListener(t,e)}),r(m,function(e,t){E.upload.addEventListener(t,e)}),d&&(E.withCredentials=!0),f)try{E.responseType=f}catch(S){if("json"!==f)throw S}E.send(v(l)?null:l)}if(p>0)var T=n($,p);else k(p)&&p.then($)}}function _t(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(e){return"\\\\\\"+e}function a(n){return n.replace(h,e).replace(f,t)}function s(e){if(null==e)return"";switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=W(e)}return e}function l(e,t,n,r){var i;return i=e.$watch(function(e){return i(),r(e)},t,n)}function c(o,c,h,f){function m(e){try{return e=k(e),f&&!y(e)?e:s(e)}catch(t){r(no.interr(o,t))}}if(!o.length||-1===o.indexOf(e)){var $;if(!c){var b=a(o);$=g(b),$.exp=o,$.expressions=[],$.$$watchDelegate=l}return $}f=!!f;for(var w,x,E,S=0,T=[],A=[],N=o.length,L=[],O=[];N>S;){if(-1==(w=o.indexOf(e,S))||-1==(x=o.indexOf(t,w+p))){S!==N&&L.push(a(o.substring(S)));break}S!==w&&L.push(a(o.substring(S,w))),E=o.substring(w+p,x),T.push(E),A.push(n(E,m)),S=x+d,O.push(L.length),L.push("")}if(h&&L.length>1&&no.throwNoconcat(o),!c||T.length){var I=function(e){for(var t=0,n=T.length;n>t;t++){if(f&&v(e[t]))return;L[O[t]]=e[t]}return L.join("")},k=function(e){return h?i.getTrusted(h,e):i.valueOf(e)};return u(function(e){var t=0,n=T.length,i=new Array(n);try{for(;n>t;t++)i[t]=A[t](e);return I(i)}catch(a){r(no.interr(o,a))}},{exp:o,expressions:T,$$watchDelegate:function(e,t){var n;return e.$watchGroup(A,function(r,i){var o=I(r);C(t)&&t.call(this,o,r!==i?n:o,e),n=o})}})}}var p=e.length,d=t.length,h=new RegExp(e.replace(/./g,o),"g"),f=new RegExp(t.replace(/./g,o),"g");return c.startSymbol=function(){return e},c.endSymbol=function(){return t},c}]}function Dt(){this.$get=["$rootScope","$window","$q","$$q","$browser",function(e,t,n,r,i){function o(o,s,l,u){function c(){p?o.apply(null,d):o(g)}var p=arguments.length>4,d=p?H(arguments,4):[],h=t.setInterval,f=t.clearInterval,g=0,m=y(u)&&!u,v=(m?r:n).defer(),$=v.promise;return l=y(l)?l:0,$.$$intervalId=h(function(){m?i.defer(c):e.$evalAsync(c),v.notify(g++),l>0&&g>=l&&(v.resolve(g),f($.$$intervalId),delete a[$.$$intervalId]),m||e.$apply()},s),a[$.$$intervalId]=v,$}var a={};return o.cancel=function(e){return e&&e.$$intervalId in a?(a[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete a[e.$$intervalId],!0):!1},o}]}function jt(e){for(var t=e.split("/"),n=t.length;n--;)t[n]=te(t[n]);return t.join("/")}function Pt(e,t){var n=kn(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=p(n.port)||io[n.protocol]||null}function Ft(e,t){var n="/"!==e.charAt(0);n&&(e="/"+e);var r=kn(e);t.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),t.$$search=Z(r.search),t.$$hash=decodeURIComponent(r.hash),t.$$path&&"/"!=t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function qt(e,t){return 0===t.indexOf(e)?t.substr(e.length):void 0}function Ut(e){var t=e.indexOf("#");return-1==t?e:e.substr(0,t)}function Bt(e){return e.replace(/(#.+)|#$/,"$1")}function Ht(e){return e.substr(0,Ut(e).lastIndexOf("/")+1)}function Vt(e){return e.substring(0,e.indexOf("/",e.indexOf("//")+2))}function Gt(e,t,n){this.$$html5=!0,n=n||"",Pt(e,this),this.$$parse=function(e){var n=qt(t,e);if(!w(n))throw oo("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',e,t);Ft(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=ee(this.$$search),n=this.$$hash?"#"+te(this.$$hash):"";this.$$url=jt(this.$$path)+(e?"?"+e:"")+n,this.$$absUrl=t+this.$$url.substr(1)},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a,s;return y(o=qt(e,r))?(a=o,s=y(o=qt(n,o))?t+(qt("/",o)||o):e+a):y(o=qt(t,r))?s=t+o:t==r+"/"&&(s=t),s&&this.$$parse(s),!!s}}function Wt(e,t,n){Pt(e,this),this.$$parse=function(r){function i(e,t,n){var r,i=/^\/[A-Z]:(\/.*)/;return 0===t.indexOf(n)&&(t=t.replace(n,"")),i.exec(t)?e:(r=i.exec(e),r?r[1]:e)}var o,a=qt(e,r)||qt(t,r);v(a)||"#"!==a.charAt(0)?this.$$html5?o=a:(o="",v(a)&&(e=r,this.replace())):(o=qt(n,a),v(o)&&(o=a)),Ft(o,this),this.$$path=i(this.$$path,o,e),this.$$compose()},this.$$compose=function(){var t=ee(this.$$search),r=this.$$hash?"#"+te(this.$$hash):"";this.$$url=jt(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+(this.$$url?n+this.$$url:"")},this.$$parseLinkUrl=function(t,n){return Ut(e)==Ut(t)?(this.$$parse(t),!0):!1}}function zt(e,t,n){this.$$html5=!0,Wt.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return e==Ut(r)?o=r:(a=qt(t,r))?o=e+n+a:t===r+"/"&&(o=t),o&&this.$$parse(o),!!o},this.$$compose=function(){var t=ee(this.$$search),r=this.$$hash?"#"+te(this.$$hash):"";this.$$url=jt(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+n+this.$$url}}function Kt(e){return function(){return this[e]}}function Yt(e,t){return function(n){return v(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function Xt(){var e="",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return y(t)?(e=t,this):e},this.html5Mode=function(e){return I(e)?(t.enabled=e,this):$(e)?(I(e.enabled)&&(t.enabled=e.enabled),I(e.requireBase)&&(t.requireBase=e.requireBase),I(e.rewriteLinks)&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(e,t,n){var i=u.url(),o=u.$$state;try{r.url(e,t,n),u.$$state=r.state()}catch(a){throw u.url(i),u.$$state=o,a}}function l(e,t){n.$broadcast("$locationChangeSuccess",u.absUrl(),e,u.$$state,t)}var u,c,p,d=r.baseHref(),h=r.url();if(t.enabled){if(!d&&t.requireBase)throw oo("nobase","$location in HTML5 mode requires a <base> tag to be present!");p=Vt(h)+(d||"/"),c=i.history?Gt:zt}else p=Ut(h),c=Wt;var f=Ht(p);u=new c(p,f,"#"+e),u.$$parseLinkUrl(h,h),u.$$state=r.state();var g=/^\s*(javascript|mailto):/i;o.on("click",function(e){if(t.rewriteLinks&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!=e.which&&2!=e.button){for(var i=_r(e.target);"a"!==j(i[0]);)if(i[0]===o[0]||!(i=i.parent())[0])return;var s=i.prop("href"),l=i.attr("href")||i.attr("xlink:href");$(s)&&"[object SVGAnimatedString]"===s.toString()&&(s=kn(s.animVal).href),g.test(s)||!s||i.attr("target")||e.isDefaultPrevented()||u.$$parseLinkUrl(s,l)&&(e.preventDefault(),u.absUrl()!=r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}),Bt(u.absUrl())!=Bt(h)&&r.url(u.absUrl(),!0);var m=!0;return r.onUrlChange(function(e,t){return v(qt(f,e))?void(a.location.href=e):(n.$evalAsync(function(){var r,i=u.absUrl(),o=u.$$state;e=Bt(e),u.$$parse(e),u.$$state=t,r=n.$broadcast("$locationChangeStart",e,i,t,o).defaultPrevented,u.absUrl()===e&&(r?(u.$$parse(i),u.$$state=o,s(i,!1,o)):(m=!1,l(i,o)))}),void(n.$$phase||n.$digest()))}),n.$watch(function(){var e=Bt(r.url()),t=Bt(u.absUrl()),o=r.state(),a=u.$$replace,c=e!==t||u.$$html5&&i.history&&o!==u.$$state;(m||c)&&(m=!1,n.$evalAsync(function(){var t=u.absUrl(),r=n.$broadcast("$locationChangeStart",t,e,u.$$state,o).defaultPrevented;u.absUrl()===t&&(r?(u.$$parse(e),u.$$state=o):(c&&s(t,a,o===u.$$state?null:u.$$state),l(e,o)))})),u.$$replace=!1}),u}]}function Qt(){var e=!0,t=this;this.debugEnabled=function(t){return y(t)?(e=t,this):e},this.$get=["$window",function(n){function i(e){return e instanceof Error&&(e.stack?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function o(e){var t=n.console||{},o=t[e]||t.log||h,a=!1;try{a=!!o.apply}catch(s){}return a?function(){var e=[];return r(arguments,function(t){e.push(i(t))}),o.apply(t,e)}:function(e,t){o(e,null==t?"":t)}}return{log:o("log"),info:o("info"),warn:o("warn"),error:o("error"),debug:function(){var n=o("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function Jt(e,t){if("__defineGetter__"===e||"__defineSetter__"===e||"__lookupGetter__"===e||"__lookupSetter__"===e||"__proto__"===e)throw so("isecfld","Attempting to access a disallowed field in Angular expressions! Expression: {0}",t);return e}function Zt(e){return e+""}function en(e,t){if(e){if(e.constructor===e)throw so("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e.window===e)throw so("isecwindow","Referencing the Window in Angular expressions is disallowed! Expression: {0}",t);if(e.children&&(e.nodeName||e.prop&&e.attr&&e.find))throw so("isecdom","Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}",t);if(e===Object)throw so("isecobj","Referencing Object in Angular expressions is disallowed! Expression: {0}",t)}return e}function tn(e,t){if(e){if(e.constructor===e)throw so("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e===lo||e===uo||e===co)throw so("isecff","Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}",t)}}function nn(e,t){if(e&&(e===0..constructor||e===(!1).constructor||e==="".constructor||e==={}.constructor||e===[].constructor||e===Function.constructor))throw so("isecaf","Assigning to a constructor is disallowed! Expression: {0}",t)}function rn(e,t){return"undefined"!=typeof e?e:t}function on(e,t){return"undefined"==typeof e?t:"undefined"==typeof t?e:e+t}function an(e,t){var n=e(t);return!n.$stateful}function sn(e,t){var n,i;switch(e.type){case go.Program:n=!0,r(e.body,function(e){sn(e.expression,t),n=n&&e.expression.constant}),e.constant=n;break;case go.Literal:e.constant=!0,e.toWatch=[];break;case go.UnaryExpression:sn(e.argument,t),e.constant=e.argument.constant,e.toWatch=e.argument.toWatch;break;case go.BinaryExpression:sn(e.left,t),sn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.left.toWatch.concat(e.right.toWatch);break;case go.LogicalExpression:sn(e.left,t),sn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.constant?[]:[e];break;case go.ConditionalExpression:sn(e.test,t),sn(e.alternate,t),sn(e.consequent,t),e.constant=e.test.constant&&e.alternate.constant&&e.consequent.constant,e.toWatch=e.constant?[]:[e];break;case go.Identifier:e.constant=!1,e.toWatch=[e];break;case go.MemberExpression:sn(e.object,t),e.computed&&sn(e.property,t),e.constant=e.object.constant&&(!e.computed||e.property.constant),e.toWatch=[e];break;case go.CallExpression:n=e.filter?an(t,e.callee.name):!1,i=[],r(e.arguments,function(e){sn(e,t),n=n&&e.constant,e.constant||i.push.apply(i,e.toWatch)}),e.constant=n,e.toWatch=e.filter&&an(t,e.callee.name)?i:[e];break;case go.AssignmentExpression:sn(e.left,t),sn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=[e];break;case go.ArrayExpression:n=!0,i=[],r(e.elements,function(e){
sn(e,t),n=n&&e.constant,e.constant||i.push.apply(i,e.toWatch)}),e.constant=n,e.toWatch=i;break;case go.ObjectExpression:n=!0,i=[],r(e.properties,function(e){sn(e.value,t),n=n&&e.value.constant,e.value.constant||i.push.apply(i,e.value.toWatch)}),e.constant=n,e.toWatch=i;break;case go.ThisExpression:e.constant=!1,e.toWatch=[];break;case go.LocalsExpression:e.constant=!1,e.toWatch=[]}}function ln(e){if(1==e.length){var t=e[0].expression,n=t.toWatch;return 1!==n.length?n:n[0]!==t?n:void 0}}function un(e){return e.type===go.Identifier||e.type===go.MemberExpression}function cn(e){return 1===e.body.length&&un(e.body[0].expression)?{type:go.AssignmentExpression,left:e.body[0].expression,right:{type:go.NGValueParameter},operator:"="}:void 0}function pn(e){return 0===e.body.length||1===e.body.length&&(e.body[0].expression.type===go.Literal||e.body[0].expression.type===go.ArrayExpression||e.body[0].expression.type===go.ObjectExpression)}function dn(e){return e.constant}function hn(e,t){this.astBuilder=e,this.$filter=t}function fn(e,t){this.astBuilder=e,this.$filter=t}function gn(e){return"constructor"==e}function mn(e){return C(e.valueOf)?e.valueOf():vo.call(e)}function vn(){var e,t,n=ge(),i=ge(),o={"true":!0,"false":!1,"null":null,undefined:void 0};this.addLiteral=function(e,t){o[e]=t},this.setIdentifierFns=function(n,r){return e=n,t=r,this},this.$get=["$filter",function(a){function s(e,t,r){var o,s,u;switch(r=r||b,typeof e){case"string":e=e.trim(),u=e;var m=r?i:n;if(o=m[u],!o){":"===e.charAt(0)&&":"===e.charAt(1)&&(s=!0,e=e.substring(2));var y=r?$:v,w=new fo(y),x=new mo(w,a,y);o=x.parse(e),o.constant?o.$$watchDelegate=f:s?o.$$watchDelegate=o.literal?d:p:o.inputs&&(o.$$watchDelegate=c),r&&(o=l(o)),m[u]=o}return g(o,t);case"function":return g(e,t);default:return g(h,t)}}function l(e){function t(t,n,r,i){var o=b;b=!0;try{return e(t,n,r,i)}finally{b=o}}if(!e)return e;t.$$watchDelegate=e.$$watchDelegate,t.assign=l(e.assign),t.constant=e.constant,t.literal=e.literal;for(var n=0;e.inputs&&n<e.inputs.length;++n)e.inputs[n]=l(e.inputs[n]);return t.inputs=e.inputs,t}function u(e,t){return null==e||null==t?e===t:"object"==typeof e&&(e=mn(e),"object"==typeof e)?!1:e===t||e!==e&&t!==t}function c(e,t,n,r,i){var o,a=r.inputs;if(1===a.length){var s=u;return a=a[0],e.$watch(function(e){var t=a(e);return u(t,s)||(o=r(e,void 0,void 0,[t]),s=t&&mn(t)),o},t,n,i)}for(var l=[],c=[],p=0,d=a.length;d>p;p++)l[p]=u,c[p]=null;return e.$watch(function(e){for(var t=!1,n=0,i=a.length;i>n;n++){var s=a[n](e);(t||(t=!u(s,l[n])))&&(c[n]=s,l[n]=s&&mn(s))}return t&&(o=r(e,void 0,void 0,c)),o},t,n,i)}function p(e,t,n,r){var i,o;return i=e.$watch(function(e){return r(e)},function(e,n,r){o=e,C(t)&&t.apply(this,arguments),y(e)&&r.$$postDigest(function(){y(o)&&i()})},n)}function d(e,t,n,i){function o(e){var t=!0;return r(e,function(e){y(e)||(t=!1)}),t}var a,s;return a=e.$watch(function(e){return i(e)},function(e,n,r){s=e,C(t)&&t.call(this,e,n,r),o(e)&&r.$$postDigest(function(){o(s)&&a()})},n)}function f(e,t,n,r){var i;return i=e.$watch(function(e){return i(),r(e)},t,n)}function g(e,t){if(!t)return e;var n=e.$$watchDelegate,r=!1,i=n!==d&&n!==p,o=i?function(n,i,o,a){var s=r&&a?a[0]:e(n,i,o,a);return t(s,n,i)}:function(n,r,i,o){var a=e(n,r,i,o),s=t(a,n,r);return y(a)?s:a};return e.$$watchDelegate&&e.$$watchDelegate!==c?o.$$watchDelegate=e.$$watchDelegate:t.$stateful||(o.$$watchDelegate=c,r=!e.inputs,o.inputs=e.inputs?e.inputs:[e]),o}var m=Xr().noUnsafeEval,v={csp:m,expensiveChecks:!1,literals:F(o),isIdentifierStart:C(e)&&e,isIdentifierContinue:C(t)&&t},$={csp:m,expensiveChecks:!0,literals:F(o),isIdentifierStart:C(e)&&e,isIdentifierContinue:C(t)&&t},b=!1;return s.$$runningExpensiveChecks=function(){return b},s}]}function yn(){this.$get=["$rootScope","$exceptionHandler",function(e,t){return bn(function(t){e.$evalAsync(t)},t)}]}function $n(){this.$get=["$browser","$exceptionHandler",function(e,t){return bn(function(t){e.defer(t)},t)}]}function bn(e,n){function i(){this.$$state={status:0}}function o(e,t){return function(n){t.call(e,n)}}function a(e){var t,r,i;i=e.pending,e.processScheduled=!1,e.pending=void 0;for(var o=0,a=i.length;a>o;++o){r=i[o][0],t=i[o][e.status];try{C(t)?r.resolve(t(e.value)):1===e.status?r.resolve(e.value):r.reject(e.value)}catch(s){r.reject(s),n(s)}}}function s(t){!t.processScheduled&&t.pending&&(t.processScheduled=!0,e(function(){a(t)}))}function l(){this.promise=new i}function c(e){var t=new l,n=0,i=Wr(e)?[]:{};return r(e,function(e,r){n++,m(e).then(function(e){i.hasOwnProperty(r)||(i[r]=e,--n||t.resolve(i))},function(e){i.hasOwnProperty(r)||t.reject(e)})}),0===n&&t.resolve(i),t.promise}var p=t("$q",TypeError),d=function(){var e=new l;return e.resolve=o(e,e.resolve),e.reject=o(e,e.reject),e.notify=o(e,e.notify),e};u(i.prototype,{then:function(e,t,n){if(v(e)&&v(t)&&v(n))return this;var r=new l;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),this.$$state.status>0&&s(this.$$state),r.promise},"catch":function(e){return this.then(null,e)},"finally":function(e,t){return this.then(function(t){return g(t,!0,e)},function(t){return g(t,!1,e)},t)}}),u(l.prototype,{resolve:function(e){this.promise.$$state.status||(e===this.promise?this.$$reject(p("qcycle","Expected promise to be resolved with value other than itself '{0}'",e)):this.$$resolve(e))},$$resolve:function(e){function t(e){l||(l=!0,a.$$resolve(e))}function r(e){l||(l=!0,a.$$reject(e))}var i,a=this,l=!1;try{($(e)||C(e))&&(i=e&&e.then),C(i)?(this.promise.$$state.status=-1,i.call(e,t,r,o(this,this.notify))):(this.promise.$$state.value=e,this.promise.$$state.status=1,s(this.promise.$$state))}catch(u){r(u),n(u)}},reject:function(e){this.promise.$$state.status||this.$$reject(e)},$$reject:function(e){this.promise.$$state.value=e,this.promise.$$state.status=2,s(this.promise.$$state)},notify:function(t){var r=this.promise.$$state.pending;this.promise.$$state.status<=0&&r&&r.length&&e(function(){for(var e,i,o=0,a=r.length;a>o;o++){i=r[o][0],e=r[o][3];try{i.notify(C(e)?e(t):t)}catch(s){n(s)}}})}});var h=function(e){var t=new l;return t.reject(e),t.promise},f=function(e,t){var n=new l;return t?n.resolve(e):n.reject(e),n.promise},g=function(e,t,n){var r=null;try{C(n)&&(r=n())}catch(i){return f(i,!1)}return k(r)?r.then(function(){return f(e,t)},function(e){return f(e,!1)}):f(e,t)},m=function(e,t,n,r){var i=new l;return i.resolve(e),i.promise.then(t,n,r)},y=m,b=function(e){function t(e){r.resolve(e)}function n(e){r.reject(e)}if(!C(e))throw p("norslvr","Expected resolverFn, got '{0}'",e);var r=new l;return e(t,n),r.promise};return b.prototype=i.prototype,b.defer=d,b.reject=h,b.when=m,b.resolve=y,b.all=c,b}function wn(){this.$get=["$window","$timeout",function(e,t){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame,r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(e){var t=n(e);return function(){r(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};return o.supported=i,o}]}function xn(){function e(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=a(),this.$$ChildScope=null}return t.prototype=e,t}var i=10,o=t("$rootScope"),s=null,l=null;this.digestTtl=function(e){return arguments.length&&(i=e),i},this.$get=["$exceptionHandler","$parse","$browser",function(t,u,c){function p(e){e.currentScope.$$destroyed=!0}function d(e){9===Mr&&(e.$$childHead&&d(e.$$childHead),e.$$nextSibling&&d(e.$$nextSibling)),e.$parent=e.$$nextSibling=e.$$prevSibling=e.$$childHead=e.$$childTail=e.$root=e.$$watchers=null}function f(){this.$id=a(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function g(e){if(S.$$phase)throw o("inprog","{0} already in progress",S.$$phase);S.$$phase=e}function m(){S.$$phase=null}function y(e,t){do e.$$watchersCount+=t;while(e=e.$parent)}function b(e,t,n){do e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n];while(e=e.$parent)}function w(){}function x(){for(;N.length;)try{N.shift()()}catch(e){t(e)}l=null}function E(){null===l&&(l=c.defer(function(){S.$apply(x)}))}f.prototype={constructor:f,$new:function(t,n){var r;return n=n||this,t?(r=new f,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=e(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(t||n!=this)&&r.$on("$destroy",p),r},$watch:function(e,t,n,r){var i=u(e);if(i.$$watchDelegate)return i.$$watchDelegate(this,t,n,i,e);var o=this,a=o.$$watchers,l={fn:t,last:w,get:i,exp:r||e,eq:!!n};return s=null,C(t)||(l.fn=h),a||(a=o.$$watchers=[]),a.unshift(l),y(this,1),function(){P(a,l)>=0&&y(o,-1),s=null}},$watchGroup:function(e,t){function n(){l=!1,u?(u=!1,t(o,o,s)):t(o,i,s)}var i=new Array(e.length),o=new Array(e.length),a=[],s=this,l=!1,u=!0;if(!e.length){var c=!0;return s.$evalAsync(function(){c&&t(o,o,s)}),function(){c=!1}}return 1===e.length?this.$watch(e[0],function(e,n,r){o[0]=e,i[0]=n,t(o,e===n?o:i,r)}):(r(e,function(e,t){var r=s.$watch(e,function(e,r){o[t]=e,i[t]=r,l||(l=!0,s.$evalAsync(n))});a.push(r)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(e,t){function r(e){o=e;var t,r,i,s,l;if(!v(o)){if($(o))if(n(o)){a!==h&&(a=h,m=a.length=0,p++),t=o.length,m!==t&&(p++,a.length=m=t);for(var u=0;t>u;u++)l=a[u],s=o[u],i=l!==l&&s!==s,i||l===s||(p++,a[u]=s)}else{a!==f&&(a=f={},m=0,p++),t=0;for(r in o)Lr.call(o,r)&&(t++,s=o[r],l=a[r],r in a?(i=l!==l&&s!==s,i||l===s||(p++,a[r]=s)):(m++,a[r]=s,p++));if(m>t){p++;for(r in a)Lr.call(o,r)||(m--,delete a[r])}}else a!==o&&(a=o,p++);return p}}function i(){if(g?(g=!1,t(o,o,l)):t(o,s,l),c)if($(o))if(n(o)){s=new Array(o.length);for(var e=0;e<o.length;e++)s[e]=o[e]}else{s={};for(var r in o)Lr.call(o,r)&&(s[r]=o[r])}else s=o}r.$stateful=!0;var o,a,s,l=this,c=t.length>1,p=0,d=u(e,r),h=[],f={},g=!0,m=0;return this.$watch(d,i)},$digest:function(){var e,n,r,a,u,p,d,h,f,v,y,$,b=i,E=this,N=[];g("$digest"),c.$$checkUrlChange(),this===S&&null!==l&&(c.defer.cancel(l),x()),s=null;do{for(h=!1,v=E;T.length;){try{$=T.shift(),$.scope.$eval($.expression,$.locals)}catch(L){t(L)}s=null}e:do{if(p=v.$$watchers)for(d=p.length;d--;)try{if(e=p[d])if(u=e.get,(n=u(v))===(r=e.last)||(e.eq?U(n,r):"number"==typeof n&&"number"==typeof r&&isNaN(n)&&isNaN(r))){if(e===s){h=!1;break e}}else h=!0,s=e,e.last=e.eq?F(n,null):n,a=e.fn,a(n,r===w?n:r,v),5>b&&(y=4-b,N[y]||(N[y]=[]),N[y].push({msg:C(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:n,oldVal:r}))}catch(L){t(L)}if(!(f=v.$$watchersCount&&v.$$childHead||v!==E&&v.$$nextSibling))for(;v!==E&&!(f=v.$$nextSibling);)v=v.$parent}while(v=f);if((h||T.length)&&!b--)throw m(),o("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",i,N)}while(h||T.length);for(m();A.length;)try{A.shift()()}catch(L){t(L)}},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===S&&c.$$applicationDestroyed(),y(this,-this.$$watchersCount);for(var t in this.$$listenerCount)b(this,this.$$listenerCount[t],t);e&&e.$$childHead==this&&(e.$$childHead=this.$$nextSibling),e&&e.$$childTail==this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=h,this.$on=this.$watch=this.$watchGroup=function(){return h},this.$$listeners={},this.$$nextSibling=null,d(this)}},$eval:function(e,t){return u(e)(this,t)},$evalAsync:function(e,t){S.$$phase||T.length||c.defer(function(){T.length&&S.$digest()}),T.push({scope:this,expression:u(e),locals:t})},$$postDigest:function(e){A.push(e)},$apply:function(e){try{g("$apply");try{return this.$eval(e)}finally{m()}}catch(n){t(n)}finally{try{S.$digest()}catch(n){throw t(n),n}}},$applyAsync:function(e){function t(){n.$eval(e)}var n=this;e&&N.push(t),e=u(e),E()},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(t);-1!==r&&(n[r]=null,b(i,1,e))}},$emit:function(e,n){var r,i,o,a=[],s=this,l=!1,u={name:e,targetScope:s,stopPropagation:function(){l=!0},preventDefault:function(){u.defaultPrevented=!0},defaultPrevented:!1},c=B([u],arguments,1);do{for(r=s.$$listeners[e]||a,u.currentScope=s,i=0,o=r.length;o>i;i++)if(r[i])try{r[i].apply(null,c)}catch(p){t(p)}else r.splice(i,1),i--,o--;if(l)return u.currentScope=null,u;s=s.$parent}while(s);return u.currentScope=null,u},$broadcast:function(e,n){var r=this,i=r,o=r,a={name:e,targetScope:r,preventDefault:function(){a.defaultPrevented=!0},defaultPrevented:!1};if(!r.$$listenerCount[e])return a;for(var s,l,u,c=B([a],arguments,1);i=o;){for(a.currentScope=i,s=i.$$listeners[e]||[],l=0,u=s.length;u>l;l++)if(s[l])try{s[l].apply(null,c)}catch(p){t(p)}else s.splice(l,1),l--,u--;if(!(o=i.$$listenerCount[e]&&i.$$childHead||i!==r&&i.$$nextSibling))for(;i!==r&&!(o=i.$$nextSibling);)i=i.$parent}return a.currentScope=null,a}};var S=new f,T=S.$$asyncQueue=[],A=S.$$postDigestQueue=[],N=S.$$applyAsyncQueue=[];return S}]}function En(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return y(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return y(e)?(t=e,this):t},this.$get=function(){return function(n,r){var i,o=r?t:e;return i=kn(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function Cn(e){if("self"===e)return e;if(w(e)){if(e.indexOf("***")>-1)throw yo("iwcard","Illegal sequence *** in string matcher.  String: {0}",e);return e=Yr(e).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+e+"$")}if(S(e))return new RegExp("^"+e.source+"$");throw yo("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function Sn(e){var t=[];return y(e)&&r(e,function(e){t.push(Cn(e))}),t}function Tn(){this.SCE_CONTEXTS=$o;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=Sn(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=Sn(e)),t},this.$get=["$injector",function(n){function r(e,t){return"self"===e?Rn(t):!!e.exec(t.href)}function i(n){var i,o,a=kn(n.toString()),s=!1;for(i=0,o=e.length;o>i;i++)if(r(e[i],a)){s=!0;break}if(s)for(i=0,o=t.length;o>i;i++)if(r(t[i],a)){s=!1;break}return s}function o(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}function a(e,t){var n=p.hasOwnProperty(e)?p[e]:null;if(!n)throw yo("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",e,t);if(null===t||v(t)||""===t)return t;if("string"!=typeof t)throw yo("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",e);return new n(t)}function s(e){return e instanceof c?e.$$unwrapTrustedValue():e}function l(e,t){if(null===t||v(t)||""===t)return t;var n=p.hasOwnProperty(e)?p[e]:null;if(n&&t instanceof n)return t.$$unwrapTrustedValue();if(e===$o.RESOURCE_URL){if(i(t))return t;throw yo("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",t.toString())}if(e===$o.HTML)return u(t);throw yo("unsafe","Attempting to use an unsafe value in a safe context.")}var u=function(e){throw yo("unsafe","Attempting to use an unsafe value in a safe context.")};n.has("$sanitize")&&(u=n.get("$sanitize"));var c=o(),p={};return p[$o.HTML]=o(c),p[$o.CSS]=o(c),p[$o.URL]=o(c),p[$o.JS]=o(c),p[$o.RESOURCE_URL]=o(p[$o.URL]),{trustAs:a,getTrusted:l,valueOf:s}}]}function An(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,n){if(e&&8>Mr)throw yo("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var i=q($o);i.isEnabled=function(){return e},i.trustAs=n.trustAs,i.getTrusted=n.getTrusted,i.valueOf=n.valueOf,e||(i.trustAs=i.getTrusted=function(e,t){return t},i.valueOf=f),i.parseAs=function(e,n){var r=t(n);return r.literal&&r.constant?r:t(n,function(t){return i.getTrusted(e,t)})};var o=i.parseAs,a=i.getTrusted,s=i.trustAs;return r($o,function(e,t){var n=Or(t);i[we("parse_as_"+n)]=function(t){return o(e,t)},i[we("get_trusted_"+n)]=function(t){return a(e,t)},i[we("trust_as_"+n)]=function(t){return s(e,t)}}),i}]}function Nn(){this.$get=["$window","$document",function(e,t){var n,r,i={},o=e.chrome&&e.chrome.app&&e.chrome.app.runtime,a=!o&&e.history&&e.history.pushState,s=p((/android (\d+)/.exec(Or((e.navigator||{}).userAgent))||[])[1]),l=/Boxee/i.test((e.navigator||{}).userAgent),u=t[0]||{},c=/^(Moz|webkit|ms)(?=[A-Z])/,d=u.body&&u.body.style,h=!1,f=!1;if(d){for(var g in d)if(r=c.exec(g)){n=r[0],n=n.substr(0,1).toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in d&&"webkit"),h=!!("transition"in d||n+"Transition"in d),f=!!("animation"in d||n+"Animation"in d),!s||h&&f||(h=w(d.webkitTransition),f=w(d.webkitAnimation))}return{history:!(!a||4>s||l),hasEvent:function(e){if("input"===e&&11>=Mr)return!1;if(v(i[e])){var t=u.createElement("div");i[e]="on"+e in t}return i[e]},csp:Xr(),vendorPrefix:n,transitions:h,animations:f,android:s}}]}function Ln(){var e;this.httpOptions=function(t){return t?(e=t,this):e},this.$get=["$templateCache","$http","$q","$sce",function(t,n,r,i){function o(a,s){function l(e){if(!s)throw bo("tpload","Failed to load template: {0} (HTTP status: {1} {2})",a,e.status,e.statusText);return r.reject(e)}o.totalPendingRequests++,w(a)&&t.get(a)||(a=i.getTrustedResourceUrl(a));var c=n.defaults&&n.defaults.transformResponse;return Wr(c)?c=c.filter(function(e){return e!==St}):c===St&&(c=null),n.get(a,u({cache:t,transformResponse:c},e))["finally"](function(){o.totalPendingRequests--}).then(function(e){return t.put(a,e.data),e.data},l)}return o.totalPendingRequests=0,o}]}function On(){this.$get=["$rootScope","$browser","$location",function(e,t,n){var i={};return i.findBindings=function(e,t,n){var i=e.getElementsByClassName("ng-binding"),o=[];return r(i,function(e){var i=Vr.element(e).data("$binding");i&&r(i,function(r){if(n){var i=new RegExp("(^|\\s)"+Yr(t)+"(\\s|\\||$)");i.test(r)&&o.push(e)}else-1!=r.indexOf(t)&&o.push(e)})}),o},i.findModels=function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",a="["+r[i]+"model"+o+'"'+t+'"]',s=e.querySelectorAll(a);if(s.length)return s}},i.getLocation=function(){return n.url()},i.setLocation=function(t){t!==n.url()&&(n.url(t),e.$digest())},i.whenStable=function(e){t.notifyWhenNoOutstandingRequests(e)},i}]}function In(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,i){function o(o,s,l){C(o)||(l=s,s=o,o=h);var u,c=H(arguments,3),p=y(l)&&!l,d=(p?r:n).defer(),f=d.promise;return u=t.defer(function(){try{d.resolve(o.apply(null,c))}catch(t){d.reject(t),i(t)}finally{delete a[f.$$timeoutId]}p||e.$apply()},s),f.$$timeoutId=u,a[u]=d,f}var a={};return o.cancel=function(e){return e&&e.$$timeoutId in a?(a[e.$$timeoutId].reject("canceled"),delete a[e.$$timeoutId],t.defer.cancel(e.$$timeoutId)):!1},o}]}function kn(e){var t=e;return Mr&&(wo.setAttribute("href",t),t=wo.href),wo.setAttribute("href",t),{href:wo.href,protocol:wo.protocol?wo.protocol.replace(/:$/,""):"",host:wo.host,search:wo.search?wo.search.replace(/^\?/,""):"",hash:wo.hash?wo.hash.replace(/^#/,""):"",hostname:wo.hostname,port:wo.port,pathname:"/"===wo.pathname.charAt(0)?wo.pathname:"/"+wo.pathname}}function Rn(e){var t=w(e)?kn(e):e;return t.protocol===xo.protocol&&t.host===xo.host}function Mn(){this.$get=g(e)}function _n(e){function t(e){try{return decodeURIComponent(e)}catch(t){return e}}var n=e[0]||{},r={},i="";return function(){var e,o,a,s,l,u=n.cookie||"";if(u!==i)for(i=u,e=i.split("; "),r={},a=0;a<e.length;a++)o=e[a],s=o.indexOf("="),s>0&&(l=t(o.substring(0,s)),v(r[l])&&(r[l]=t(o.substring(s+1))));return r}}function Dn(){this.$get=_n}function jn(e){function t(i,o){if($(i)){var a={};return r(i,function(e,n){a[n]=t(n,e)}),a}return e.factory(i+n,o)}var n="Filter";this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+n)}}],t("currency",Bn),t("date",rr),t("filter",Pn),t("json",ir),t("limitTo",or),t("lowercase",Lo),t("number",Hn),t("orderBy",ar),t("uppercase",Oo)}function Pn(){return function(e,r,i){if(!n(e)){if(null==e)return e;throw t("filter")("notarray","Expected array but received: {0}",e)}var o,a,s=Un(r);switch(s){case"function":o=r;break;case"boolean":case"null":case"number":case"string":a=!0;case"object":o=Fn(r,i,a);break;default:return e}return Array.prototype.filter.call(e,o)}}function Fn(e,t,n){var r,i=$(e)&&"$"in e;return t===!0?t=U:C(t)||(t=function(e,t){return v(e)?!1:null===e||null===t?e===t:$(t)||$(e)&&!m(e)?!1:(e=Or(""+e),t=Or(""+t),-1!==e.indexOf(t))}),r=function(r){return i&&!$(r)?qn(r,e.$,t,!1):qn(r,e,t,n)}}function qn(e,t,n,r,i){var o=Un(e),a=Un(t);if("string"===a&&"!"===t.charAt(0))return!qn(e,t.substring(1),n,r);if(Wr(e))return e.some(function(e){return qn(e,t,n,r)});switch(o){case"object":var s;if(r){for(s in e)if("$"!==s.charAt(0)&&qn(e[s],t,n,!0))return!0;return i?!1:qn(e,t,n,!1)}if("object"===a){for(s in t){var l=t[s];if(!C(l)&&!v(l)){var u="$"===s,c=u?e:e[s];if(!qn(c,l,n,u,u))return!1}}return!0}return n(e,t);case"function":return!1;default:return n(e,t)}}function Un(e){return null===e?"null":typeof e}function Bn(e){var t=e.NUMBER_FORMATS;return function(e,n,r){return v(n)&&(n=t.CURRENCY_SYM),v(r)&&(r=t.PATTERNS[1].maxFrac),null==e?e:Wn(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function Hn(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:Wn(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function Vn(e){var t,n,r,i,o,a=0;for((n=e.indexOf(Co))>-1&&(e=e.replace(Co,"")),(r=e.search(/e/i))>0?(0>n&&(n=r),n+=+e.slice(r+1),e=e.substring(0,r)):0>n&&(n=e.length),r=0;e.charAt(r)==So;r++);if(r==(o=e.length))t=[0],n=1;else{for(o--;e.charAt(o)==So;)o--;for(n-=r,t=[],i=0;o>=r;r++,i++)t[i]=+e.charAt(r)}return n>Eo&&(t=t.splice(0,Eo-1),a=n-1,n=1),{d:t,e:a,i:n}}function Gn(e,t,n,r){var i=e.d,o=i.length-e.i;t=v(t)?Math.min(Math.max(n,o),r):+t;var a=t+e.i,s=i[a];if(a>0){i.splice(Math.max(e.i,a));for(var l=a;l<i.length;l++)i[l]=0}else{o=Math.max(0,o),e.i=1,i.length=Math.max(1,a=t+1),i[0]=0;for(var u=1;a>u;u++)i[u]=0}if(s>=5)if(0>a-1){for(var c=0;c>a;c--)i.unshift(0),e.i++;i.unshift(1),e.i++}else i[a-1]++;for(;o<Math.max(0,t);o++)i.push(0);var p=i.reduceRight(function(e,t,n,r){return t+=e,r[n]=t%10,Math.floor(t/10)},0);p&&(i.unshift(p),e.i++)}function Wn(e,t,n,r,i){if(!w(e)&&!x(e)||isNaN(e))return"";var o,a=!isFinite(e),s=!1,l=Math.abs(e)+"",u="";if(a)u="∞";else{o=Vn(l),Gn(o,i,t.minFrac,t.maxFrac);var c=o.d,p=o.i,d=o.e,h=[];for(s=c.reduce(function(e,t){return e&&!t},!0);0>p;)c.unshift(0),p++;p>0?h=c.splice(p):(h=c,c=[0]);var f=[];for(c.length>=t.lgSize&&f.unshift(c.splice(-t.lgSize).join(""));c.length>t.gSize;)f.unshift(c.splice(-t.gSize).join(""));c.length&&f.unshift(c.join("")),u=f.join(n),h.length&&(u+=r+h.join("")),d&&(u+="e+"+d)}return 0>e&&!s?t.negPre+u+t.negSuf:t.posPre+u+t.posSuf}function zn(e,t,n,r){var i="";for((0>e||r&&0>=e)&&(r?e=-e+1:(e=-e,i="-")),e=""+e;e.length<t;)e=So+e;return n&&(e=e.substr(e.length-t)),i+e}function Kn(e,t,n,r,i){return n=n||0,function(o){var a=o["get"+e]();return(n>0||a>-n)&&(a+=n),0===a&&-12==n&&(a=12),zn(a,t,r,i)}}function Yn(e,t,n){return function(r,i){var o=r["get"+e](),a=(n?"STANDALONE":"")+(t?"SHORT":""),s=Ir(a+e);return i[s][o]}}function Xn(e,t,n){var r=-1*n,i=r>=0?"+":"";return i+=zn(Math[r>0?"floor":"ceil"](r/60),2)+zn(Math.abs(r%60),2)}function Qn(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(4>=t?5:12)-t)}function Jn(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate()+(4-e.getDay()))}function Zn(e){return function(t){var n=Qn(t.getFullYear()),r=Jn(t),i=+r-+n,o=1+Math.round(i/6048e5);return zn(o,e)}}function er(e,t){return e.getHours()<12?t.AMPMS[0]:t.AMPMS[1]}function tr(e,t){return e.getFullYear()<=0?t.ERAS[0]:t.ERAS[1]}function nr(e,t){return e.getFullYear()<=0?t.ERANAMES[0]:t.ERANAMES[1]}function rr(e){function t(e){var t;if(t=e.match(n)){var r=new Date(0),i=0,o=0,a=t[8]?r.setUTCFullYear:r.setFullYear,s=t[8]?r.setUTCHours:r.setHours;t[9]&&(i=p(t[9]+t[10]),o=p(t[9]+t[11])),a.call(r,p(t[1]),p(t[2])-1,p(t[3]));var l=p(t[4]||0)-i,u=p(t[5]||0)-o,c=p(t[6]||0),d=Math.round(1e3*parseFloat("0."+(t[7]||0)));return s.call(r,l,u,c,d),r}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,i,o){var a,s,l="",u=[];if(i=i||"mediumDate",i=e.DATETIME_FORMATS[i]||i,w(n)&&(n=No.test(n)?p(n):t(n)),x(n)&&(n=new Date(n)),!E(n)||!isFinite(n.getTime()))return n;for(;i;)s=Ao.exec(i),s?(u=B(u,s,1),i=u.pop()):(u.push(i),i=null);var c=n.getTimezoneOffset();return o&&(c=K(o,c),n=X(n,o,!0)),r(u,function(t){a=To[t],l+=a?a(n,e.DATETIME_FORMATS,c):"''"===t?"'":t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),l}}function ir(){return function(e,t){return v(t)&&(t=2),W(e,t)}}function or(){return function(e,t,n){return t=Math.abs(Number(t))===1/0?Number(t):p(t),isNaN(t)?e:(x(e)&&(e=e.toString()),Wr(e)||w(e)?(n=!n||isNaN(n)?0:p(n),n=0>n?Math.max(0,e.length+n):n,t>=0?e.slice(n,n+t):0===n?e.slice(t,e.length):e.slice(Math.max(0,n+t),n)):e)}}function ar(e){function r(t,n){return n=n?-1:1,t.map(function(t){var r=1,i=f;if(C(t))i=t;else if(w(t)&&("+"!=t.charAt(0)&&"-"!=t.charAt(0)||(r="-"==t.charAt(0)?-1:1,t=t.substring(1)),""!==t&&(i=e(t),i.constant))){var o=i();i=function(e){return e[o]}}return{get:i,descending:r*n}})}function i(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}function o(e,t){return"function"==typeof e.valueOf&&(e=e.valueOf(),i(e))?e:m(e)&&(e=e.toString(),i(e))?e:t}function a(e,t){var n=typeof e;return null===e?(n="string",e="null"):"string"===n?e=e.toLowerCase():"object"===n&&(e=o(e,t)),{value:e,type:n}}function s(e,t){var n=0;return e.type===t.type?e.value!==t.value&&(n=e.value<t.value?-1:1):n=e.type<t.type?-1:1,n}return function(e,i,o){function l(e,t){return{value:e,predicateValues:c.map(function(n){return a(n.get(e),t)})}}function u(e,t){for(var n=0,r=0,i=c.length;i>r&&!(n=s(e.predicateValues[r],t.predicateValues[r])*c[r].descending);++r);return n}if(null==e)return e;if(!n(e))throw t("orderBy")("notarray","Expected array but received: {0}",e);Wr(i)||(i=[i]),0===i.length&&(i=["+"]);var c=r(i,o);c.push({get:function(){return{}},descending:o?-1:1});var p=Array.prototype.map.call(e,l);return p.sort(u),e=p.map(function(e){return e.value})}}function sr(e){return C(e)&&(e={link:e}),e.restrict=e.restrict||"AC",g(e)}function lr(e,t){e.$name=t}function ur(e,t,n,i,o){var a=this,s=[];a.$error={},a.$$success={},a.$pending=void 0,a.$name=o(t.name||t.ngForm||"")(n),a.$dirty=!1,a.$pristine=!0,a.$valid=!0,a.$invalid=!1,a.$submitted=!1,a.$$parentForm=Ro,a.$rollbackViewValue=function(){r(s,function(e){e.$rollbackViewValue()})},a.$commitViewValue=function(){r(s,function(e){e.$commitViewValue()})},a.$addControl=function(e){de(e.$name,"input"),s.push(e),e.$name&&(a[e.$name]=e),e.$$parentForm=a},a.$$renameControl=function(e,t){var n=e.$name;a[n]===e&&delete a[n],a[t]=e,e.$name=t},a.$removeControl=function(e){e.$name&&a[e.$name]===e&&delete a[e.$name],r(a.$pending,function(t,n){a.$setValidity(n,null,e)}),r(a.$error,function(t,n){a.$setValidity(n,null,e)}),r(a.$$success,function(t,n){a.$setValidity(n,null,e)}),P(s,e),e.$$parentForm=Ro},Cr({ctrl:this,$element:e,set:function(e,t,n){var r=e[t];if(r){var i=r.indexOf(n);-1===i&&r.push(n)}else e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(P(r,n),0===r.length&&delete e[t])},$animate:i}),a.$setDirty=function(){i.removeClass(e,va),i.addClass(e,ya),a.$dirty=!0,a.$pristine=!1,a.$$parentForm.$setDirty()},a.$setPristine=function(){i.setClass(e,va,ya+" "+Mo),a.$dirty=!1,a.$pristine=!0,a.$submitted=!1,r(s,function(e){e.$setPristine()})},a.$setUntouched=function(){r(s,function(e){e.$setUntouched()})},a.$setSubmitted=function(){i.addClass(e,Mo),a.$submitted=!0,a.$$parentForm.$setSubmitted()}}function cr(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function pr(e,t,n,r,i,o){dr(e,t,n,r,i,o),cr(r)}function dr(e,t,n,r,i,o){var a=Or(t[0].type);if(!i.android){var s=!1;t.on("compositionstart",function(){s=!0}),t.on("compositionend",function(){s=!1,u()})}var l,u=function(e){if(l&&(o.defer.cancel(l),l=null),!s){var i=t.val(),u=e&&e.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=Kr(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,u)}};if(i.hasEvent("input"))t.on("input",u);else{var c=function(e,t,n){l||(l=o.defer(function(){l=null,t&&t.value===n||u(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||t>15&&19>t||t>=37&&40>=t||c(e,this,this.value)}),i.hasEvent("paste")&&t.on("paste cut",c)}t.on("change",u),Ko[a]&&r.$$hasNativeValidators&&a===n.type&&t.on(zo,function(e){if(!l){var t=this[Nr],n=t.badInput,r=t.typeMismatch;l=o.defer(function(){l=null,t.badInput===n&&t.typeMismatch===r||u(e)})}}),r.$render=function(){var e=r.$isEmpty(r.$viewValue)?"":r.$viewValue;t.val()!==e&&t.val(e)}}function hr(e,t){if(E(e))return e;if(w(e)){Vo.lastIndex=0;var n=Vo.exec(e);if(n){var r=+n[1],i=+n[2],o=0,a=0,s=0,l=0,u=Qn(r),c=7*(i-1);return t&&(o=t.getHours(),a=t.getMinutes(),s=t.getSeconds(),l=t.getMilliseconds()),new Date(r,0,u.getDate()+c,o,a,s,l)}}return NaN}function fr(e,t){return function(n,i){var o,a;if(E(n))return n;if(w(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),Po.test(n))return new Date(n);if(e.lastIndex=0,o=e.exec(n))return o.shift(),a=i?{yyyy:i.getFullYear(),MM:i.getMonth()+1,dd:i.getDate(),HH:i.getHours(),mm:i.getMinutes(),ss:i.getSeconds(),sss:i.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},r(o,function(e,n){n<t.length&&(a[t[n]]=+e)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function gr(e,t,n,r){return function(i,o,a,s,l,u,c){function p(e){return e&&!(e.getTime&&e.getTime()!==e.getTime())}function d(e){return y(e)&&!E(e)?n(e)||void 0:e}mr(i,o,a,s),dr(i,o,a,s,l,u);var h,f=s&&s.$options&&s.$options.timezone;if(s.$$parserName=e,s.$parsers.push(function(e){if(s.$isEmpty(e))return null;if(t.test(e)){var r=n(e,h);return f&&(r=X(r,f)),r}}),s.$formatters.push(function(e){if(e&&!E(e))throw Ca("datefmt","Expected `{0}` to be a date",e);return p(e)?(h=e,h&&f&&(h=X(h,f,!0)),c("date")(e,r,f)):(h=null,"")}),y(a.min)||a.ngMin){var g;s.$validators.min=function(e){return!p(e)||v(g)||n(e)>=g},a.$observe("min",function(e){g=d(e),s.$validate()})}if(y(a.max)||a.ngMax){var m;s.$validators.max=function(e){return!p(e)||v(m)||n(e)<=m},a.$observe("max",function(e){m=d(e),s.$validate()})}}}function mr(e,t,n,r){var i=t[0],o=r.$$hasNativeValidators=$(i.validity);o&&r.$parsers.push(function(e){var n=t.prop(Nr)||{};return n.badInput||n.typeMismatch?void 0:e})}function vr(e,t,n,r,i,o){if(mr(e,t,n,r),dr(e,t,n,r,i,o),r.$$parserName="number",r.$parsers.push(function(e){return r.$isEmpty(e)?null:Uo.test(e)?parseFloat(e):void 0}),r.$formatters.push(function(e){if(!r.$isEmpty(e)){if(!x(e))throw Ca("numfmt","Expected `{0}` to be a number",e);e=e.toString()}return e}),y(n.min)||n.ngMin){var a;r.$validators.min=function(e){return r.$isEmpty(e)||v(a)||e>=a;
},n.$observe("min",function(e){y(e)&&!x(e)&&(e=parseFloat(e,10)),a=x(e)&&!isNaN(e)?e:void 0,r.$validate()})}if(y(n.max)||n.ngMax){var s;r.$validators.max=function(e){return r.$isEmpty(e)||v(s)||s>=e},n.$observe("max",function(e){y(e)&&!x(e)&&(e=parseFloat(e,10)),s=x(e)&&!isNaN(e)?e:void 0,r.$validate()})}}function yr(e,t,n,r,i,o){dr(e,t,n,r,i,o),cr(r),r.$$parserName="url",r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||Fo.test(n)}}function $r(e,t,n,r,i,o){dr(e,t,n,r,i,o),cr(r),r.$$parserName="email",r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||qo.test(n)}}function br(e,t,n,r){v(n.name)&&t.attr("name",a());var i=function(e){t[0].checked&&r.$setViewValue(n.value,e&&e.type)};t.on("click",i),r.$render=function(){var e=n.value;t[0].checked=e==r.$viewValue},n.$observe("value",r.$render)}function wr(e,t,n,r,i){var o;if(y(r)){if(o=e(r),!o.constant)throw Ca("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(t)}return i}function xr(e,t,n,r,i,o,a,s){var l=wr(s,e,"ngTrueValue",n.ngTrueValue,!0),u=wr(s,e,"ngFalseValue",n.ngFalseValue,!1),c=function(e){r.$setViewValue(t[0].checked,e&&e.type)};t.on("click",c),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return e===!1},r.$formatters.push(function(e){return U(e,l)}),r.$parsers.push(function(e){return e?l:u})}function Er(e,t){return e="ngClass"+e,["$animate",function(n){function i(e,t){var n=[];e:for(var r=0;r<e.length;r++){for(var i=e[r],o=0;o<t.length;o++)if(i==t[o])continue e;n.push(i)}return n}function o(e){var t=[];return Wr(e)?(r(e,function(e){t=t.concat(o(e))}),t):w(e)?e.split(" "):$(e)?(r(e,function(e,n){e&&(t=t.concat(n.split(" ")))}),t):e}return{restrict:"AC",link:function(a,s,l){function u(e){var t=p(e,1);l.$addClass(t)}function c(e){var t=p(e,-1);l.$removeClass(t)}function p(e,t){var n=s.data("$classCounts")||ge(),i=[];return r(e,function(e){(t>0||n[e])&&(n[e]=(n[e]||0)+t,n[e]===+(t>0)&&i.push(e))}),s.data("$classCounts",n),i.join(" ")}function d(e,t){var r=i(t,e),o=i(e,t);r=p(r,1),o=p(o,-1),r&&r.length&&n.addClass(s,r),o&&o.length&&n.removeClass(s,o)}function h(e){if(t===!0||a.$index%2===t){var n=o(e||[]);if(f){if(!U(e,f)){var r=o(f);d(r,n)}}else u(n)}f=Wr(e)?e.map(function(e){return q(e)}):q(e)}var f;a.$watch(l[e],h,!0),l.$observe("class",function(t){h(a.$eval(l[e]))}),"ngClass"!==e&&a.$watch("$index",function(n,r){var i=1&n;if(i!==(1&r)){var s=o(a.$eval(l[e]));i===t?u(s):c(s)}})}}}]}function Cr(e){function t(e,t,s){v(t)?n("$pending",e,s):r("$pending",e,s),I(t)?t?(c(a.$error,e,s),u(a.$$success,e,s)):(u(a.$error,e,s),c(a.$$success,e,s)):(c(a.$error,e,s),c(a.$$success,e,s)),a.$pending?(i(wa,!0),a.$valid=a.$invalid=void 0,o("",null)):(i(wa,!1),a.$valid=Sr(a.$error),a.$invalid=!a.$valid,o("",a.$valid));var l;l=a.$pending&&a.$pending[e]?void 0:a.$error[e]?!1:a.$$success[e]?!0:null,o(e,l),a.$$parentForm.$setValidity(e,l,a)}function n(e,t,n){a[e]||(a[e]={}),u(a[e],t,n)}function r(e,t,n){a[e]&&c(a[e],t,n),Sr(a[e])&&(a[e]=void 0)}function i(e,t){t&&!l[e]?(p.addClass(s,e),l[e]=!0):!t&&l[e]&&(p.removeClass(s,e),l[e]=!1)}function o(e,t){e=e?"-"+le(e,"-"):"",i(ga+e,t===!0),i(ma+e,t===!1)}var a=e.ctrl,s=e.$element,l={},u=e.set,c=e.unset,p=e.$animate;l[ma]=!(l[ga]=s.hasClass(ga)),a.$setValidity=t}function Sr(e){if(e)for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function Tr(e){e[0].hasAttribute("selected")&&(e[0].selected=!0)}var Ar=/^\/(.+)\/([a-z]*)$/,Nr="validity",Lr=Object.prototype.hasOwnProperty,Or=function(e){return w(e)?e.toLowerCase():e},Ir=function(e){return w(e)?e.toUpperCase():e},kr=function(e){return w(e)?e.replace(/[A-Z]/g,function(e){return String.fromCharCode(32|e.charCodeAt(0))}):e},Rr=function(e){return w(e)?e.replace(/[a-z]/g,function(e){return String.fromCharCode(-33&e.charCodeAt(0))}):e};"i"!=="I".toLowerCase()&&(Or=kr,Ir=Rr);var Mr,_r,Dr,jr,Pr=[].slice,Fr=[].splice,qr=[].push,Ur=Object.prototype.toString,Br=Object.getPrototypeOf,Hr=t("ng"),Vr=e.angular||(e.angular={}),Gr=0;Mr=e.document.documentMode,h.$inject=[],f.$inject=[];var Wr=Array.isArray,zr=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,Kr=function(e){return w(e)?e.trim():e},Yr=function(e){return e.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},Xr=function(){function t(){try{return new Function(""),!1}catch(e){return!0}}if(!y(Xr.rules)){var n=e.document.querySelector("[ng-csp]")||e.document.querySelector("[data-ng-csp]");if(n){var r=n.getAttribute("ng-csp")||n.getAttribute("data-ng-csp");Xr.rules={noUnsafeEval:!r||-1!==r.indexOf("no-unsafe-eval"),noInlineStyle:!r||-1!==r.indexOf("no-inline-style")}}else Xr.rules={noUnsafeEval:t(),noInlineStyle:!1}}return Xr.rules},Qr=function(){if(y(Qr.name_))return Qr.name_;var t,n,r,i,o=Zr.length;for(n=0;o>n;++n)if(r=Zr[n],t=e.document.querySelector("["+r.replace(":","\\:")+"jq]")){i=t.getAttribute(r+"jq");break}return Qr.name_=i},Jr=/:/g,Zr=["ng-","data-ng-","ng:","x-ng-"],ei=/[A-Z]/g,ti=!1,ni=1,ri=2,ii=3,oi=8,ai=9,si=11,li={full:"1.5.5",major:1,minor:5,dot:5,codeName:"material-conspiration"};Le.expando="ng339";var ui=Le.cache={},ci=1,pi=function(e,t,n){e.addEventListener(t,n,!1)},di=function(e,t,n){e.removeEventListener(t,n,!1)};Le._data=function(e){return this.cache[e[this.expando]]||{}};var hi=/([\:\-\_]+(.))/g,fi=/^moz([A-Z])/,gi={mouseleave:"mouseout",mouseenter:"mouseover"},mi=t("jqLite"),vi=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,yi=/<|&#?\w+;/,$i=/<([\w:-]+)/,bi=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,wi={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};wi.optgroup=wi.option,wi.tbody=wi.tfoot=wi.colgroup=wi.caption=wi.thead,wi.th=wi.td;var xi=e.Node.prototype.contains||function(e){return!!(16&this.compareDocumentPosition(e))},Ei=Le.prototype={ready:function(t){function n(){r||(r=!0,t())}var r=!1;"complete"===e.document.readyState?e.setTimeout(n):(this.on("DOMContentLoaded",n),Le(e).on("load",n))},toString:function(){var e=[];return r(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return _r(e>=0?this[e]:this[this.length+e])},length:0,push:qr,sort:[].sort,splice:[].splice},Ci={};r("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(e){Ci[Or(e)]=e});var Si={};r("input,select,option,textarea,button,form,details".split(","),function(e){Si[e]=!0});var Ti={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};r({data:_e,removeData:Re,hasData:Ce,cleanData:Se},function(e,t){Le[t]=e}),r({data:_e,inheritedData:Ue,scope:function(e){return _r.data(e,"$scope")||Ue(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return _r.data(e,"$isolateScope")||_r.data(e,"$isolateScopeNoTemplate")},controller:qe,injector:function(e){return Ue(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:De,css:function(e,t,n){return t=we(t),y(n)?void(e.style[t]=n):e.style[t]},attr:function(e,t,n){var r=e.nodeType;if(r!==ii&&r!==ri&&r!==oi){var i=Or(t);if(Ci[i]){if(!y(n))return e[t]||(e.attributes.getNamedItem(t)||h).specified?i:void 0;n?(e[t]=!0,e.setAttribute(t,i)):(e[t]=!1,e.removeAttribute(i))}else if(y(n))e.setAttribute(t,n);else if(e.getAttribute){var o=e.getAttribute(t,2);return null===o?void 0:o}}},prop:function(e,t,n){return y(n)?void(e[t]=n):e[t]},text:function(){function e(e,t){if(v(t)){var n=e.nodeType;return n===ni||n===ii?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(v(t)){if(e.multiple&&"select"===j(e)){var n=[];return r(e.options,function(e){e.selected&&n.push(e.value||e.text)}),0===n.length?null:n}return e.value}e.value=t},html:function(e,t){return v(t)?e.innerHTML:(Ie(e,!0),void(e.innerHTML=t))},empty:Be},function(e,t){Le.prototype[t]=function(t,n){var r,i,o=this.length;if(e!==Be&&v(2==e.length&&e!==De&&e!==qe?t:n)){if($(t)){for(r=0;o>r;r++)if(e===_e)e(this[r],t);else for(i in t)e(this[r],i,t[i]);return this}for(var a=e.$dv,s=v(a)?Math.min(o,1):o,l=0;s>l;l++){var u=e(this[l],t,n);a=a?a+u:u}return a}for(r=0;o>r;r++)e(this[r],t,n);return this}}),r({removeData:Re,on:function(e,t,n,r){if(y(r))throw mi("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(Ee(e)){var i=Me(e,!0),o=i.events,a=i.handle;a||(a=i.handle=ze(e,o));for(var s=t.indexOf(" ")>=0?t.split(" "):[t],l=s.length,u=function(t,r,i){var s=o[t];s||(s=o[t]=[],s.specialHandlerWrapper=r,"$destroy"===t||i||pi(e,t,a)),s.push(n)};l--;)t=s[l],gi[t]?(u(gi[t],Ye),u(t,void 0,!0)):u(t)}},off:ke,one:function(e,t,n){e=_r(e),e.on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,i=e.parentNode;Ie(e),r(new Le(t),function(t){n?i.insertBefore(t,n.nextSibling):i.replaceChild(t,e),n=t})},children:function(e){var t=[];return r(e.childNodes,function(e){e.nodeType===ni&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(n===ni||n===si){t=new Le(t);for(var r=0,i=t.length;i>r;r++){var o=t[r];e.appendChild(o)}}},prepend:function(e,t){if(e.nodeType===ni){var n=e.firstChild;r(new Le(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){Ne(e,_r(t).eq(0).clone()[0])},remove:He,detach:function(e){He(e,!0)},after:function(e,t){var n=e,r=e.parentNode;t=new Le(t);for(var i=0,o=t.length;o>i;i++){var a=t[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:Pe,removeClass:je,toggleClass:function(e,t,n){t&&r(t.split(" "),function(t){var r=n;v(r)&&(r=!De(e,t)),(r?Pe:je)(e,t)})},parent:function(e){var t=e.parentNode;return t&&t.nodeType!==si?t:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:Oe,triggerHandler:function(e,t,n){var i,o,a,s=t.type||t,l=Me(e),c=l&&l.events,p=c&&c[s];p&&(i={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:h,type:s,target:e},t.type&&(i=u(i,t)),o=q(p),a=n?[i].concat(n):[i],r(o,function(t){i.isImmediatePropagationStopped()||t.apply(e,a)}))}},function(e,t){Le.prototype[t]=function(t,n,r){for(var i,o=0,a=this.length;a>o;o++)v(i)?(i=e(this[o],t,n,r),y(i)&&(i=_r(i))):Fe(i,e(this[o],t,n,r));return y(i)?i:this},Le.prototype.bind=Le.prototype.on,Le.prototype.unbind=Le.prototype.off}),Je.prototype={put:function(e,t){this[Qe(e,this.nextUid)]=t},get:function(e){return this[Qe(e,this.nextUid)]},remove:function(e){var t=this[e=Qe(e,this.nextUid)];return delete this[e],t}};var Ai=[function(){this.$get=[function(){return Je}]}],Ni=/^([^\(]+?)=>/,Li=/^[^\(]*\(\s*([^\)]*)\)/m,Oi=/,/,Ii=/^\s*(_?)(\S+?)\1\s*$/,ki=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Ri=t("$injector");nt.$$annotate=tt;var Mi=t("$animate"),_i=1,Di="ng-animate",ji=function(){this.$get=h},Pi=function(){var e=new Je,t=[];this.$get=["$$AnimateRunner","$rootScope",function(n,i){function o(e,t,n){var i=!1;return t&&(t=w(t)?t.split(" "):Wr(t)?t:[],r(t,function(t){t&&(i=!0,e[t]=n)})),i}function a(){r(t,function(t){var n=e.get(t);if(n){var i=at(t.attr("class")),o="",a="";r(n,function(e,t){var n=!!i[t];e!==n&&(e?o+=(o.length?" ":"")+t:a+=(a.length?" ":"")+t)}),r(t,function(e){o&&Pe(e,o),a&&je(e,a)}),e.remove(t)}}),t.length=0}function s(n,r,s){var l=e.get(n)||{},u=o(l,r,!0),c=o(l,s,!1);(u||c)&&(e.put(n,l),t.push(n),1===t.length&&i.$$postDigest(a))}return{enabled:h,on:h,off:h,pin:h,push:function(e,t,r,i){i&&i(),r=r||{},r.from&&e.css(r.from),r.to&&e.css(r.to),(r.addClass||r.removeClass)&&s(e,r.addClass,r.removeClass);var o=new n;return o.complete(),o}}}]},Fi=["$provide",function(e){var t=this;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw Mi("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var i=n+"-animation";t.$$registeredAnimations[n.substr(1)]=i,e.factory(i,r)},this.classNameFilter=function(e){if(1===arguments.length&&(this.$$classNameFilter=e instanceof RegExp?e:null,this.$$classNameFilter)){var t=new RegExp("(\\s+|\\/)"+Di+"(\\s+|\\/)");if(t.test(this.$$classNameFilter.toString()))throw Mi("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',Di)}return this.$$classNameFilter},this.$get=["$$animateQueue",function(e){function t(e,t,n){if(n){var r=ot(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(e):t.prepend(e)}return{on:e.on,off:e.off,pin:e.pin,enabled:e.enabled,cancel:function(e){e.end&&e.end()},enter:function(n,r,i,o){return r=r&&_r(r),i=i&&_r(i),r=r||i.parent(),t(n,r,i),e.push(n,"enter",st(o))},move:function(n,r,i,o){return r=r&&_r(r),i=i&&_r(i),r=r||i.parent(),t(n,r,i),e.push(n,"move",st(o))},leave:function(t,n){return e.push(t,"leave",st(n),function(){t.remove()})},addClass:function(t,n,r){return r=st(r),r.addClass=it(r.addclass,n),e.push(t,"addClass",r)},removeClass:function(t,n,r){return r=st(r),r.removeClass=it(r.removeClass,n),e.push(t,"removeClass",r)},setClass:function(t,n,r,i){return i=st(i),i.addClass=it(i.addClass,n),i.removeClass=it(i.removeClass,r),e.push(t,"setClass",i)},animate:function(t,n,r,i,o){return o=st(o),o.from=o.from?u(o.from,n):n,o.to=o.to?u(o.to,r):r,i=i||"ng-inline-animate",o.tempClasses=it(o.tempClasses,i),e.push(t,"animate",o)}}}]}],qi=function(){this.$get=["$$rAF",function(e){function t(t){n.push(t),n.length>1||e(function(){for(var e=0;e<n.length;e++)n[e]();n=[]})}var n=[];return function(){var e=!1;return t(function(){e=!0}),function(n){e?n():t(n)}}}]},Ui=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$document","$timeout",function(e,t,n,i,o){function a(e){this.setHost(e);var t=n(),r=function(e){o(e,0,!1)};this._doneCallbacks=[],this._tick=function(e){var n=i[0];n&&n.hidden?r(e):t(e)},this._state=0}var s=0,l=1,u=2;return a.chain=function(e,t){function n(){return r===e.length?void t(!0):void e[r](function(e){return e===!1?void t(!1):(r++,void n())})}var r=0;n()},a.all=function(e,t){function n(n){o=o&&n,++i===e.length&&t(o)}var i=0,o=!0;r(e,function(e){e.done(n)})},a.prototype={setHost:function(e){this.host=e||{}},done:function(e){this._state===u?e():this._doneCallbacks.push(e)},progress:h,getPromise:function(){if(!this.promise){var t=this;this.promise=e(function(e,n){t.done(function(t){t===!1?n():e()})})}return this.promise},then:function(e,t){return this.getPromise().then(e,t)},"catch":function(e){return this.getPromise()["catch"](e)},"finally":function(e){return this.getPromise()["finally"](e)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(e){var t=this;t._state===s&&(t._state=l,t._tick(function(){t._resolve(e)}))},_resolve:function(e){this._state!==u&&(r(this._doneCallbacks,function(t){t(e)}),this._doneCallbacks.length=0,this._state=u)}},a}]},Bi=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(e,t,n){return function(t,r){function i(){return e(function(){o(),s||l.complete(),s=!0}),l}function o(){a.addClass&&(t.addClass(a.addClass),a.addClass=null),a.removeClass&&(t.removeClass(a.removeClass),a.removeClass=null),a.to&&(t.css(a.to),a.to=null)}var a=r||{};a.$$prepared||(a=F(a)),a.cleanupStyles&&(a.from=a.to=null),a.from&&(t.css(a.from),a.from=null);var s,l=new n;return{start:i,end:i}}}]},Hi=t("$compile"),Vi=new dt;ht.$inject=["$provide","$$sanitizeUriProvider"],ft.prototype.isFirstChange=function(){return this.previousValue===Vi};var Gi=/^((?:x|data)[\:\-_])/i,Wi=t("$controller"),zi=/^(\S+)(\s+as\s+([\w$]+))?$/,Ki=function(){this.$get=["$document",function(e){return function(t){return t?!t.nodeType&&t instanceof _r&&(t=t[0]):t=e[0].body,t.offsetWidth+1}}]},Yi="application/json",Xi={"Content-Type":Yi+";charset=utf-8"},Qi=/^\[|^\{(?!\{)/,Ji={"[":/]$/,"{":/}$/},Zi=/^\)\]\}',?\n/,eo=t("$http"),to=function(e){return function(){throw eo("legacy","The method `{0}` on the promise returned from `$http` has been disabled.",e)}},no=Vr.$interpolateMinErr=t("$interpolate");no.throwNoconcat=function(e){throw no("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",e)},no.interr=function(e,t){return no("interr","Can't interpolate: {0}\n{1}",e,t.toString())};var ro=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,io={http:80,https:443,ftp:21},oo=t("$location"),ao={$$html5:!1,$$replace:!1,absUrl:Kt("$$absUrl"),url:function(e){if(v(e))return this.$$url;var t=ro.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:Kt("$$protocol"),host:Kt("$$host"),port:Kt("$$port"),path:Yt("$$path",function(e){return e=null!==e?e.toString():"","/"==e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(w(e)||x(e))e=e.toString(),this.$$search=Z(e);else{if(!$(e))throw oo("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");e=F(e,{}),r(e,function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:v(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:Yt("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};r([zt,Wt,Gt],function(e){e.prototype=Object.create(ao),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==Gt||!this.$$html5)throw oo("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=v(t)?null:t,this}});var so=t("$parse"),lo=Function.prototype.call,uo=Function.prototype.apply,co=Function.prototype.bind,po=ge();r("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(e){po[e]=!0});var ho={n:"\n",f:"\f",r:"\r",t:"	",v:"\x0B","'":"'",'"':'"'},fo=function(e){this.options=e};fo.prototype={constructor:fo,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;){var t=this.text.charAt(this.index);if('"'===t||"'"===t)this.readString(t);else if(this.isNumber(t)||"."===t&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(t,"(){}[].,;:?"))this.tokens.push({index:this.index,text:t}),this.index++;else if(this.isWhitespace(t))this.index++;else{var n=t+this.peek(),r=n+this.peek(2),i=po[t],o=po[n],a=po[r];if(i||o||a){var s=a?r:o?n:t;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){var t=e||1;return this.index+t<this.text.length?this.text.charAt(this.index+t):!1},isNumber:function(e){return e>="0"&&"9">=e&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"	"===e||"\n"===e||"\x0B"===e||" "===e},isIdentifierStart:function(e){return this.options.isIdentifierStart?this.options.isIdentifierStart(e,this.codePointAt(e)):this.isValidIdentifierStart(e)},isValidIdentifierStart:function(e){return e>="a"&&"z">=e||e>="A"&&"Z">=e||"_"===e||"$"===e},isIdentifierContinue:function(e){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(e,this.codePointAt(e)):this.isValidIdentifierContinue(e)},isValidIdentifierContinue:function(e,t){return this.isValidIdentifierStart(e,t)||this.isNumber(e)},codePointAt:function(e){return 1===e.length?e.charCodeAt(0):(e.charCodeAt(0)<<10)+e.charCodeAt(1)-56613888},peekMultichar:function(){var e=this.text.charAt(this.index),t=this.peek();if(!t)return e;var n=e.charCodeAt(0),r=t.charCodeAt(0);return n>=55296&&56319>=n&&r>=56320&&57343>=r?e+t:e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){n=n||this.index;var r=y(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n;throw so("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",e,r,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=Or(this.text.charAt(this.index));if("."==n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){var e=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var t=this.peekMultichar();if(!this.isIdentifierContinue(t))break;this.index+=t.length}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{var s=ho[o];n+=s||o}i=!1}else if("\\"===o)i=!0;else{if(o===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",t)}};var go=function(e,t){this.lexer=e,this.options=t};go.Program="Program",go.ExpressionStatement="ExpressionStatement",go.AssignmentExpression="AssignmentExpression",go.ConditionalExpression="ConditionalExpression",go.LogicalExpression="LogicalExpression",go.BinaryExpression="BinaryExpression",go.UnaryExpression="UnaryExpression",go.CallExpression="CallExpression",go.MemberExpression="MemberExpression",go.Identifier="Identifier",go.Literal="Literal",go.ArrayExpression="ArrayExpression",go.Property="Property",go.ObjectExpression="ObjectExpression",go.ThisExpression="ThisExpression",go.LocalsExpression="LocalsExpression",go.NGValueParameter="NGValueParameter",go.prototype={ast:function(e){this.text=e,this.tokens=this.lexer.lex(e);var t=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),t},program:function(){for(var e=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&e.push(this.expressionStatement()),!this.expect(";"))return{type:go.Program,body:e}},expressionStatement:function(){return{type:go.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var e,t=this.expression();e=this.expect("|");)t=this.filter(t);return t},expression:function(){return this.assignment()},assignment:function(){var e=this.ternary();return this.expect("=")&&(e={type:go.AssignmentExpression,left:e,right:this.assignment(),operator:"="}),e},ternary:function(){var e,t,n=this.logicalOR();return this.expect("?")&&(e=this.expression(),this.consume(":"))?(t=this.expression(),{type:go.ConditionalExpression,test:n,alternate:e,consequent:t}):n},logicalOR:function(){for(var e=this.logicalAND();this.expect("||");)e={type:go.LogicalExpression,operator:"||",left:e,right:this.logicalAND()};return e},logicalAND:function(){for(var e=this.equality();this.expect("&&");)e={type:go.LogicalExpression,operator:"&&",left:e,right:this.equality()};return e},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t={type:go.BinaryExpression,operator:e.text,left:t,right:this.relational()};return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t={type:go.BinaryExpression,operator:e.text,left:t,right:this.additive()};return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t={type:go.BinaryExpression,operator:e.text,left:t,right:this.multiplicative()};return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t={type:go.BinaryExpression,operator:e.text,left:t,right:this.unary()};return t},unary:function(){var e;return(e=this.expect("+","-","!"))?{type:go.UnaryExpression,operator:e.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var e;this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?e=F(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?e={type:go.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());for(var t;t=this.expect("(","[",".");)"("===t.text?(e={type:go.CallExpression,callee:e,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(e={type:go.MemberExpression,object:e,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?e={type:go.MemberExpression,object:e,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return e},filter:function(e){for(var t=[e],n={type:go.CallExpression,callee:this.identifier(),arguments:t,filter:!0};this.expect(":");)t.push(this.expression());return n},parseArguments:function(){var e=[];if(")"!==this.peekToken().text)do e.push(this.expression());while(this.expect(","));return e},identifier:function(){var e=this.consume();return e.identifier||this.throwError("is not a valid identifier",e),{type:go.Identifier,name:e.text}},constant:function(){return{type:go.Literal,value:this.consume().value}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:go.ArrayExpression,elements:e}},object:function(){var e,t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;e={type:go.Property,kind:"init"},this.peek().constant?e.key=this.constant():this.peek().identifier?e.key=this.identifier():this.throwError("invalid key",this.peek()),this.consume(":"),e.value=this.expression(),t.push(e)}while(this.expect(","));return this.consume("}"),{type:go.ObjectExpression,properties:t}},throwError:function(e,t){throw so("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",t.text,e,t.index+1,this.text,this.text.substring(t.index))},consume:function(e){if(0===this.tokens.length)throw so("ueoe","Unexpected end of expression: {0}",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},peekToken:function(){if(0===this.tokens.length)throw so("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,i){if(this.tokens.length>e){var o=this.tokens[e],a=o.text;if(a===t||a===n||a===r||a===i||!t&&!n&&!r&&!i)return o}return!1},expect:function(e,t,n,r){var i=this.peek(e,t,n,r);return i?(this.tokens.shift(),i):!1},selfReferential:{"this":{type:go.ThisExpression},$locals:{type:go.LocalsExpression}}},hn.prototype={compile:function(e,t){var n=this,i=this.astBuilder.ast(e);this.state={nextId:0,filters:{},expensiveChecks:t,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},sn(i,n.$filter);var o,a="";if(this.stage="assign",o=cn(i)){this.state.computing="assign";var s=this.nextId();this.recurse(o,s),this.return_(s),a="fn.assign="+this.generateFunction("assign","s,v,l")}var l=ln(i.body);n.stage="inputs",r(l,function(e,t){var r="fn"+t;n.state[r]={vars:[],body:[],own:{}},n.state.computing=r;var i=n.nextId();n.recurse(e,i),n.return_(i),n.state.inputs.push(r),e.watchId=t}),this.state.computing="fn",this.stage="main",this.recurse(i);var u='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+a+this.watchFns()+"return fn;",c=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext","ifDefined","plus","text",u)(this.$filter,Jt,en,tn,Zt,nn,rn,on,e);return this.state=this.stage=void 0,c.literal=pn(i),c.constant=dn(i),c},USE:"use",STRICT:"strict",watchFns:function(){var e=[],t=this.state.inputs,n=this;return r(t,function(t){e.push("var "+t+"="+n.generateFunction(t,"s"))}),t.length&&e.push("fn.inputs=["+t.join(",")+"];"),e.join("")},generateFunction:function(e,t){return"function("+t+"){"+this.varsPrefix(e)+this.body(e)+"};"},filterPrefix:function(){var e=[],t=this;return r(this.state.filters,function(n,r){e.push(n+"=$filter("+t.escape(r)+")")}),e.length?"var "+e.join(",")+";":""},varsPrefix:function(e){return this.state[e].vars.length?"var "+this.state[e].vars.join(",")+";":""},body:function(e){return this.state[e].body.join("")},recurse:function(e,t,n,i,o,a){var s,l,u,c,p=this;if(i=i||h,!a&&y(e.watchId))return t=t||this.nextId(),void this.if_("i",this.lazyAssign(t,this.computedMember("i",e.watchId)),this.lazyRecurse(e,t,n,i,o,!0));switch(e.type){case go.Program:r(e.body,function(t,n){p.recurse(t.expression,void 0,void 0,function(e){l=e}),n!==e.body.length-1?p.current().body.push(l,";"):p.return_(l)});break;case go.Literal:c=this.escape(e.value),this.assign(t,c),i(c);break;case go.UnaryExpression:this.recurse(e.argument,void 0,void 0,function(e){l=e}),c=e.operator+"("+this.ifDefined(l,0)+")",this.assign(t,c),i(c);break;case go.BinaryExpression:this.recurse(e.left,void 0,void 0,function(e){s=e}),this.recurse(e.right,void 0,void 0,function(e){l=e}),c="+"===e.operator?this.plus(s,l):"-"===e.operator?this.ifDefined(s,0)+e.operator+this.ifDefined(l,0):"("+s+")"+e.operator+"("+l+")",this.assign(t,c),i(c);break;case go.LogicalExpression:t=t||this.nextId(),p.recurse(e.left,t),p.if_("&&"===e.operator?t:p.not(t),p.lazyRecurse(e.right,t)),i(t);break;case go.ConditionalExpression:t=t||this.nextId(),p.recurse(e.test,t),p.if_(t,p.lazyRecurse(e.alternate,t),p.lazyRecurse(e.consequent,t)),i(t);break;case go.Identifier:t=t||this.nextId(),n&&(n.context="inputs"===p.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",e.name)+"?l:s"),n.computed=!1,n.name=e.name),Jt(e.name),p.if_("inputs"===p.stage||p.not(p.getHasOwnProperty("l",e.name)),function(){p.if_("inputs"===p.stage||"s",function(){o&&1!==o&&p.if_(p.not(p.nonComputedMember("s",e.name)),p.lazyAssign(p.nonComputedMember("s",e.name),"{}")),p.assign(t,p.nonComputedMember("s",e.name))})},t&&p.lazyAssign(t,p.nonComputedMember("l",e.name))),(p.state.expensiveChecks||gn(e.name))&&p.addEnsureSafeObject(t),i(t);break;case go.MemberExpression:s=n&&(n.context=this.nextId())||this.nextId(),t=t||this.nextId(),p.recurse(e.object,s,void 0,function(){p.if_(p.notNull(s),function(){o&&1!==o&&p.addEnsureSafeAssignContext(s),e.computed?(l=p.nextId(),p.recurse(e.property,l),p.getStringValue(l),p.addEnsureSafeMemberName(l),o&&1!==o&&p.if_(p.not(p.computedMember(s,l)),p.lazyAssign(p.computedMember(s,l),"{}")),c=p.ensureSafeObject(p.computedMember(s,l)),p.assign(t,c),n&&(n.computed=!0,n.name=l)):(Jt(e.property.name),o&&1!==o&&p.if_(p.not(p.nonComputedMember(s,e.property.name)),p.lazyAssign(p.nonComputedMember(s,e.property.name),"{}")),c=p.nonComputedMember(s,e.property.name),(p.state.expensiveChecks||gn(e.property.name))&&(c=p.ensureSafeObject(c)),p.assign(t,c),n&&(n.computed=!1,n.name=e.property.name))},function(){p.assign(t,"undefined")}),i(t)},!!o);break;case go.CallExpression:t=t||this.nextId(),e.filter?(l=p.filter(e.callee.name),u=[],r(e.arguments,function(e){var t=p.nextId();p.recurse(e,t),u.push(t)}),c=l+"("+u.join(",")+")",p.assign(t,c),i(t)):(l=p.nextId(),s={},u=[],
p.recurse(e.callee,l,s,function(){p.if_(p.notNull(l),function(){p.addEnsureSafeFunction(l),r(e.arguments,function(e){p.recurse(e,p.nextId(),void 0,function(e){u.push(p.ensureSafeObject(e))})}),s.name?(p.state.expensiveChecks||p.addEnsureSafeObject(s.context),c=p.member(s.context,s.name,s.computed)+"("+u.join(",")+")"):c=l+"("+u.join(",")+")",c=p.ensureSafeObject(c),p.assign(t,c)},function(){p.assign(t,"undefined")}),i(t)}));break;case go.AssignmentExpression:if(l=this.nextId(),s={},!un(e.left))throw so("lval","Trying to assign a value to a non l-value");this.recurse(e.left,void 0,s,function(){p.if_(p.notNull(s.context),function(){p.recurse(e.right,l),p.addEnsureSafeObject(p.member(s.context,s.name,s.computed)),p.addEnsureSafeAssignContext(s.context),c=p.member(s.context,s.name,s.computed)+e.operator+l,p.assign(t,c),i(t||c)})},1);break;case go.ArrayExpression:u=[],r(e.elements,function(e){p.recurse(e,p.nextId(),void 0,function(e){u.push(e)})}),c="["+u.join(",")+"]",this.assign(t,c),i(c);break;case go.ObjectExpression:u=[],r(e.properties,function(e){p.recurse(e.value,p.nextId(),void 0,function(t){u.push(p.escape(e.key.type===go.Identifier?e.key.name:""+e.key.value)+":"+t)})}),c="{"+u.join(",")+"}",this.assign(t,c),i(c);break;case go.ThisExpression:this.assign(t,"s"),i("s");break;case go.LocalsExpression:this.assign(t,"l"),i("l");break;case go.NGValueParameter:this.assign(t,"v"),i("v")}},getHasOwnProperty:function(e,t){var n=e+"."+t,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,e+"&&("+this.escape(t)+" in "+e+")")),r[n]},assign:function(e,t){return e?(this.current().body.push(e,"=",t,";"),e):void 0},filter:function(e){return this.state.filters.hasOwnProperty(e)||(this.state.filters[e]=this.nextId(!0)),this.state.filters[e]},ifDefined:function(e,t){return"ifDefined("+e+","+this.escape(t)+")"},plus:function(e,t){return"plus("+e+","+t+")"},return_:function(e){this.current().body.push("return ",e,";")},if_:function(e,t,n){if(e===!0)t();else{var r=this.current().body;r.push("if(",e,"){"),t(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(e){return"!("+e+")"},notNull:function(e){return e+"!=null"},nonComputedMember:function(e,t){var n=/[$_a-zA-Z][$_a-zA-Z0-9]*/,r=/[^$_a-zA-Z0-9]/g;return n.test(t)?e+"."+t:e+'["'+t.replace(r,this.stringEscapeFn)+'"]'},computedMember:function(e,t){return e+"["+t+"]"},member:function(e,t,n){return n?this.computedMember(e,t):this.nonComputedMember(e,t)},addEnsureSafeObject:function(e){this.current().body.push(this.ensureSafeObject(e),";")},addEnsureSafeMemberName:function(e){this.current().body.push(this.ensureSafeMemberName(e),";")},addEnsureSafeFunction:function(e){this.current().body.push(this.ensureSafeFunction(e),";")},addEnsureSafeAssignContext:function(e){this.current().body.push(this.ensureSafeAssignContext(e),";")},ensureSafeObject:function(e){return"ensureSafeObject("+e+",text)"},ensureSafeMemberName:function(e){return"ensureSafeMemberName("+e+",text)"},ensureSafeFunction:function(e){return"ensureSafeFunction("+e+",text)"},getStringValue:function(e){this.assign(e,"getStringValue("+e+")")},ensureSafeAssignContext:function(e){return"ensureSafeAssignContext("+e+",text)"},lazyRecurse:function(e,t,n,r,i,o){var a=this;return function(){a.recurse(e,t,n,r,i,o)}},lazyAssign:function(e,t){var n=this;return function(){n.assign(e,t)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)},escape:function(e){if(w(e))return"'"+e.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(x(e))return e.toString();if(e===!0)return"true";if(e===!1)return"false";if(null===e)return"null";if("undefined"==typeof e)return"undefined";throw so("esc","IMPOSSIBLE")},nextId:function(e,t){var n="v"+this.state.nextId++;return e||this.current().vars.push(n+(t?"="+t:"")),n},current:function(){return this.state[this.state.computing]}},fn.prototype={compile:function(e,t){var n=this,i=this.astBuilder.ast(e);this.expression=e,this.expensiveChecks=t,sn(i,n.$filter);var o,a;(o=cn(i))&&(a=this.recurse(o));var s,l=ln(i.body);l&&(s=[],r(l,function(e,t){var r=n.recurse(e);e.input=r,s.push(r),e.watchId=t}));var u=[];r(i.body,function(e){u.push(n.recurse(e.expression))});var c=0===i.body.length?h:1===i.body.length?u[0]:function(e,t){var n;return r(u,function(r){n=r(e,t)}),n};return a&&(c.assign=function(e,t,n){return a(e,n,t)}),s&&(c.inputs=s),c.literal=pn(i),c.constant=dn(i),c},recurse:function(e,t,n){var i,o,a,s=this;if(e.input)return this.inputs(e.input,e.watchId);switch(e.type){case go.Literal:return this.value(e.value,t);case go.UnaryExpression:return o=this.recurse(e.argument),this["unary"+e.operator](o,t);case go.BinaryExpression:return i=this.recurse(e.left),o=this.recurse(e.right),this["binary"+e.operator](i,o,t);case go.LogicalExpression:return i=this.recurse(e.left),o=this.recurse(e.right),this["binary"+e.operator](i,o,t);case go.ConditionalExpression:return this["ternary?:"](this.recurse(e.test),this.recurse(e.alternate),this.recurse(e.consequent),t);case go.Identifier:return Jt(e.name,s.expression),s.identifier(e.name,s.expensiveChecks||gn(e.name),t,n,s.expression);case go.MemberExpression:return i=this.recurse(e.object,!1,!!n),e.computed||(Jt(e.property.name,s.expression),o=e.property.name),e.computed&&(o=this.recurse(e.property)),e.computed?this.computedMember(i,o,t,n,s.expression):this.nonComputedMember(i,o,s.expensiveChecks,t,n,s.expression);case go.CallExpression:return a=[],r(e.arguments,function(e){a.push(s.recurse(e))}),e.filter&&(o=this.$filter(e.callee.name)),e.filter||(o=this.recurse(e.callee,!0)),e.filter?function(e,n,r,i){for(var s=[],l=0;l<a.length;++l)s.push(a[l](e,n,r,i));var u=o.apply(void 0,s,i);return t?{context:void 0,name:void 0,value:u}:u}:function(e,n,r,i){var l,u=o(e,n,r,i);if(null!=u.value){en(u.context,s.expression),tn(u.value,s.expression);for(var c=[],p=0;p<a.length;++p)c.push(en(a[p](e,n,r,i),s.expression));l=en(u.value.apply(u.context,c),s.expression)}return t?{value:l}:l};case go.AssignmentExpression:return i=this.recurse(e.left,!0,1),o=this.recurse(e.right),function(e,n,r,a){var l=i(e,n,r,a),u=o(e,n,r,a);return en(l.value,s.expression),nn(l.context),l.context[l.name]=u,t?{value:u}:u};case go.ArrayExpression:return a=[],r(e.elements,function(e){a.push(s.recurse(e))}),function(e,n,r,i){for(var o=[],s=0;s<a.length;++s)o.push(a[s](e,n,r,i));return t?{value:o}:o};case go.ObjectExpression:return a=[],r(e.properties,function(e){a.push({key:e.key.type===go.Identifier?e.key.name:""+e.key.value,value:s.recurse(e.value)})}),function(e,n,r,i){for(var o={},s=0;s<a.length;++s)o[a[s].key]=a[s].value(e,n,r,i);return t?{value:o}:o};case go.ThisExpression:return function(e){return t?{value:e}:e};case go.LocalsExpression:return function(e,n){return t?{value:n}:n};case go.NGValueParameter:return function(e,n,r){return t?{value:r}:r}}},"unary+":function(e,t){return function(n,r,i,o){var a=e(n,r,i,o);return a=y(a)?+a:0,t?{value:a}:a}},"unary-":function(e,t){return function(n,r,i,o){var a=e(n,r,i,o);return a=y(a)?-a:0,t?{value:a}:a}},"unary!":function(e,t){return function(n,r,i,o){var a=!e(n,r,i,o);return t?{value:a}:a}},"binary+":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a),l=t(r,i,o,a),u=on(s,l);return n?{value:u}:u}},"binary-":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a),l=t(r,i,o,a),u=(y(s)?s:0)-(y(l)?l:0);return n?{value:u}:u}},"binary*":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)*t(r,i,o,a);return n?{value:s}:s}},"binary/":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)/t(r,i,o,a);return n?{value:s}:s}},"binary%":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)%t(r,i,o,a);return n?{value:s}:s}},"binary===":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)===t(r,i,o,a);return n?{value:s}:s}},"binary!==":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)!==t(r,i,o,a);return n?{value:s}:s}},"binary==":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)==t(r,i,o,a);return n?{value:s}:s}},"binary!=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)!=t(r,i,o,a);return n?{value:s}:s}},"binary<":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)<t(r,i,o,a);return n?{value:s}:s}},"binary>":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)>t(r,i,o,a);return n?{value:s}:s}},"binary<=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)<=t(r,i,o,a);return n?{value:s}:s}},"binary>=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)>=t(r,i,o,a);return n?{value:s}:s}},"binary&&":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)&&t(r,i,o,a);return n?{value:s}:s}},"binary||":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)||t(r,i,o,a);return n?{value:s}:s}},"ternary?:":function(e,t,n,r){return function(i,o,a,s){var l=e(i,o,a,s)?t(i,o,a,s):n(i,o,a,s);return r?{value:l}:l}},value:function(e,t){return function(){return t?{context:void 0,name:void 0,value:e}:e}},identifier:function(e,t,n,r,i){return function(o,a,s,l){var u=a&&e in a?a:o;r&&1!==r&&u&&!u[e]&&(u[e]={});var c=u?u[e]:void 0;return t&&en(c,i),n?{context:u,name:e,value:c}:c}},computedMember:function(e,t,n,r,i){return function(o,a,s,l){var u,c,p=e(o,a,s,l);return null!=p&&(u=t(o,a,s,l),u=Zt(u),Jt(u,i),r&&1!==r&&(nn(p),p&&!p[u]&&(p[u]={})),c=p[u],en(c,i)),n?{context:p,name:u,value:c}:c}},nonComputedMember:function(e,t,n,r,i,o){return function(a,s,l,u){var c=e(a,s,l,u);i&&1!==i&&(nn(c),c&&!c[t]&&(c[t]={}));var p=null!=c?c[t]:void 0;return(n||gn(t))&&en(p,o),r?{context:c,name:t,value:p}:p}},inputs:function(e,t){return function(n,r,i,o){return o?o[t]:e(n,r,i)}}};var mo=function(e,t,n){this.lexer=e,this.$filter=t,this.options=n,this.ast=new go(e,n),this.astCompiler=n.csp?new fn(this.ast,t):new hn(this.ast,t)};mo.prototype={constructor:mo,parse:function(e){return this.astCompiler.compile(e,this.options.expensiveChecks)}};var vo=Object.prototype.valueOf,yo=t("$sce"),$o={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},bo=t("$compile"),wo=e.document.createElement("a"),xo=kn(e.location.href);_n.$inject=["$document"],jn.$inject=["$provide"];var Eo=22,Co=".",So="0";Bn.$inject=["$locale"],Hn.$inject=["$locale"];var To={yyyy:Kn("FullYear",4,0,!1,!0),yy:Kn("FullYear",2,0,!0,!0),y:Kn("FullYear",1,0,!1,!0),MMMM:Yn("Month"),MMM:Yn("Month",!0),MM:Kn("Month",2,1),M:Kn("Month",1,1),LLLL:Yn("Month",!1,!0),dd:Kn("Date",2),d:Kn("Date",1),HH:Kn("Hours",2),H:Kn("Hours",1),hh:Kn("Hours",2,-12),h:Kn("Hours",1,-12),mm:Kn("Minutes",2),m:Kn("Minutes",1),ss:Kn("Seconds",2),s:Kn("Seconds",1),sss:Kn("Milliseconds",3),EEEE:Yn("Day"),EEE:Yn("Day",!0),a:er,Z:Xn,ww:Zn(2),w:Zn(1),G:tr,GG:tr,GGG:tr,GGGG:nr},Ao=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,No=/^\-?\d+$/;rr.$inject=["$locale"];var Lo=g(Or),Oo=g(Ir);ar.$inject=["$parse"];var Io=g({restrict:"E",compile:function(e,t){return t.href||t.xlinkHref?void 0:function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===Ur.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(n)||e.preventDefault()})}}}}),ko={};r(Ci,function(e,t){function n(e,n,i){e.$watch(i[r],function(e){i.$set(t,!!e)})}if("multiple"!=e){var r=gt("ng-"+t),i=n;"checked"===e&&(i=function(e,t,i){i.ngModel!==i[r]&&n(e,t,i)}),ko[r]=function(){return{restrict:"A",priority:100,link:i}}}}),r(Ti,function(e,t){ko[t]=function(){return{priority:100,link:function(e,n,r){if("ngPattern"===t&&"/"==r.ngPattern.charAt(0)){var i=r.ngPattern.match(Ar);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}e.$watch(r[t],function(e){r.$set(t,e)})}}}}),r(["src","srcset","href"],function(e){var t=gt("ng-"+e);ko[t]=function(){return{priority:99,link:function(n,r,i){var o=e,a=e;"href"===e&&"[object SVGAnimatedString]"===Ur.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(t,function(t){return t?(i.$set(a,t),void(Mr&&o&&r.prop(o,i[a]))):void("href"===e&&i.$set(a,null))})}}}});var Ro={$addControl:h,$$renameControl:lr,$removeControl:h,$setValidity:h,$setDirty:h,$setPristine:h,$setSubmitted:h},Mo="ng-submitted";ur.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var _o=function(e){return["$timeout","$parse",function(t,n){function r(e){return""===e?n('this[""]').assign:n(e).assign||h}var i={name:"form",restrict:e?"EAC":"E",require:["form","^^?form"],controller:ur,compile:function(n,i){n.addClass(va).addClass(ga);var o=i.name?"name":e&&i.ngForm?"ngForm":!1;return{pre:function(e,n,i,a){var s=a[0];if(!("action"in i)){var l=function(t){e.$apply(function(){s.$commitViewValue(),s.$setSubmitted()}),t.preventDefault()};pi(n[0],"submit",l),n.on("$destroy",function(){t(function(){di(n[0],"submit",l)},0,!1)})}var c=a[1]||s.$$parentForm;c.$addControl(s);var p=o?r(s.$name):h;o&&(p(e,s),i.$observe(o,function(t){s.$name!==t&&(p(e,void 0),s.$$parentForm.$$renameControl(s,t),(p=r(s.$name))(e,s))})),n.on("$destroy",function(){s.$$parentForm.$removeControl(s),p(e,void 0),u(s,Ro)})}}}};return i}]},Do=_o(),jo=_o(!0),Po=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,Fo=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,qo=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,Uo=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Bo=/^(\d{4,})-(\d{2})-(\d{2})$/,Ho=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Vo=/^(\d{4,})-W(\d\d)$/,Go=/^(\d{4,})-(\d\d)$/,Wo=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,zo="keydown wheel mousedown",Ko=ge();r("date,datetime-local,month,time,week".split(","),function(e){Ko[e]=!0});var Yo={text:pr,date:gr("date",Bo,fr(Bo,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":gr("datetimelocal",Ho,fr(Ho,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:gr("time",Wo,fr(Wo,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:gr("week",Vo,hr,"yyyy-Www"),month:gr("month",Go,fr(Go,["yyyy","MM"]),"yyyy-MM"),number:vr,url:yr,email:$r,radio:br,checkbox:xr,hidden:h,button:h,submit:h,reset:h,file:h},Xo=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(Yo[Or(a.type)]||Yo.text)(i,o,a,s[0],t,e,n,r)}}}}],Qo=/^(true|false|\d+)$/,Jo=function(){return{restrict:"A",priority:100,compile:function(e,t){return Qo.test(t.ngValue)?function(e,t,n){n.$set("value",e.$eval(n.ngValue))}:function(e,t,n){e.$watch(n.ngValue,function(e){n.$set("value",e)})}}}},Zo=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,n,r){e.$$addBindingInfo(n,r.ngBind),n=n[0],t.$watch(r.ngBind,function(e){n.textContent=v(e)?"":e})}}}}],ea=["$interpolate","$compile",function(e,t){return{compile:function(n){return t.$$addBindingClass(n),function(n,r,i){var o=e(r.attr(i.$attr.ngBindTemplate));t.$$addBindingInfo(r,o.expressions),r=r[0],i.$observe("ngBindTemplate",function(e){r.textContent=v(e)?"":e})}}}}],ta=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,i){var o=t(i.ngBindHtml),a=t(i.ngBindHtml,function(e){return(e||"").toString()});return n.$$addBindingClass(r),function(t,r,i){n.$$addBindingInfo(r,i.ngBindHtml),t.$watch(a,function(){r.html(e.getTrustedHtml(o(t))||"")})}}}}],na=g({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),ra=Er("",!0),ia=Er("Odd",0),oa=Er("Even",1),aa=sr({compile:function(e,t){t.$set("ngCloak",void 0),e.removeClass("ng-cloak")}}),sa=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],la={},ua={blur:!0,focus:!0};r("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=gt("ng-"+e);la[t]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[t],null,!0);return function(t,n){n.on(e,function(n){var i=function(){a(t,{$event:n})};ua[e]&&r.$$phase?t.$evalAsync(i):t.$apply(i)})}}}}]});var ca=["$animate","$compile",function(e,t){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,l,u;n.$watch(i.ngIf,function(n){n?l||a(function(n,o){l=o,n[n.length++]=t.$$createComment("end ngIf",i.ngIf),s={clone:n},e.enter(n,r.parent(),r)}):(u&&(u.remove(),u=null),l&&(l.$destroy(),l=null),s&&(u=fe(s.clone),e.leave(u).then(function(){u=null}),s=null))})}}}],pa=["$templateRequest","$anchorScroll","$animate",function(e,t,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:Vr.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,l,u,c){var p,d,h,f=0,g=function(){d&&(d.remove(),d=null),p&&(p.$destroy(),p=null),h&&(n.leave(h).then(function(){d=null}),d=h,h=null)};r.$watch(o,function(o){var l=function(){!y(s)||s&&!r.$eval(s)||t()},d=++f;o?(e(o,!0).then(function(e){if(!r.$$destroyed&&d===f){var t=r.$new();u.template=e;var s=c(t,function(e){g(),n.enter(e,null,i).then(l)});p=t,h=s,p.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||d===f&&(g(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(g(),u.template=null)})}}}}],da=["$compile",function(t){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){return Ur.call(r[0]).match(/SVG/)?(r.empty(),void t(Te(o.template,e.document).childNodes)(n,function(e){r.append(e)},{futureParentElement:r})):(r.html(o.template),void t(r.contents())(n))}}}],ha=sr({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),fa=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,n,i){var o=t.attr(n.$attr.ngList)||", ",a="false"!==n.ngTrim,s=a?Kr(o):o,l=function(e){if(!v(e)){var t=[];return e&&r(e.split(s),function(e){e&&t.push(a?Kr(e):e)}),t}};i.$parsers.push(l),i.$formatters.push(function(e){return Wr(e)?e.join(o):void 0}),i.$isEmpty=function(e){return!e||!e.length}}}},ga="ng-valid",ma="ng-invalid",va="ng-pristine",ya="ng-dirty",$a="ng-untouched",ba="ng-touched",wa="ng-pending",xa="ng-empty",Ea="ng-not-empty",Ca=t("ngModel"),Sa=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(e,t,n,i,o,a,s,l,u,c){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=void 0,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=void 0,this.$name=c(n.name||"",!1)(e),this.$$parentForm=Ro;var p,d=o(n.ngModel),f=d.assign,g=d,m=f,$=null,b=this;this.$$setOptions=function(e){if(b.$options=e,e&&e.getterSetter){var t=o(n.ngModel+"()"),r=o(n.ngModel+"($$$p)");g=function(e){var n=d(e);return C(n)&&(n=t(e)),n},m=function(e,t){C(d(e))?r(e,{$$$p:t}):f(e,t)}}else if(!d.assign)throw Ca("nonassign","Expression '{0}' is non-assignable. Element: {1}",n.ngModel,Q(i))},this.$render=h,this.$isEmpty=function(e){return v(e)||""===e||null===e||e!==e},this.$$updateEmptyClasses=function(e){b.$isEmpty(e)?(a.removeClass(i,Ea),a.addClass(i,xa)):(a.removeClass(i,xa),a.addClass(i,Ea))};var w=0;Cr({ctrl:this,$element:i,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]},$animate:a}),this.$setPristine=function(){b.$dirty=!1,b.$pristine=!0,a.removeClass(i,ya),a.addClass(i,va)},this.$setDirty=function(){b.$dirty=!0,b.$pristine=!1,a.removeClass(i,va),a.addClass(i,ya),b.$$parentForm.$setDirty()},this.$setUntouched=function(){b.$touched=!1,b.$untouched=!0,a.setClass(i,$a,ba)},this.$setTouched=function(){b.$touched=!0,b.$untouched=!1,a.setClass(i,ba,$a)},this.$rollbackViewValue=function(){s.cancel($),b.$viewValue=b.$$lastCommittedViewValue,b.$render()},this.$validate=function(){if(!x(b.$modelValue)||!isNaN(b.$modelValue)){var e=b.$$lastCommittedViewValue,t=b.$$rawModelValue,n=b.$valid,r=b.$modelValue,i=b.$options&&b.$options.allowInvalid;b.$$runValidators(t,e,function(e){i||n===e||(b.$modelValue=e?t:void 0,b.$modelValue!==r&&b.$$writeModelToScope())})}},this.$$runValidators=function(e,t,n){function i(){var e=b.$$parserName||"parse";return v(p)?(s(e,null),!0):(p||(r(b.$validators,function(e,t){s(t,null)}),r(b.$asyncValidators,function(e,t){s(t,null)})),s(e,p),p)}function o(){var n=!0;return r(b.$validators,function(r,i){var o=r(e,t);n=n&&o,s(i,o)}),n?!0:(r(b.$asyncValidators,function(e,t){s(t,null)}),!1)}function a(){var n=[],i=!0;r(b.$asyncValidators,function(r,o){var a=r(e,t);if(!k(a))throw Ca("nopromise","Expected asynchronous validator to return a promise but got '{0}' instead.",a);s(o,void 0),n.push(a.then(function(){s(o,!0)},function(){i=!1,s(o,!1)}))}),n.length?u.all(n).then(function(){l(i)},h):l(!0)}function s(e,t){c===w&&b.$setValidity(e,t)}function l(e){c===w&&n(e)}w++;var c=w;return i()&&o()?void a():void l(!1)},this.$commitViewValue=function(){var e=b.$viewValue;s.cancel($),(b.$$lastCommittedViewValue!==e||""===e&&b.$$hasNativeValidators)&&(b.$$updateEmptyClasses(e),b.$$lastCommittedViewValue=e,b.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){function t(){b.$modelValue!==o&&b.$$writeModelToScope()}var n=b.$$lastCommittedViewValue,r=n;if(p=v(r)?void 0:!0)for(var i=0;i<b.$parsers.length;i++)if(r=b.$parsers[i](r),v(r)){p=!1;break}x(b.$modelValue)&&isNaN(b.$modelValue)&&(b.$modelValue=g(e));var o=b.$modelValue,a=b.$options&&b.$options.allowInvalid;b.$$rawModelValue=r,a&&(b.$modelValue=r,t()),b.$$runValidators(r,b.$$lastCommittedViewValue,function(e){a||(b.$modelValue=e?r:void 0,t())})},this.$$writeModelToScope=function(){m(e,b.$modelValue),r(b.$viewChangeListeners,function(e){try{e()}catch(n){t(n)}})},this.$setViewValue=function(e,t){b.$viewValue=e,b.$options&&!b.$options.updateOnDefault||b.$$debounceViewValueCommit(t)},this.$$debounceViewValueCommit=function(t){var n,r=0,i=b.$options;i&&y(i.debounce)&&(n=i.debounce,x(n)?r=n:x(n[t])?r=n[t]:x(n["default"])&&(r=n["default"])),s.cancel($),r?$=s(function(){b.$commitViewValue()},r):l.$$phase?b.$commitViewValue():e.$apply(function(){b.$commitViewValue()})},e.$watch(function(){var t=g(e);if(t!==b.$modelValue&&(b.$modelValue===b.$modelValue||t===t)){b.$modelValue=b.$$rawModelValue=t,p=void 0;for(var n=b.$formatters,r=n.length,i=t;r--;)i=n[r](i);b.$viewValue!==i&&(b.$$updateEmptyClasses(i),b.$viewValue=b.$$lastCommittedViewValue=i,b.$render(),b.$$runValidators(t,i,h))}return t})}],Ta=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Sa,priority:1,compile:function(t){return t.addClass(va).addClass($a).addClass(ga),{pre:function(e,t,n,r){var i=r[0],o=r[1]||i.$$parentForm;i.$$setOptions(r[2]&&r[2].$options),o.$addControl(i),n.$observe("name",function(e){i.$name!==e&&i.$$parentForm.$$renameControl(i,e)}),e.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(t,n,r,i){var o=i[0];o.$options&&o.$options.updateOn&&n.on(o.$options.updateOn,function(e){o.$$debounceViewValueCommit(e&&e.type)}),n.on("blur",function(){o.$touched||(e.$$phase?t.$evalAsync(o.$setTouched):t.$apply(o.$setTouched))})}}}}}],Aa=/(\s+|^)default(\s+|$)/,Na=function(){return{restrict:"A",controller:["$scope","$attrs",function(e,t){var n=this;this.$options=F(e.$eval(t.ngModelOptions)),y(this.$options.updateOn)?(this.$options.updateOnDefault=!1,this.$options.updateOn=Kr(this.$options.updateOn.replace(Aa,function(){return n.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},La=sr({terminal:!0,priority:1e3}),Oa=t("ngOptions"),Ia=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,ka=["$compile","$document","$parse",function(t,i,o){function a(e,t,r){function i(e,t,n,r,i){this.selectValue=e,this.viewValue=t,this.label=n,this.group=r,this.disabled=i}function a(e){var t;if(!u&&n(e))t=e;else{t=[];for(var r in e)e.hasOwnProperty(r)&&"$"!==r.charAt(0)&&t.push(r)}return t}var s=e.match(Ia);if(!s)throw Oa("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",e,Q(t));var l=s[5]||s[7],u=s[6],c=/ as /.test(s[0])&&s[1],p=s[9],d=o(s[2]?s[1]:l),h=c&&o(c),f=h||d,g=p&&o(p),m=p?function(e,t){return g(r,t)}:function(e){return Qe(e)},v=function(e,t){return m(e,E(e,t))},y=o(s[2]||s[1]),$=o(s[3]||""),b=o(s[4]||""),w=o(s[8]),x={},E=u?function(e,t){return x[u]=t,x[l]=e,x}:function(e){return x[l]=e,x};return{trackBy:p,getTrackByValue:v,getWatchables:o(w,function(e){var t=[];e=e||[];for(var n=a(e),i=n.length,o=0;i>o;o++){var l=e===n?o:n[o],u=e[l],c=E(u,l),p=m(u,c);if(t.push(p),s[2]||s[1]){var d=y(r,c);t.push(d)}if(s[4]){var h=b(r,c);t.push(h)}}return t}),getOptions:function(){for(var e=[],t={},n=w(r)||[],o=a(n),s=o.length,l=0;s>l;l++){var u=n===o?l:o[l],c=n[u],d=E(c,u),h=f(r,d),g=m(h,d),x=y(r,d),C=$(r,d),S=b(r,d),T=new i(g,h,x,C,S);e.push(T),t[g]=T}return{items:e,selectValueMap:t,getOptionFromViewValue:function(e){return t[v(e)]},getViewValueFromOption:function(e){return p?Vr.copy(e.viewValue):e.viewValue}}}}}function s(e,n,o,s){function c(e,t){var n=l.cloneNode(!1);t.appendChild(n),p(e,n)}function p(e,t){e.element=t,t.disabled=e.disabled,e.label!==t.label&&(t.label=e.label,t.textContent=e.label),e.value!==t.value&&(t.value=e.selectValue)}function d(){var e=E&&f.readValue();if(E)for(var t=E.items.length-1;t>=0;t--){var r=E.items[t];He(r.group?r.element.parentNode:r.element)}E=C.getOptions();var i={};if(w&&n.prepend(h),E.items.forEach(function(e){var t;y(e.group)?(t=i[e.group],t||(t=u.cloneNode(!1),S.appendChild(t),t.label=e.group,i[e.group]=t),c(e,t)):c(e,S)}),n[0].appendChild(S),g.$render(),!g.$isEmpty(e)){var o=f.readValue(),a=C.trackBy||m;(a?U(e,o):e===o)||(g.$setViewValue(o),g.$render())}}for(var h,f=s[0],g=s[1],m=o.multiple,v=0,$=n.children(),b=$.length;b>v;v++)if(""===$[v].value){h=$.eq(v);break}var w=!!h,x=_r(l.cloneNode(!1));x.val("?");var E,C=a(o.ngOptions,n,e),S=i[0].createDocumentFragment(),T=function(){w||n.prepend(h),n.val(""),h.prop("selected",!0),h.attr("selected",!0)},A=function(){w||h.remove()},N=function(){n.prepend(x),n.val("?"),x.prop("selected",!0),x.attr("selected",!0)},L=function(){x.remove()};m?(g.$isEmpty=function(e){return!e||0===e.length},f.writeValue=function(e){E.items.forEach(function(e){e.element.selected=!1}),e&&e.forEach(function(e){var t=E.getOptionFromViewValue(e);t&&(t.element.selected=!0)})},f.readValue=function(){var e=n.val()||[],t=[];return r(e,function(e){var n=E.selectValueMap[e];n&&!n.disabled&&t.push(E.getViewValueFromOption(n))}),t},C.trackBy&&e.$watchCollection(function(){return Wr(g.$viewValue)?g.$viewValue.map(function(e){return C.getTrackByValue(e)}):void 0},function(){g.$render()})):(f.writeValue=function(e){var t=E.getOptionFromViewValue(e);t?(n[0].value!==t.selectValue&&(L(),A(),n[0].value=t.selectValue,t.element.selected=!0),t.element.setAttribute("selected","selected")):null===e||w?(L(),T()):(A(),N())},f.readValue=function(){var e=E.selectValueMap[n.val()];return e&&!e.disabled?(A(),L(),E.getViewValueFromOption(e)):null},C.trackBy&&e.$watch(function(){return C.getTrackByValue(g.$viewValue)},function(){g.$render()})),w?(h.remove(),t(h)(e),h.removeClass("ng-scope")):h=_r(l.cloneNode(!1)),n.empty(),d(),e.$watchCollection(C.getWatchables,d)}var l=e.document.createElement("option"),u=e.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(e,t,n,r){r[0].registerOption=h},post:s}}}],Ra=["$locale","$interpolate","$log",function(e,t,n){var i=/{}/g,o=/^when(Minus)?(.+)$/;return{link:function(a,s,l){function u(e){s.text(e||"")}var c,p=l.count,d=l.$attr.when&&s.attr(l.$attr.when),f=l.offset||0,g=a.$eval(d)||{},m={},y=t.startSymbol(),$=t.endSymbol(),b=y+p+"-"+f+$,w=Vr.noop;r(l,function(e,t){var n=o.exec(t);if(n){var r=(n[1]?"-":"")+Or(n[2]);g[r]=s.attr(l.$attr[t])}}),r(g,function(e,n){m[n]=t(e.replace(i,b))}),a.$watch(p,function(t){var r=parseFloat(t),i=isNaN(r);if(i||r in g||(r=e.pluralCat(r-f)),r!==c&&!(i&&x(c)&&isNaN(c))){w();var o=m[r];v(o)?(null!=t&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+d),w=h,u()):w=a.$watch(o,u),c=r}})}}}],Ma=["$parse","$animate","$compile",function(e,i,o){var a="$$NG_REMOVED",s=t("ngRepeat"),l=function(e,t,n,r,i,o,a){e[n]=r,i&&(e[i]=o),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0===(1&t))},u=function(e){return e.clone[0]},c=function(e){return e.clone[e.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(t,p){var d=p.ngRepeat,h=o.$$createComment("end ngRepeat",d),f=d.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!f)throw s("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",d);var g=f[1],m=f[2],v=f[3],y=f[4];if(f=g.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/),!f)throw s("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",g);var $=f[3]||f[1],b=f[2];if(v&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(v)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(v)))throw s("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",v);var w,x,E,C,S={$id:Qe};return y?w=e(y):(E=function(e,t){return Qe(t)},C=function(e){return e}),function(e,t,o,p,f){w&&(x=function(t,n,r){return b&&(S[b]=t),S[$]=n,S.$index=r,w(e,S)});var g=ge();e.$watchCollection(m,function(o){var p,m,y,w,S,T,A,N,L,O,I,k,R=t[0],M=ge();if(v&&(e[v]=o),n(o))L=o,N=x||E;else{N=x||C,L=[];for(var _ in o)Lr.call(o,_)&&"$"!==_.charAt(0)&&L.push(_)}for(w=L.length,I=new Array(w),p=0;w>p;p++)if(S=o===L?p:L[p],T=o[S],A=N(S,T,p),g[A])O=g[A],delete g[A],M[A]=O,I[p]=O;else{if(M[A])throw r(I,function(e){e&&e.scope&&(g[e.id]=e)}),s("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",d,A,T);I[p]={id:A,scope:void 0,clone:void 0},M[A]=!0}for(var D in g){if(O=g[D],k=fe(O.clone),i.leave(k),k[0].parentNode)for(p=0,m=k.length;m>p;p++)k[p][a]=!0;O.scope.$destroy()}for(p=0;w>p;p++)if(S=o===L?p:L[p],T=o[S],O=I[p],O.scope){y=R;do y=y.nextSibling;while(y&&y[a]);u(O)!=y&&i.move(fe(O.clone),null,R),R=c(O),l(O.scope,p,$,T,b,S,w)}else f(function(e,t){O.scope=t;var n=h.cloneNode(!1);e[e.length++]=n,i.enter(e,null,R),R=n,O.clone=e,M[O.id]=O,l(O.scope,p,$,T,b,S,w)});g=M})}}}}],_a="ng-hide",Da="ng-hide-animate",ja=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,_a,{tempClasses:Da})})}}}],Pa=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,_a,{tempClasses:Da})})}}}],Fa=sr(function(e,t,n){e.$watch(n.ngStyle,function(e,n){n&&e!==n&&r(n,function(e,n){t.css(n,"")}),e&&t.css(e)},!0)}),qa=["$animate","$compile",function(e,t){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,i,o,a){var s=o.ngSwitch||o.on,l=[],u=[],c=[],p=[],d=function(e,t){return function(){e.splice(t,1)}};n.$watch(s,function(n){var i,o;for(i=0,o=c.length;o>i;++i)e.cancel(c[i]);for(c.length=0,i=0,o=p.length;o>i;++i){var s=fe(u[i].clone);p[i].$destroy();var h=c[i]=e.leave(s);h.then(d(c,i))}u.length=0,p.length=0,(l=a.cases["!"+n]||a.cases["?"])&&r(l,function(n){n.transclude(function(r,i){p.push(i);var o=n.element;r[r.length++]=t.$$createComment("end ngSwitchWhen");
var a={clone:r};u.push(a),e.enter(r,o.parent(),o)})})})}}}],Ua=sr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:t})}}),Ba=sr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:t})}}),Ha=t("ngTransclude"),Va=sr({restrict:"EAC",link:function(e,t,n,r,i){function o(e){e.length&&(t.empty(),t.append(e))}if(n.ngTransclude===n.$attr.ngTransclude&&(n.ngTransclude=""),!i)throw Ha("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",Q(t));var a=n.ngTransclude||n.ngTranscludeSlot;i(o,null,a)}}),Ga=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){if("text/ng-template"==n.type){var r=n.id,i=t[0].text;e.put(r,i)}}}}],Wa={$setViewValue:h,$render:h},za=["$element","$scope",function(t,n){var r=this,i=new Je;r.ngModelCtrl=Wa,r.unknownOption=_r(e.document.createElement("option")),r.renderUnknownOption=function(e){var n="? "+Qe(e)+" ?";r.unknownOption.val(n),t.prepend(r.unknownOption),t.val(n)},n.$on("$destroy",function(){r.renderUnknownOption=h}),r.removeUnknownOption=function(){r.unknownOption.parent()&&r.unknownOption.remove()},r.readValue=function(){return r.removeUnknownOption(),t.val()},r.writeValue=function(e){r.hasOption(e)?(r.removeUnknownOption(),t.val(e),""===e&&r.emptyOption.prop("selected",!0)):null==e&&r.emptyOption?(r.removeUnknownOption(),t.val("")):r.renderUnknownOption(e)},r.addOption=function(e,t){if(t[0].nodeType!==oi){de(e,'"option value"'),""===e&&(r.emptyOption=t);var n=i.get(e)||0;i.put(e,n+1),r.ngModelCtrl.$render(),Tr(t)}},r.removeOption=function(e){var t=i.get(e);t&&(1===t?(i.remove(e),""===e&&(r.emptyOption=void 0)):i.put(e,t-1))},r.hasOption=function(e){return!!i.get(e)},r.registerOption=function(e,t,n,i,o){if(i){var a;n.$observe("value",function(e){y(a)&&r.removeOption(a),a=e,r.addOption(e,t)})}else o?e.$watch(o,function(e,i){n.$set("value",e),i!==e&&r.removeOption(i),r.addOption(e,t)}):r.addOption(n.value,t);t.on("$destroy",function(){r.removeOption(n.value),r.ngModelCtrl.$render()})}}],Ka=function(){function e(e,t,n,i){var o=i[1];if(o){var a=i[0];if(a.ngModelCtrl=o,t.on("change",function(){e.$apply(function(){o.$setViewValue(a.readValue())})}),n.multiple){a.readValue=function(){var e=[];return r(t.find("option"),function(t){t.selected&&e.push(t.value)}),e},a.writeValue=function(e){var n=new Je(e);r(t.find("option"),function(e){e.selected=y(n.get(e.value))})};var s,l=NaN;e.$watch(function(){l!==o.$viewValue||U(s,o.$viewValue)||(s=q(o.$viewValue),o.$render()),l=o.$viewValue}),o.$isEmpty=function(e){return!e||0===e.length}}}}function t(e,t,n,r){var i=r[1];if(i){var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}return{restrict:"E",require:["select","?ngModel"],controller:za,priority:1,link:{pre:e,post:t}}},Ya=["$interpolate",function(e){return{restrict:"E",priority:100,compile:function(t,n){if(y(n.value))var r=e(n.value,!0);else{var i=e(t.text(),!0);i||n.$set("value",t.text())}return function(e,t,n){var o="$selectController",a=t.parent(),s=a.data(o)||a.parent().data(o);s&&s.registerOption(e,t,n,r,i)}}}}],Xa=g({restrict:"E",terminal:!1}),Qa=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){r&&(n.required=!0,r.$validators.required=function(e,t){return!n.required||!r.$isEmpty(t)},n.$observe("required",function(){r.$validate()}))}}},Ja=function(){return{restrict:"A",require:"?ngModel",link:function(e,n,r,i){if(i){var o,a=r.ngPattern||r.pattern;r.$observe("pattern",function(e){if(w(e)&&e.length>0&&(e=new RegExp("^"+e+"$")),e&&!e.test)throw t("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",a,e,Q(n));o=e||void 0,i.$validate()}),i.$validators.pattern=function(e,t){return i.$isEmpty(t)||v(o)||o.test(t)}}}}},Za=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=-1;n.$observe("maxlength",function(e){var t=p(e);i=isNaN(t)?-1:t,r.$validate()}),r.$validators.maxlength=function(e,t){return 0>i||r.$isEmpty(t)||t.length<=i}}}}},es=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=0;n.$observe("minlength",function(e){i=p(e)||0,r.$validate()}),r.$validators.minlength=function(e,t){return r.$isEmpty(t)||t.length>=i}}}}};return e.angular.bootstrap?void(e.console&&console.log("WARNING: Tried to load angular more than once.")):(ue(),$e(Vr),Vr.module("ngLocale",[],["$provide",function(e){function t(e){e+="";var t=e.indexOf(".");return-1==t?0:e.length-t-1}function n(e,n){var r=n;void 0===r&&(r=Math.min(t(e),3));var i=Math.pow(10,r),o=(e*i|0)%i;return{v:r,f:o}}var r={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};e.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],STANDALONEMONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(e,t){var i=0|e,o=n(e,t);return 1==i&&0==o.v?r.ONE:r.OTHER}})}]),void _r(e.document).ready(function(){ie(e.document,oe)}))}(window),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'),angular.module("chromeStorage",[]).factory("chromeStorage",function(e){var t=null;try{t=chrome.storage.local}catch(n){console.log("could not initiate chrome local storage: "+n)}var r=null,i={},o=function(n){var r=e.defer();return t.getBytesInUse(n,function(e){chrome.runtime.lasterror?(console.log("error retrieving bytes in use for keys "+n),r.reject(chrome.runtime.lasterror.message)):(console.log("retrieved bytes in use for keys "+n+": "+e),r.resolve(e))}),r.promise};return{getDebuggingTotalBytesInUse:function(){return r},getDebuggingCache:function(){return i},getDebuggingPercentUsed:function(){var e=r/t.QUOTA_BYTES;return e},getDebuggingSizeOf:function(e){return angular.toJson(i[e]).length},updateDebuggingCache:function(){var n=e.defer();t.get(null,function(e){chrome.runtime.lasterror?n.reject(chrome.runtime.lasterror.message):n.resolve(e)}),n.promise.then(function(e){i=e})},updateDebuggingTotalBytes:function(){o(null).then(function(e){console.log("total bytes in use: "+e),r=e})},clearCache:function(){t.clear(function(){chrome.runtime.lastError?console.error("error clearing local cache"+chrome.runtime.lastError):console.log("cache has been cleared")})},drop:function(e){t.remove(e,function(){chrome.runtime.lasterror&&console.error(chrome.runtime.lasterror.message)})},get:function(n){var r=e.defer();return t.get(n,function(e){var t=e[n];r.resolve(t)}),r.promise},getOrElse:function(n,r){var i=e.defer();return t.get(n,function(e){var o=e[n];void 0==o||null==o?r().then(function(e){o=e;var r={};r[n]=o,t.set(r,function(){chrome.runtime.lasterror&&console.error(chrome.runtime.lasterror.message)}),i.resolve(o)}):i.resolve(o)}),i.promise},set:function(e,n){var r={};r[e]=n,t.set(r,function(){chrome.runtime.lasterror&&console.error(chrome.runtime.lasterror.message)})},forceGet:function(n,r){var i=e.defer();return r().then(function(e){keyValue=e;var r={};r[n]=keyValue,t.set(r,function(){chrome.runtime.lasterror&&console.error(chrome.runtime.lasterror.message)}),i.resolve(keyValue)}),i.promise},getQuota:function(){return t.QUOTA_BYTES}}}),Array.prototype.push||(Array.prototype.push=function(){for(var e=0,t=arguments.length;t>e;e++)this[this.length]=arguments[e];return this.length}),Array.prototype.shift||(Array.prototype.shift=function(){if(this.length>0){for(var e=this[0],t=0,n=this.length-1;n>t;t++)this[t]=this[t+1];return this.length=this.length-1,e}}),Array.prototype.splice||(Array.prototype.splice=function(e,t){var n=this.slice(e+t),r=this.slice(e,e+t);this.length=e;for(var i=[],o=0,a=arguments.length;a>o;o++)i[o]=arguments[o];var s=i.length>2?n=i.slice(2).concat(n):n;for(o=0,a=s.length;a>o;o++)this.push(s[o]);return r});var log4javascript=function(){function isUndefined(e){return"undefined"==typeof e}function EventSupport(){}function Log4JavaScript(){}function toStr(e){return e&&e.toString?e.toString():String(e)}function getExceptionMessage(e){return e.message?e.message:e.description?e.description:toStr(e)}function getUrlFileName(e){var t=Math.max(e.lastIndexOf("/"),e.lastIndexOf("\\"));return e.substr(t+1)}function getExceptionStringRep(e){if(e){var t="Exception: "+getExceptionMessage(e);try{e.lineNumber&&(t+=" on line number "+e.lineNumber),e.fileName&&(t+=" in file "+getUrlFileName(e.fileName))}catch(n){logLog.warn("Unable to obtain file and line information for error")}return showStackTraces&&e.stack&&(t+=newLine+"Stack trace:"+newLine+e.stack),t}return null}function bool(e){return Boolean(e)}function trim(e){return e.replace(/^\s+/,"").replace(/\s+$/,"")}function splitIntoLines(e){var t=e.replace(/\r\n/g,"\n").replace(/\r/g,"\n");return t.split("\n")}function array_remove(e,t){for(var n=-1,r=0,i=e.length;i>r;r++)if(e[r]===t){n=r;break}return n>=0?(e.splice(n,1),!0):!1}function array_contains(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]==t)return!0;return!1}function extractBooleanFromParam(e,t){return isUndefined(e)?t:bool(e)}function extractStringFromParam(e,t){return isUndefined(e)?t:String(e)}function extractIntFromParam(e,t){if(isUndefined(e))return t;try{var n=parseInt(e,10);return isNaN(n)?t:n}catch(r){return logLog.warn("Invalid int param "+e,r),t}}function extractFunctionFromParam(e,t){return"function"==typeof e?e:t}function isError(e){return e instanceof Error}function getListenersPropertyName(e){return"__log4javascript_listeners__"+e}function addEvent(e,t,n,r,i){if(i=i?i:window,e.addEventListener)e.addEventListener(t,n,r);else if(e.attachEvent)e.attachEvent("on"+t,n);else{var o=getListenersPropertyName(t);e[o]||(e[o]=[],e["on"+t]=function(e){e=getEvent(e,i);for(var n,r=getListenersPropertyName(t),o=this[r].concat([]);n=o.shift();)n.call(this,e)}),e[o].push(n)}}function removeEvent(e,t,n,r){if(e.removeEventListener)e.removeEventListener(t,n,r);else if(e.detachEvent)e.detachEvent("on"+t,n);else{var i=getListenersPropertyName(t);e[i]&&array_remove(e[i],n)}}function getEvent(e,t){return t=t?t:window,e?e:t.event}function stopEventPropagation(e){e.stopPropagation?e.stopPropagation():"undefined"!=typeof e.cancelBubble&&(e.cancelBubble=!0),e.returnValue=!1}function handleError(e,t){logLog.error(e,t),log4javascript.dispatchEvent("error",{message:e,exception:t})}function Timer(e,t){this.name=e,this.level=isUndefined(t)?Level.INFO:t,this.start=new Date}function Logger(e){this.name=e,this.parent=null,this.children=[];var t=[],n=null,r=this.name===rootLoggerName,i=this.name===nullLoggerName,o=null,a=!1;this.addChild=function(e){this.children.push(e),e.parent=this,e.invalidateAppenderCache()};var s=!0;this.getAdditivity=function(){return s},this.setAdditivity=function(e){var t=s!=e;s=e,t&&this.invalidateAppenderCache()},this.addAppender=function(e){i?handleError("Logger.addAppender: you may not add an appender to the null logger"):e instanceof log4javascript.Appender?array_contains(t,e)||(t.push(e),e.setAddedToLogger(this),this.invalidateAppenderCache()):handleError("Logger.addAppender: appender supplied ('"+toStr(e)+"') is not a subclass of Appender")},this.removeAppender=function(e){array_remove(t,e),e.setRemovedFromLogger(this),this.invalidateAppenderCache()},this.removeAllAppenders=function(){var e=t.length;if(e>0){for(var n=0;e>n;n++)t[n].setRemovedFromLogger(this);t.length=0,this.invalidateAppenderCache()}},this.getEffectiveAppenders=function(){if(null===o||a){var e=r||!this.getAdditivity()?[]:this.parent.getEffectiveAppenders();o=e.concat(t),a=!1}return o},this.invalidateAppenderCache=function(){a=!0;for(var e=0,t=this.children.length;t>e;e++)this.children[e].invalidateAppenderCache()},this.log=function(e,t){if(enabled&&e.isGreaterOrEqual(this.getEffectiveLevel())){var n,r=t.length-1,i=t[r];t.length>1&&isError(i)&&(n=i,r--);for(var o=[],a=0;r>=a;a++)o[a]=t[a];var s=new LoggingEvent(this,new Date,e,o,n);this.callAppenders(s)}},this.callAppenders=function(e){for(var t=this.getEffectiveAppenders(),n=0,r=t.length;r>n;n++)t[n].doAppend(e)},this.setLevel=function(e){r&&null===e?handleError("Logger.setLevel: you cannot set the level of the root logger to null"):e instanceof Level?n=e:handleError("Logger.setLevel: level supplied to logger "+this.name+" is not an instance of log4javascript.Level")},this.getLevel=function(){return n},this.getEffectiveLevel=function(){for(var e=this;null!==e;e=e.parent){var t=e.getLevel();if(null!==t)return t}},this.group=function(e,t){if(enabled)for(var n=this.getEffectiveAppenders(),r=0,i=n.length;i>r;r++)n[r].group(e,t)},this.groupEnd=function(){if(enabled)for(var e=this.getEffectiveAppenders(),t=0,n=e.length;n>t;t++)e[t].groupEnd()};var l={};this.time=function(e,t){enabled&&(isUndefined(e)?handleError("Logger.time: a name for the timer must be supplied"):!t||t instanceof Level?l[e]=new Timer(e,t):handleError("Logger.time: level supplied to timer "+e+" is not an instance of log4javascript.Level"))},this.timeEnd=function(e){if(enabled)if(isUndefined(e))handleError("Logger.timeEnd: a name for the timer must be supplied");else if(l[e]){var t=l[e],n=t.getElapsedTime();this.log(t.level,["Timer "+toStr(e)+" completed in "+n+"ms"]),delete l[e]}else logLog.warn("Logger.timeEnd: no timer found with name "+e)},this.assert=function(e){if(enabled&&!e){for(var t=[],n=1,r=arguments.length;r>n;n++)t.push(arguments[n]);t=t.length>0?t:["Assertion Failure"],t.push(newLine),t.push(e),this.log(Level.ERROR,t)}},this.toString=function(){return"Logger["+this.name+"]"}}function SimpleLayout(){this.customFields=[]}function NullLayout(){this.customFields=[]}function XmlLayout(e){this.combineMessages=extractBooleanFromParam(e,!0),this.customFields=[]}function escapeNewLines(e){return e.replace(/\r\n|\r|\n/g,"\\r\\n")}function JsonLayout(e,t){this.readable=extractBooleanFromParam(e,!1),this.combineMessages=extractBooleanFromParam(t,!0),this.batchHeader=this.readable?"["+newLine:"[",this.batchFooter=this.readable?"]"+newLine:"]",this.batchSeparator=this.readable?","+newLine:",",this.setKeys(),this.colon=this.readable?": ":":",this.tab=this.readable?"	":"",this.lineBreak=this.readable?newLine:"",this.customFields=[]}function HttpPostDataLayout(){this.setKeys(),this.customFields=[],this.returnsPostData=!0}function formatObjectExpansion(e,t,n){function r(e,t,n){function o(e){for(var t=splitIntoLines(e),r=1,i=t.length;i>r;r++)t[r]=n+t[r];return t.join(newLine)}var a,s,l,u,c,p,d;if(n||(n=""),null===e)return"null";if("undefined"==typeof e)return"undefined";if("string"==typeof e)return o(e);if("object"==typeof e&&array_contains(i,e)){try{p=toStr(e)}catch(h){p="Error formatting property. Details: "+getExceptionStringRep(h)}return p+" [already expanded]"}if(e instanceof Array&&t>0){for(i.push(e),p="["+newLine,l=t-1,u=n+"  ",c=[],a=0,s=e.length;s>a;a++)try{d=r(e[a],l,u),c.push(u+d)}catch(h){c.push(u+"Error formatting array member. Details: "+getExceptionStringRep(h))}return p+=c.join(","+newLine)+newLine+n+"]"}if("[object Date]"==Object.prototype.toString.call(e))return e.toString();if("object"==typeof e&&t>0){i.push(e),p="{"+newLine,l=t-1,u=n+"  ",c=[];for(a in e)try{d=r(e[a],l,u),c.push(u+a+": "+d)}catch(h){c.push(u+a+": Error formatting property. Details: "+getExceptionStringRep(h))}return p+=c.join(","+newLine)+newLine+n+"}"}return o(toStr(e))}var i=[];return r(e,t,n)}function PatternLayout(e){e?this.pattern=e:this.pattern=PatternLayout.DEFAULT_CONVERSION_PATTERN,this.customFields=[]}function AlertAppender(){}function BrowserConsoleAppender(){}function isHttpRequestSuccessful(e){return isUndefined(e.status)||0===e.status||e.status>=200&&e.status<300||1223==e.status}function AjaxAppender(e,t){function n(e){return T?(handleError("AjaxAppender: configuration option '"+e+"' may not be set after the appender has been initialized"),!1):!0}function r(){if(p&&enabled){S=!0;var e;if(h)E.length>0?(e=E.shift(),l(o(e),r)):(S=!1,d&&a());else{for(;e=E.shift();)l(o(e));S=!1,d&&a()}}}function i(){var e=!1;if(p&&enabled){for(var t,n=c.getLayout().allowBatching()?f:1,i=[];t=x.shift();)i.push(t),x.length>=n&&(E.push(i),i=[]);i.length>0&&E.push(i),e=E.length>0,h=!1,d=!1,r()}return e}function o(e){for(var t,n=[],r="";t=e.shift();)n.push(c.getLayout().formatWithException(t));return r=1==e.length?n.join(""):c.getLayout().batchHeader+n.join(c.getLayout().batchSeparator)+c.getLayout().batchFooter,b==c.defaults.contentType&&(r=c.getLayout().returnsPostData?r:urlEncode(y)+"="+urlEncode(r),r.length>0&&(r+="&"),r+="layout="+urlEncode(c.getLayout().toString())),r}function a(){window.setTimeout(r,g)}function s(){var e="AjaxAppender: could not create XMLHttpRequest object. AjaxAppender disabled";handleError(e),p=!1,v&&v(e)}function l(n,r){try{var i=getXmlHttp(s);if(p){t&&withCredentialsSupported&&(i.withCredentials=!0),i.onreadystatechange=function(){if(4==i.readyState){if(isHttpRequestSuccessful(i))m&&m(i),r&&r(i);else{var t="AjaxAppender.append: XMLHttpRequest request to URL "+e+" returned status code "+i.status;handleError(t),v&&v(t)}i.onreadystatechange=emptyFunction,i=null}},i.open("POST",e,!0);try{for(var o,a=0;o=C[a++];)i.setRequestHeader(o.name,o.value);i.setRequestHeader("Content-Type",b)}catch(l){var u="AjaxAppender.append: your browser's XMLHttpRequest implementation does not support setRequestHeader, therefore cannot post data. AjaxAppender disabled";return handleError(u),p=!1,void(v&&v(u))}i.send(n)}}catch(c){var d="AjaxAppender.append: error sending log message to "+e;handleError(d,c),p=!1,v&&v(d+". Details: "+getExceptionStringRep(c))}}function u(){if(T=!0,$){var e=window.onbeforeunload;window.onbeforeunload=function(){return e&&e(),i()?"Sending log messages":void 0}}d&&a()}var c=this,p=!0;e||(handleError("AjaxAppender: URL must be specified in constructor"),p=!1);var d=this.defaults.timed,h=this.defaults.waitForResponse,f=this.defaults.batchSize,g=this.defaults.timerInterval,m=this.defaults.requestSuccessCallback,v=this.defaults.failCallback,y=this.defaults.postVarName,$=this.defaults.sendAllOnUnload,b=this.defaults.contentType,w=null,x=[],E=[],C=[],S=!1,T=!1;this.getSessionId=function(){return w},this.setSessionId=function(e){w=extractStringFromParam(e,null),this.layout.setCustomField("sessionid",w)},this.setLayout=function(e){n("layout")&&(this.layout=e,null!==w&&this.setSessionId(w))},this.isTimed=function(){return d},this.setTimed=function(e){n("timed")&&(d=bool(e))},this.getTimerInterval=function(){return g},this.setTimerInterval=function(e){n("timerInterval")&&(g=extractIntFromParam(e,g))},this.isWaitForResponse=function(){return h},this.setWaitForResponse=function(e){n("waitForResponse")&&(h=bool(e))},this.getBatchSize=function(){return f},this.setBatchSize=function(e){n("batchSize")&&(f=extractIntFromParam(e,f))},this.isSendAllOnUnload=function(){return $},this.setSendAllOnUnload=function(e){n("sendAllOnUnload")&&($=extractBooleanFromParam(e,$))},this.setRequestSuccessCallback=function(e){m=extractFunctionFromParam(e,m)},this.setFailCallback=function(e){v=extractFunctionFromParam(e,v)},this.getPostVarName=function(){return y},this.setPostVarName=function(e){n("postVarName")&&(y=extractStringFromParam(e,y))},this.getHeaders=function(){return C},this.addHeader=function(e,t){"content-type"==e.toLowerCase()?b=t:C.push({name:e,value:t})},this.sendAll=r,this.sendAllRemaining=i,this.append=function(e){if(p){T||u(),x.push(e);var t=this.getLayout().allowBatching()?f:1;if(x.length>=t){for(var n,i=[];n=x.shift();)i.push(n);E.push(i),d||h&&(!h||S)||r()}}}}function setCookie(e,t,n,r){var i;if(r=r?"; path="+r:"",n){var o=new Date;o.setTime(o.getTime()+24*n*60*60*1e3),i="; expires="+o.toGMTString()}else i="";document.cookie=escape(e)+"="+escape(t)+i+r}function getCookie(e){for(var t=escape(e)+"=",n=document.cookie.split(";"),r=0,i=n.length;i>r;r++){for(var o=n[r];" "===o.charAt(0);)o=o.substring(1,o.length);if(0===o.indexOf(t))return unescape(o.substring(t.length,o.length))}return null}function getBaseUrl(){for(var e=document.getElementsByTagName("script"),t=0,n=e.length;n>t;++t)if(-1!=e[t].src.indexOf("log4javascript")){var r=e[t].src.lastIndexOf("/");return-1==r?"":e[t].src.substr(0,r+1)}return null}function isLoaded(e){try{return bool(e.loaded)}catch(t){return!1}}function padWithSpaces(e,t){if(e.length<t){for(var n=[],r=Math.max(0,t-e.length),i=0;r>i;i++)n[i]=" ";e+=n.join("")}return e}EventSupport.prototype={eventTypes:[],eventListeners:{},setEventTypes:function(e){if(e instanceof Array){this.eventTypes=e,this.eventListeners={};for(var t=0,n=this.eventTypes.length;n>t;t++)this.eventListeners[this.eventTypes[t]]=[]}else handleError("log4javascript.EventSupport ["+this+"]: setEventTypes: eventTypes parameter must be an Array")},addEventListener:function(e,t){"function"==typeof t?(array_contains(this.eventTypes,e)||handleError("log4javascript.EventSupport ["+this+"]: addEventListener: no event called '"+e+"'"),this.eventListeners[e].push(t)):handleError("log4javascript.EventSupport ["+this+"]: addEventListener: listener must be a function")},removeEventListener:function(e,t){"function"==typeof t?(array_contains(this.eventTypes,e)||handleError("log4javascript.EventSupport ["+this+"]: removeEventListener: no event called '"+e+"'"),array_remove(this.eventListeners[e],t)):handleError("log4javascript.EventSupport ["+this+"]: removeEventListener: listener must be a function")},dispatchEvent:function(e,t){if(array_contains(this.eventTypes,e))for(var n=this.eventListeners[e],r=0,i=n.length;i>r;r++)n[r](this,e,t);else handleError("log4javascript.EventSupport ["+this+"]: dispatchEvent: no event called '"+e+"'")}};var applicationStartDate=new Date,uniqueId="log4javascript_"+applicationStartDate.getTime()+"_"+Math.floor(1e8*Math.random()),emptyFunction=function(){},newLine="\r\n",pageLoaded=!1;Log4JavaScript.prototype=new EventSupport,log4javascript=new Log4JavaScript,log4javascript.version="1.4.9",log4javascript.edition="log4javascript";var urlEncode="undefined"!=typeof window.encodeURIComponent?function(e){return encodeURIComponent(e)}:function(e){return escape(e).replace(/\+/g,"%2B").replace(/"/g,"%22").replace(/'/g,"%27").replace(/\//g,"%2F").replace(/=/g,"%3D")},urlDecode="undefined"!=typeof window.decodeURIComponent?function(e){return decodeURIComponent(e)}:function(e){return unescape(e).replace(/%2B/g,"+").replace(/%22/g,'"').replace(/%27/g,"'").replace(/%2F/g,"/").replace(/%3D/g,"=")};Function.prototype.apply||(Function.prototype.apply=function(obj,args){var methodName="__apply__";"undefined"!=typeof obj[methodName]&&(methodName+=String(Math.random()).substr(2)),obj[methodName]=this;for(var argsStrings=[],i=0,len=args.length;len>i;i++)argsStrings[i]="args["+i+"]";var script="obj."+methodName+"("+argsStrings.join(",")+")",returnValue=eval(script);return delete obj[methodName],returnValue}),Function.prototype.call||(Function.prototype.call=function(e){for(var t=[],n=1,r=arguments.length;r>n;n++)t[n-1]=arguments[n];return this.apply(e,t)});var logLog={quietMode:!1,debugMessages:[],setQuietMode:function(e){this.quietMode=bool(e)},numberOfErrors:0,alertAllErrors:!1,setAlertAllErrors:function(e){this.alertAllErrors=e},debug:function(e){this.debugMessages.push(e)},displayDebug:function(){alert(this.debugMessages.join(newLine))},warn:function(e,t){},error:function(e,t){if((1==++this.numberOfErrors||this.alertAllErrors)&&!this.quietMode){var n="log4javascript error: "+e;t&&(n+=newLine+newLine+"Original error: "+getExceptionStringRep(t)),alert(n)}}};log4javascript.logLog=logLog,log4javascript.setEventTypes(["load","error"]),log4javascript.handleError=handleError;var enabled=!("undefined"!=typeof log4javascript_disabled&&log4javascript_disabled);log4javascript.setEnabled=function(e){enabled=bool(e)},log4javascript.isEnabled=function(){return enabled};var useTimeStampsInMilliseconds=!0;log4javascript.setTimeStampsInMilliseconds=function(e){useTimeStampsInMilliseconds=bool(e)},log4javascript.isTimeStampsInMilliseconds=function(){return useTimeStampsInMilliseconds},log4javascript.evalInScope=function(expr){return eval(expr)};var showStackTraces=!1;log4javascript.setShowStackTraces=function(e){showStackTraces=bool(e)};var Level=function(e,t){this.level=e,this.name=t};Level.prototype={toString:function(){return this.name},equals:function(e){return this.level==e.level},isGreaterOrEqual:function(e){return this.level>=e.level}},Level.ALL=new Level(Number.MIN_VALUE,"ALL"),Level.TRACE=new Level(1e4,"TRACE"),Level.DEBUG=new Level(2e4,"DEBUG"),Level.INFO=new Level(3e4,"INFO"),Level.WARN=new Level(4e4,"WARN"),Level.ERROR=new Level(5e4,"ERROR"),Level.FATAL=new Level(6e4,"FATAL"),Level.OFF=new Level(Number.MAX_VALUE,"OFF"),log4javascript.Level=Level,Timer.prototype.getElapsedTime=function(){return(new Date).getTime()-this.start.getTime()};var anonymousLoggerName="[anonymous]",defaultLoggerName="[default]",nullLoggerName="[null]",rootLoggerName="root";Logger.prototype={trace:function(){this.log(Level.TRACE,arguments)},debug:function(){this.log(Level.DEBUG,arguments)},info:function(){this.log(Level.INFO,arguments)},warn:function(){this.log(Level.WARN,arguments)},error:function(){this.log(Level.ERROR,arguments)},fatal:function(){this.log(Level.FATAL,arguments)},isEnabledFor:function(e){return e.isGreaterOrEqual(this.getEffectiveLevel())},isTraceEnabled:function(){return this.isEnabledFor(Level.TRACE)},isDebugEnabled:function(){return this.isEnabledFor(Level.DEBUG)},isInfoEnabled:function(){return this.isEnabledFor(Level.INFO)},isWarnEnabled:function(){return this.isEnabledFor(Level.WARN)},isErrorEnabled:function(){return this.isEnabledFor(Level.ERROR)},isFatalEnabled:function(){return this.isEnabledFor(Level.FATAL)}},Logger.prototype.trace.isEntryPoint=!0,Logger.prototype.debug.isEntryPoint=!0,Logger.prototype.info.isEntryPoint=!0,Logger.prototype.warn.isEntryPoint=!0,Logger.prototype.error.isEntryPoint=!0,Logger.prototype.fatal.isEntryPoint=!0;var loggers={},loggerNames=[],ROOT_LOGGER_DEFAULT_LEVEL=Level.DEBUG,rootLogger=new Logger(rootLoggerName);rootLogger.setLevel(ROOT_LOGGER_DEFAULT_LEVEL),log4javascript.getRootLogger=function(){return rootLogger},log4javascript.getLogger=function(e){if("string"!=typeof e&&(e=anonymousLoggerName,logLog.warn("log4javascript.getLogger: non-string logger name "+toStr(e)+" supplied, returning anonymous logger")),e==rootLoggerName&&handleError("log4javascript.getLogger: root logger may not be obtained by name"),!loggers[e]){var t=new Logger(e);loggers[e]=t,loggerNames.push(e);var n,r=e.lastIndexOf(".");if(r>-1){var i=e.substring(0,r);n=log4javascript.getLogger(i)}else n=rootLogger;n.addChild(t)}return loggers[e]};var defaultLogger=null;log4javascript.getDefaultLogger=function(){if(!defaultLogger){defaultLogger=log4javascript.getLogger(defaultLoggerName);var e=new log4javascript.PopUpAppender;defaultLogger.addAppender(e)}return defaultLogger};var nullLogger=null;log4javascript.getNullLogger=function(){return nullLogger||(nullLogger=new Logger(nullLoggerName),nullLogger.setLevel(Level.OFF)),nullLogger},log4javascript.resetConfiguration=function(){rootLogger.setLevel(ROOT_LOGGER_DEFAULT_LEVEL),loggers={}};var LoggingEvent=function(e,t,n,r,i){this.logger=e,this.timeStamp=t,this.timeStampInMilliseconds=t.getTime(),this.timeStampInSeconds=Math.floor(this.timeStampInMilliseconds/1e3),this.milliseconds=this.timeStamp.getMilliseconds(),this.level=n,this.messages=r,this.exception=i};LoggingEvent.prototype={getThrowableStrRep:function(){return this.exception?getExceptionStringRep(this.exception):""},getCombinedMessages:function(){return 1==this.messages.length?this.messages[0]:this.messages.join(newLine)},toString:function(){return"LoggingEvent["+this.level+"]"}},log4javascript.LoggingEvent=LoggingEvent;var Layout=function(){};Layout.prototype={defaults:{loggerKey:"logger",timeStampKey:"timestamp",millisecondsKey:"milliseconds",levelKey:"level",messageKey:"message",exceptionKey:"exception",urlKey:"url"},loggerKey:"logger",timeStampKey:"timestamp",millisecondsKey:"milliseconds",levelKey:"level",messageKey:"message",exceptionKey:"exception",urlKey:"url",batchHeader:"",batchFooter:"",batchSeparator:"",returnsPostData:!1,overrideTimeStampsSetting:!1,useTimeStampsInMilliseconds:null,format:function(){handleError("Layout.format: layout supplied has no format() method")},ignoresThrowable:function(){handleError("Layout.ignoresThrowable: layout supplied has no ignoresThrowable() method")},getContentType:function(){return"text/plain"},allowBatching:function(){return!0},setTimeStampsInMilliseconds:function(e){this.overrideTimeStampsSetting=!0,this.useTimeStampsInMilliseconds=bool(e)},isTimeStampsInMilliseconds:function(){return this.overrideTimeStampsSetting?this.useTimeStampsInMilliseconds:useTimeStampsInMilliseconds},getTimeStampValue:function(e){return this.isTimeStampsInMilliseconds()?e.timeStampInMilliseconds:e.timeStampInSeconds},getDataValues:function(e,t){var n=[[this.loggerKey,e.logger.name],[this.timeStampKey,this.getTimeStampValue(e)],[this.levelKey,e.level.name],[this.urlKey,window.location.href],[this.messageKey,t?e.getCombinedMessages():e.messages]];if(this.isTimeStampsInMilliseconds()||n.push([this.millisecondsKey,e.milliseconds]),e.exception&&n.push([this.exceptionKey,getExceptionStringRep(e.exception)]),this.hasCustomFields())for(var r=0,i=this.customFields.length;i>r;r++){var o=this.customFields[r].value;"function"==typeof o&&(o=o(this,e)),n.push([this.customFields[r].name,o])}return n},setKeys:function(e,t,n,r,i,o,a){this.loggerKey=extractStringFromParam(e,this.defaults.loggerKey),this.timeStampKey=extractStringFromParam(t,this.defaults.timeStampKey),this.levelKey=extractStringFromParam(n,this.defaults.levelKey),this.messageKey=extractStringFromParam(r,this.defaults.messageKey),this.exceptionKey=extractStringFromParam(i,this.defaults.exceptionKey),this.urlKey=extractStringFromParam(o,this.defaults.urlKey),this.millisecondsKey=extractStringFromParam(a,this.defaults.millisecondsKey)},setCustomField:function(e,t){for(var n=!1,r=0,i=this.customFields.length;i>r;r++)this.customFields[r].name===e&&(this.customFields[r].value=t,n=!0);n||this.customFields.push({name:e,value:t})},hasCustomFields:function(){return this.customFields.length>0},formatWithException:function(e){var t=this.format(e);return e.exception&&this.ignoresThrowable()&&(t+=e.getThrowableStrRep()),t},toString:function(){handleError("Layout.toString: all layouts must override this method")}},log4javascript.Layout=Layout;var Appender=function(){};Appender.prototype=new EventSupport,Appender.prototype.layout=new PatternLayout,Appender.prototype.threshold=Level.ALL,Appender.prototype.loggers=[],Appender.prototype.doAppend=function(e){enabled&&e.level.level>=this.threshold.level&&this.append(e);
},Appender.prototype.append=function(e){},Appender.prototype.setLayout=function(e){e instanceof Layout?this.layout=e:handleError("Appender.setLayout: layout supplied to "+this.toString()+" is not a subclass of Layout")},Appender.prototype.getLayout=function(){return this.layout},Appender.prototype.setThreshold=function(e){e instanceof Level?this.threshold=e:handleError("Appender.setThreshold: threshold supplied to "+this.toString()+" is not a subclass of Level")},Appender.prototype.getThreshold=function(){return this.threshold},Appender.prototype.setAddedToLogger=function(e){this.loggers.push(e)},Appender.prototype.setRemovedFromLogger=function(e){array_remove(this.loggers,e)},Appender.prototype.group=emptyFunction,Appender.prototype.groupEnd=emptyFunction,Appender.prototype.toString=function(){handleError("Appender.toString: all appenders must override this method")},log4javascript.Appender=Appender,SimpleLayout.prototype=new Layout,SimpleLayout.prototype.format=function(e){return e.level.name+" - "+e.getCombinedMessages()},SimpleLayout.prototype.ignoresThrowable=function(){return!0},SimpleLayout.prototype.toString=function(){return"SimpleLayout"},log4javascript.SimpleLayout=SimpleLayout,NullLayout.prototype=new Layout,NullLayout.prototype.format=function(e){return e.messages},NullLayout.prototype.ignoresThrowable=function(){return!0},NullLayout.prototype.formatWithException=function(e){var t=e.messages,n=e.exception;return n?t.concat([n]):t},NullLayout.prototype.toString=function(){return"NullLayout"},log4javascript.NullLayout=NullLayout,XmlLayout.prototype=new Layout,XmlLayout.prototype.isCombinedMessages=function(){return this.combineMessages},XmlLayout.prototype.getContentType=function(){return"text/xml"},XmlLayout.prototype.escapeCdata=function(e){return e.replace(/\]\]>/,"]]>]]&gt;<![CDATA[")},XmlLayout.prototype.format=function(e){function t(e){return e="string"==typeof e?e:toStr(e),"<log4javascript:message><![CDATA["+i.escapeCdata(e)+"]]></log4javascript:message>"}var n,r,i=this,o='<log4javascript:event logger="'+e.logger.name+'" timestamp="'+this.getTimeStampValue(e)+'"';if(this.isTimeStampsInMilliseconds()||(o+=' milliseconds="'+e.milliseconds+'"'),o+=' level="'+e.level.name+'">'+newLine,this.combineMessages)o+=t(e.getCombinedMessages());else{for(o+="<log4javascript:messages>"+newLine,n=0,r=e.messages.length;r>n;n++)o+=t(e.messages[n])+newLine;o+="</log4javascript:messages>"+newLine}if(this.hasCustomFields())for(n=0,r=this.customFields.length;r>n;n++)o+='<log4javascript:customfield name="'+this.customFields[n].name+'"><![CDATA['+this.customFields[n].value.toString()+"]]></log4javascript:customfield>"+newLine;return e.exception&&(o+="<log4javascript:exception><![CDATA["+getExceptionStringRep(e.exception)+"]]></log4javascript:exception>"+newLine),o+="</log4javascript:event>"+newLine+newLine},XmlLayout.prototype.ignoresThrowable=function(){return!1},XmlLayout.prototype.toString=function(){return"XmlLayout"},log4javascript.XmlLayout=XmlLayout,JsonLayout.prototype=new Layout,JsonLayout.prototype.isReadable=function(){return this.readable},JsonLayout.prototype.isCombinedMessages=function(){return this.combineMessages},JsonLayout.prototype.format=function(e){function t(e,n,r){var o,a=typeof e;if(e instanceof Date)o=String(e.getTime());else if(r&&e instanceof Array){o="["+i.lineBreak;for(var s=0,l=e.length;l>s;s++){var u=n+i.tab;o+=u+t(e[s],u,!1),s<e.length-1&&(o+=","),o+=i.lineBreak}o+=n+"]"}else o="number"!==a&&"boolean"!==a?'"'+escapeNewLines(toStr(e).replace(/\"/g,'\\"'))+'"':e;return o}var n,r,i=this,o=this.getDataValues(e,this.combineMessages),a="{"+this.lineBreak;for(n=0,r=o.length-1;r>=n;n++)a+=this.tab+'"'+o[n][0]+'"'+this.colon+t(o[n][1],this.tab,!0),r>n&&(a+=","),a+=this.lineBreak;return a+="}"+this.lineBreak},JsonLayout.prototype.ignoresThrowable=function(){return!1},JsonLayout.prototype.toString=function(){return"JsonLayout"},JsonLayout.prototype.getContentType=function(){return"application/json"},log4javascript.JsonLayout=JsonLayout,HttpPostDataLayout.prototype=new Layout,HttpPostDataLayout.prototype.allowBatching=function(){return!1},HttpPostDataLayout.prototype.format=function(e){for(var t=this.getDataValues(e),n=[],r=0,i=t.length;i>r;r++){var o=t[r][1]instanceof Date?String(t[r][1].getTime()):t[r][1];n.push(urlEncode(t[r][0])+"="+urlEncode(o))}return n.join("&")},HttpPostDataLayout.prototype.ignoresThrowable=function(e){return!1},HttpPostDataLayout.prototype.toString=function(){return"HttpPostDataLayout"},log4javascript.HttpPostDataLayout=HttpPostDataLayout;var SimpleDateFormat;!function(){var e=/('[^']*')|(G+|y+|M+|w+|W+|D+|d+|F+|E+|a+|H+|k+|K+|h+|m+|s+|S+|Z+)|([a-zA-Z]+)|([^a-zA-Z']+)/,t=["January","February","March","April","May","June","July","August","September","October","November","December"],n=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],r=0,i=1,o=2,a=3,s=4,l=5,u={G:r,y:a,M:s,w:o,W:o,D:o,d:o,F:o,E:i,a:r,H:o,k:o,K:o,h:o,m:o,s:o,S:o,Z:l},c=864e5,p=7*c,d=1,h=function(e,t,n){var r=new Date(e,t,n,0,0,0);return r.setMilliseconds(0),r};Date.prototype.getDifference=function(e){return this.getTime()-e.getTime()},Date.prototype.isBefore=function(e){return this.getTime()<e.getTime()},Date.prototype.getUTCTime=function(){return Date.UTC(this.getFullYear(),this.getMonth(),this.getDate(),this.getHours(),this.getMinutes(),this.getSeconds(),this.getMilliseconds())},Date.prototype.getTimeSince=function(e){return this.getUTCTime()-e.getUTCTime()},Date.prototype.getPreviousSunday=function(){var e=new Date(this.getFullYear(),this.getMonth(),this.getDate(),12,0,0),t=new Date(e.getTime()-this.getDay()*c);return h(t.getFullYear(),t.getMonth(),t.getDate())},Date.prototype.getWeekInYear=function(e){isUndefined(this.minimalDaysInFirstWeek)&&(e=d);var t=this.getPreviousSunday(),n=h(this.getFullYear(),0,1),r=t.isBefore(n)?0:1+Math.floor(t.getTimeSince(n)/p),i=7-n.getDay(),o=r;return e>i&&o--,o},Date.prototype.getWeekInMonth=function(e){isUndefined(this.minimalDaysInFirstWeek)&&(e=d);var t=this.getPreviousSunday(),n=h(this.getFullYear(),this.getMonth(),1),r=t.isBefore(n)?0:1+Math.floor(t.getTimeSince(n)/p),i=7-n.getDay(),o=r;return i>=e&&o++,o},Date.prototype.getDayInYear=function(){var e=h(this.getFullYear(),0,1);return 1+Math.floor(this.getTimeSince(e)/c)},SimpleDateFormat=function(e){this.formatString=e},SimpleDateFormat.prototype.setMinimalDaysInFirstWeek=function(e){this.minimalDaysInFirstWeek=e},SimpleDateFormat.prototype.getMinimalDaysInFirstWeek=function(){return isUndefined(this.minimalDaysInFirstWeek)?d:this.minimalDaysInFirstWeek};var f=function(e,t){for(;e.length<t;)e="0"+e;return e},g=function(e,t,n){return t>=4?e:e.substr(0,Math.max(n,t))},m=function(e,t){var n=""+e;return f(n,t)};SimpleDateFormat.prototype.format=function(c){for(var p,d="",h=this.formatString;p=e.exec(h);){var v=p[1],y=p[2],$=p[3],b=p[4];if(v)d+="''"==v?"'":v.substring(1,v.length-1);else if($);else if(b)d+=b;else if(y){var w=y.charAt(0),x=y.length,E="";switch(w){case"G":E="AD";break;case"y":E=c.getFullYear();break;case"M":E=c.getMonth();break;case"w":E=c.getWeekInYear(this.getMinimalDaysInFirstWeek());break;case"W":E=c.getWeekInMonth(this.getMinimalDaysInFirstWeek());break;case"D":E=c.getDayInYear();break;case"d":E=c.getDate();break;case"F":E=1+Math.floor((c.getDate()-1)/7);break;case"E":E=n[c.getDay()];break;case"a":E=c.getHours()>=12?"PM":"AM";break;case"H":E=c.getHours();break;case"k":E=c.getHours()||24;break;case"K":E=c.getHours()%12;break;case"h":E=c.getHours()%12||12;break;case"m":E=c.getMinutes();break;case"s":E=c.getSeconds();break;case"S":E=c.getMilliseconds();break;case"Z":E=c.getTimezoneOffset()}switch(u[w]){case r:d+=g(E,x,2);break;case i:d+=g(E,x,3);break;case o:d+=m(E,x);break;case a:if(3>=x){var C=""+E;d+=C.substr(2,2)}else d+=m(E,x);break;case s:d+=x>=3?g(t[E],x,x):m(E+1,x);break;case l:var S=E>0,T=S?"-":"+",A=Math.abs(E),N=""+Math.floor(A/60);N=f(N,2);var L=""+A%60;L=f(L,2),d+=T+N+L}}h=h.substr(p.index+p[0].length)}return d}}(),log4javascript.SimpleDateFormat=SimpleDateFormat,PatternLayout.TTCC_CONVERSION_PATTERN="%r %p %c - %m%n",PatternLayout.DEFAULT_CONVERSION_PATTERN="%m%n",PatternLayout.ISO8601_DATEFORMAT="yyyy-MM-dd HH:mm:ss,SSS",PatternLayout.DATETIME_DATEFORMAT="dd MMM yyyy HH:mm:ss,SSS",PatternLayout.ABSOLUTETIME_DATEFORMAT="HH:mm:ss,SSS",PatternLayout.prototype=new Layout,PatternLayout.prototype.format=function(e){for(var t,n=/%(-?[0-9]+)?(\.?[0-9]+)?([acdfmMnpr%])(\{([^\}]+)\})?|([^%]+)/,r="",i=this.pattern;t=n.exec(i);){var o=t[0],a=t[1],s=t[2],l=t[3],u=t[5],c=t[6];if(c)r+=""+c;else{var p="";switch(l){case"a":case"m":var d=0;u&&(d=parseInt(u,10),isNaN(d)&&(handleError("PatternLayout.format: invalid specifier '"+u+"' for conversion character '"+l+"' - should be a number"),d=0));for(var h="a"===l?e.messages[0]:e.messages,f=0,g=h.length;g>f;f++)f>0&&" "!==p.charAt(p.length-1)&&(p+=" "),p+=0===d?h[f]:formatObjectExpansion(h[f],d);break;case"c":var m=e.logger.name;if(u){var v=parseInt(u,10),y=e.logger.name.split(".");p=v>=y.length?m:y.slice(y.length-v).join(".")}else p=m;break;case"d":var $=PatternLayout.ISO8601_DATEFORMAT;u&&($=u,"ISO8601"==$?$=PatternLayout.ISO8601_DATEFORMAT:"ABSOLUTE"==$?$=PatternLayout.ABSOLUTETIME_DATEFORMAT:"DATE"==$&&($=PatternLayout.DATETIME_DATEFORMAT)),p=new SimpleDateFormat($).format(e.timeStamp);break;case"f":if(this.hasCustomFields()){var b=0;u&&(b=parseInt(u,10),isNaN(b)?handleError("PatternLayout.format: invalid specifier '"+u+"' for conversion character 'f' - should be a number"):0===b?handleError("PatternLayout.format: invalid specifier '"+u+"' for conversion character 'f' - must be greater than zero"):b>this.customFields.length?handleError("PatternLayout.format: invalid specifier '"+u+"' for conversion character 'f' - there aren't that many custom fields"):b-=1);var w=this.customFields[b].value;"function"==typeof w&&(w=w(this,e)),p=w}break;case"n":p=newLine;break;case"p":p=e.level.name;break;case"r":p=""+e.timeStamp.getDifference(applicationStartDate);break;case"%":p="%";break;default:p=o}var x;if(s){x=parseInt(s.substr(1),10);var E=p.length;E>x&&(p=p.substring(E-x,E))}if(a)if("-"==a.charAt(0))for(x=parseInt(a.substr(1),10);p.length<x;)p+=" ";else for(x=parseInt(a,10);p.length<x;)p=" "+p;r+=p}i=i.substr(t.index+t[0].length)}return r},PatternLayout.prototype.ignoresThrowable=function(){return!0},PatternLayout.prototype.toString=function(){return"PatternLayout"},log4javascript.PatternLayout=PatternLayout,AlertAppender.prototype=new Appender,AlertAppender.prototype.layout=new SimpleLayout,AlertAppender.prototype.append=function(e){alert(this.getLayout().formatWithException(e))},AlertAppender.prototype.toString=function(){return"AlertAppender"},log4javascript.AlertAppender=AlertAppender,BrowserConsoleAppender.prototype=new log4javascript.Appender,BrowserConsoleAppender.prototype.layout=new NullLayout,BrowserConsoleAppender.prototype.threshold=Level.DEBUG,BrowserConsoleAppender.prototype.append=function(e){var t,n=this,r=function(){var t=n.getLayout().formatWithException(e);return"string"==typeof t?[t]:t};if((t=window.console)&&t.log){var i,o=r();i=t.debug&&Level.DEBUG.isGreaterOrEqual(e.level)?"debug":t.info&&Level.INFO.equals(e.level)?"info":t.warn&&Level.WARN.equals(e.level)?"warn":t.error&&e.level.isGreaterOrEqual(Level.ERROR)?"error":"log",t[i].apply?t[i].apply(t,o):t[i](o)}else"undefined"!=typeof opera&&opera.postError&&opera.postError(r())},BrowserConsoleAppender.prototype.group=function(e){window.console&&window.console.group&&window.console.group(e)},BrowserConsoleAppender.prototype.groupEnd=function(){window.console&&window.console.groupEnd&&window.console.groupEnd()},BrowserConsoleAppender.prototype.toString=function(){return"BrowserConsoleAppender"},log4javascript.BrowserConsoleAppender=BrowserConsoleAppender;var xhrFactory=function(){return new XMLHttpRequest},xmlHttpFactories=[xhrFactory,function(){return new ActiveXObject("Msxml2.XMLHTTP")},function(){return new ActiveXObject("Microsoft.XMLHTTP")}],withCredentialsSupported=!1,getXmlHttp=function(e){for(var t,n=null,r=0,i=xmlHttpFactories.length;i>r;r++){t=xmlHttpFactories[r];try{return n=t(),withCredentialsSupported=t==xhrFactory&&"withCredentials"in n,getXmlHttp=t,n}catch(o){}}e?e():handleError("getXmlHttp: unable to obtain XMLHttpRequest object")};AjaxAppender.prototype=new Appender,AjaxAppender.prototype.defaults={waitForResponse:!1,timed:!1,timerInterval:1e3,batchSize:1,sendAllOnUnload:!1,requestSuccessCallback:null,failCallback:null,postVarName:"data",contentType:"application/x-www-form-urlencoded"},AjaxAppender.prototype.layout=new HttpPostDataLayout,AjaxAppender.prototype.toString=function(){return"AjaxAppender"},log4javascript.AjaxAppender=AjaxAppender;var ConsoleAppender;if(function(){function e(e,t,n,r,i){this.create(!1,null,e,t,n,r,i,this.defaults.focusPopUp)}function t(e,t,n,r,i,o){this.create(!0,e,t,n,r,i,o,!1)}var n=function(){return['<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">','<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">',"<head>","<title>log4javascript</title>",'<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />',"<!-- Make IE8 behave like IE7, having gone to all the trouble of making IE work -->",'<meta http-equiv="X-UA-Compatible" content="IE=7" />','<script type="text/javascript">var isIe = false, isIePre7 = false;</script>','<!--[if IE]><script type="text/javascript">isIe = true</script><![endif]-->','<!--[if lt IE 7]><script type="text/javascript">isIePre7 = true</script><![endif]-->','<script type="text/javascript">',"//<![CDATA[","var loggingEnabled=true;var logQueuedEventsTimer=null;var logEntries=[];var logEntriesAndSeparators=[];var logItems=[];var renderDelay=100;var unrenderedLogItemsExist=false;var rootGroup,currentGroup=null;var loaded=false;var currentLogItem=null;var logMainContainer;function copyProperties(obj,props){for(var i in props){obj[i]=props[i];}}","function LogItem(){}","LogItem.prototype={mainContainer:null,wrappedContainer:null,unwrappedContainer:null,group:null,appendToLog:function(){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].appendToLog();}","this.group.update();},doRemove:function(doUpdate,removeFromGroup){if(this.rendered){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].remove();}","this.unwrappedElementContainer=null;this.wrappedElementContainer=null;this.mainElementContainer=null;}","if(this.group&&removeFromGroup){this.group.removeChild(this,doUpdate);}","if(this===currentLogItem){currentLogItem=null;}},remove:function(doUpdate,removeFromGroup){this.doRemove(doUpdate,removeFromGroup);},render:function(){},accept:function(visitor){visitor.visit(this);},getUnwrappedDomContainer:function(){return this.group.unwrappedElementContainer.contentDiv;},getWrappedDomContainer:function(){return this.group.wrappedElementContainer.contentDiv;},getMainDomContainer:function(){return this.group.mainElementContainer.contentDiv;}};LogItem.serializedItemKeys={LOG_ENTRY:0,GROUP_START:1,GROUP_END:2};function LogItemContainerElement(){}",'LogItemContainerElement.prototype={appendToLog:function(){var insertBeforeFirst=(newestAtTop&&this.containerDomNode.hasChildNodes());if(insertBeforeFirst){this.containerDomNode.insertBefore(this.mainDiv,this.containerDomNode.firstChild);}else{this.containerDomNode.appendChild(this.mainDiv);}}};function SeparatorElementContainer(containerDomNode){this.containerDomNode=containerDomNode;this.mainDiv=document.createElement("div");this.mainDiv.className="separator";this.mainDiv.innerHTML="&nbsp;";}',"SeparatorElementContainer.prototype=new LogItemContainerElement();SeparatorElementContainer.prototype.remove=function(){this.mainDiv.parentNode.removeChild(this.mainDiv);this.mainDiv=null;};function Separator(){this.rendered=false;}","Separator.prototype=new LogItem();copyProperties(Separator.prototype,{render:function(){var containerDomNode=this.group.contentDiv;if(isIe){this.unwrappedElementContainer=new SeparatorElementContainer(this.getUnwrappedDomContainer());this.wrappedElementContainer=new SeparatorElementContainer(this.getWrappedDomContainer());this.elementContainers=[this.unwrappedElementContainer,this.wrappedElementContainer];}else{this.mainElementContainer=new SeparatorElementContainer(this.getMainDomContainer());this.elementContainers=[this.mainElementContainer];}",'this.content=this.formattedMessage;this.rendered=true;}});function GroupElementContainer(group,containerDomNode,isRoot,isWrapped){this.group=group;this.containerDomNode=containerDomNode;this.isRoot=isRoot;this.isWrapped=isWrapped;this.expandable=false;if(this.isRoot){if(isIe){this.contentDiv=logMainContainer.appendChild(document.createElement("div"));this.contentDiv.id=this.isWrapped?"log_wrapped":"log_unwrapped";}else{this.contentDiv=logMainContainer;}}else{var groupElementContainer=this;this.mainDiv=document.createElement("div");this.mainDiv.className="group";this.headingDiv=this.mainDiv.appendChild(document.createElement("div"));this.headingDiv.className="groupheading";this.expander=this.headingDiv.appendChild(document.createElement("span"));this.expander.className="expander unselectable greyedout";this.expander.unselectable=true;var expanderText=this.group.expanded?"-":"+";this.expanderTextNode=this.expander.appendChild(document.createTextNode(expanderText));this.headingDiv.appendChild(document.createTextNode(" "+this.group.name));this.contentDiv=this.mainDiv.appendChild(document.createElement("div"));var contentCssClass=this.group.expanded?"expanded":"collapsed";this.contentDiv.className="groupcontent "+contentCssClass;this.expander.onclick=function(){if(groupElementContainer.group.expandable){groupElementContainer.group.toggleExpanded();}};}}','GroupElementContainer.prototype=new LogItemContainerElement();copyProperties(GroupElementContainer.prototype,{toggleExpanded:function(){if(!this.isRoot){var oldCssClass,newCssClass,expanderText;if(this.group.expanded){newCssClass="expanded";oldCssClass="collapsed";expanderText="-";}else{newCssClass="collapsed";oldCssClass="expanded";expanderText="+";}',"replaceClass(this.contentDiv,newCssClass,oldCssClass);this.expanderTextNode.nodeValue=expanderText;}},remove:function(){if(!this.isRoot){this.headingDiv=null;this.expander.onclick=null;this.expander=null;this.expanderTextNode=null;this.contentDiv=null;this.containerDomNode=null;this.mainDiv.parentNode.removeChild(this.mainDiv);this.mainDiv=null;}},reverseChildren:function(){var node=null;var childDomNodes=[];while((node=this.contentDiv.firstChild)){this.contentDiv.removeChild(node);childDomNodes.push(node);}",'while((node=childDomNodes.pop())){this.contentDiv.appendChild(node);}},update:function(){if(!this.isRoot){if(this.group.expandable){removeClass(this.expander,"greyedout");}else{addClass(this.expander,"greyedout");}}},clear:function(){if(this.isRoot){this.contentDiv.innerHTML="";}}});function Group(name,isRoot,initiallyExpanded){this.name=name;this.group=null;this.isRoot=isRoot;this.initiallyExpanded=initiallyExpanded;this.elementContainers=[];this.children=[];this.expanded=initiallyExpanded;this.rendered=false;this.expandable=false;}',"Group.prototype=new LogItem();copyProperties(Group.prototype,{addChild:function(logItem){this.children.push(logItem);logItem.group=this;},render:function(){if(isIe){var unwrappedDomContainer,wrappedDomContainer;if(this.isRoot){unwrappedDomContainer=logMainContainer;wrappedDomContainer=logMainContainer;}else{unwrappedDomContainer=this.getUnwrappedDomContainer();wrappedDomContainer=this.getWrappedDomContainer();}","this.unwrappedElementContainer=new GroupElementContainer(this,unwrappedDomContainer,this.isRoot,false);this.wrappedElementContainer=new GroupElementContainer(this,wrappedDomContainer,this.isRoot,true);this.elementContainers=[this.unwrappedElementContainer,this.wrappedElementContainer];}else{var mainDomContainer=this.isRoot?logMainContainer:this.getMainDomContainer();this.mainElementContainer=new GroupElementContainer(this,mainDomContainer,this.isRoot,false);this.elementContainers=[this.mainElementContainer];}","this.rendered=true;},toggleExpanded:function(){this.expanded=!this.expanded;for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].toggleExpanded();}},expand:function(){if(!this.expanded){this.toggleExpanded();}},accept:function(visitor){visitor.visitGroup(this);},reverseChildren:function(){if(this.rendered){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].reverseChildren();}}},update:function(){var previouslyExpandable=this.expandable;this.expandable=(this.children.length!==0);if(this.expandable!==previouslyExpandable){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].update();}}},flatten:function(){var visitor=new GroupFlattener();this.accept(visitor);return visitor.logEntriesAndSeparators;},removeChild:function(child,doUpdate){array_remove(this.children,child);child.group=null;if(doUpdate){this.update();}},remove:function(doUpdate,removeFromGroup){for(var i=0,len=this.children.length;i<len;i++){this.children[i].remove(false,false);}","this.children=[];this.update();if(this===currentGroup){currentGroup=this.group;}","this.doRemove(doUpdate,removeFromGroup);},serialize:function(items){items.push([LogItem.serializedItemKeys.GROUP_START,this.name]);for(var i=0,len=this.children.length;i<len;i++){this.children[i].serialize(items);}","if(this!==currentGroup){items.push([LogItem.serializedItemKeys.GROUP_END]);}},clear:function(){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].clear();}}});function LogEntryElementContainer(){}",'LogEntryElementContainer.prototype=new LogItemContainerElement();copyProperties(LogEntryElementContainer.prototype,{remove:function(){this.doRemove();},doRemove:function(){this.mainDiv.parentNode.removeChild(this.mainDiv);this.mainDiv=null;this.contentElement=null;this.containerDomNode=null;},setContent:function(content,wrappedContent){if(content===this.formattedMessage){this.contentElement.innerHTML="";this.contentElement.appendChild(document.createTextNode(this.formattedMessage));}else{this.contentElement.innerHTML=content;}},setSearchMatch:function(isMatch){var oldCssClass=isMatch?"searchnonmatch":"searchmatch";var newCssClass=isMatch?"searchmatch":"searchnonmatch";replaceClass(this.mainDiv,newCssClass,oldCssClass);},clearSearch:function(){removeClass(this.mainDiv,"searchmatch");removeClass(this.mainDiv,"searchnonmatch");}});function LogEntryWrappedElementContainer(logEntry,containerDomNode){this.logEntry=logEntry;this.containerDomNode=containerDomNode;this.mainDiv=document.createElement("div");this.mainDiv.appendChild(document.createTextNode(this.logEntry.formattedMessage));this.mainDiv.className="logentry wrapped "+this.logEntry.level;this.contentElement=this.mainDiv;}','LogEntryWrappedElementContainer.prototype=new LogEntryElementContainer();LogEntryWrappedElementContainer.prototype.setContent=function(content,wrappedContent){if(content===this.formattedMessage){this.contentElement.innerHTML="";this.contentElement.appendChild(document.createTextNode(this.formattedMessage));}else{this.contentElement.innerHTML=wrappedContent;}};function LogEntryUnwrappedElementContainer(logEntry,containerDomNode){this.logEntry=logEntry;this.containerDomNode=containerDomNode;this.mainDiv=document.createElement("div");this.mainDiv.className="logentry unwrapped "+this.logEntry.level;this.pre=this.mainDiv.appendChild(document.createElement("pre"));this.pre.appendChild(document.createTextNode(this.logEntry.formattedMessage));this.pre.className="unwrapped";this.contentElement=this.pre;}','LogEntryUnwrappedElementContainer.prototype=new LogEntryElementContainer();LogEntryUnwrappedElementContainer.prototype.remove=function(){this.doRemove();this.pre=null;};function LogEntryMainElementContainer(logEntry,containerDomNode){this.logEntry=logEntry;this.containerDomNode=containerDomNode;this.mainDiv=document.createElement("div");this.mainDiv.className="logentry nonielogentry "+this.logEntry.level;this.contentElement=this.mainDiv.appendChild(document.createElement("span"));this.contentElement.appendChild(document.createTextNode(this.logEntry.formattedMessage));}',"LogEntryMainElementContainer.prototype=new LogEntryElementContainer();function LogEntry(level,formattedMessage){this.level=level;this.formattedMessage=formattedMessage;this.rendered=false;}",'LogEntry.prototype=new LogItem();copyProperties(LogEntry.prototype,{render:function(){var logEntry=this;var containerDomNode=this.group.contentDiv;if(isIe){this.formattedMessage=this.formattedMessage.replace(/\\r\\n/g,"\\r");this.unwrappedElementContainer=new LogEntryUnwrappedElementContainer(this,this.getUnwrappedDomContainer());this.wrappedElementContainer=new LogEntryWrappedElementContainer(this,this.getWrappedDomContainer());this.elementContainers=[this.unwrappedElementContainer,this.wrappedElementContainer];}else{this.mainElementContainer=new LogEntryMainElementContainer(this,this.getMainDomContainer());this.elementContainers=[this.mainElementContainer];}','this.content=this.formattedMessage;this.rendered=true;},setContent:function(content,wrappedContent){if(content!=this.content){if(isIe&&(content!==this.formattedMessage)){content=content.replace(/\\r\\n/g,"\\r");}',"for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].setContent(content,wrappedContent);}",'this.content=content;}},getSearchMatches:function(){var matches=[];var i,len;if(isIe){var unwrappedEls=getElementsByClass(this.unwrappedElementContainer.mainDiv,"searchterm","span");var wrappedEls=getElementsByClass(this.wrappedElementContainer.mainDiv,"searchterm","span");for(i=0,len=unwrappedEls.length;i<len;i++){matches[i]=new Match(this.level,null,unwrappedEls[i],wrappedEls[i]);}}else{var els=getElementsByClass(this.mainElementContainer.mainDiv,"searchterm","span");for(i=0,len=els.length;i<len;i++){matches[i]=new Match(this.level,els[i]);}}',"return matches;},setSearchMatch:function(isMatch){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].setSearchMatch(isMatch);}},clearSearch:function(){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].clearSearch();}},accept:function(visitor){visitor.visitLogEntry(this);},serialize:function(items){items.push([LogItem.serializedItemKeys.LOG_ENTRY,this.level,this.formattedMessage]);}});function LogItemVisitor(){}","LogItemVisitor.prototype={visit:function(logItem){},visitParent:function(logItem){if(logItem.group){logItem.group.accept(this);}},visitChildren:function(logItem){for(var i=0,len=logItem.children.length;i<len;i++){logItem.children[i].accept(this);}},visitLogEntry:function(logEntry){this.visit(logEntry);},visitSeparator:function(separator){this.visit(separator);},visitGroup:function(group){this.visit(group);}};function GroupFlattener(){this.logEntriesAndSeparators=[];}",'GroupFlattener.prototype=new LogItemVisitor();GroupFlattener.prototype.visitGroup=function(group){this.visitChildren(group);};GroupFlattener.prototype.visitLogEntry=function(logEntry){this.logEntriesAndSeparators.push(logEntry);};GroupFlattener.prototype.visitSeparator=function(separator){this.logEntriesAndSeparators.push(separator);};window.onload=function(){if(location.search){var queryBits=unescape(location.search).substr(1).split("&"),nameValueBits;for(var i=0,len=queryBits.length;i<len;i++){nameValueBits=queryBits[i].split("=");if(nameValueBits[0]=="log4javascript_domain"){document.domain=nameValueBits[1];break;}}}','logMainContainer=$("log");if(isIePre7){addClass(logMainContainer,"oldIe");}','rootGroup=new Group("root",true);rootGroup.render();currentGroup=rootGroup;setCommandInputWidth();setLogContainerHeight();toggleLoggingEnabled();toggleSearchEnabled();toggleSearchFilter();toggleSearchHighlight();applyFilters();checkAllLevels();toggleWrap();toggleNewestAtTop();toggleScrollToLatest();renderQueuedLogItems();loaded=true;$("command").value="";$("command").autocomplete="off";$("command").onkeydown=function(evt){evt=getEvent(evt);if(evt.keyCode==10||evt.keyCode==13){evalCommandLine();stopPropagation(evt);}else if(evt.keyCode==27){this.value="";this.focus();}else if(evt.keyCode==38&&commandHistory.length>0){currentCommandIndex=Math.max(0,currentCommandIndex-1);this.value=commandHistory[currentCommandIndex];moveCaretToEnd(this);}else if(evt.keyCode==40&&commandHistory.length>0){currentCommandIndex=Math.min(commandHistory.length-1,currentCommandIndex+1);this.value=commandHistory[currentCommandIndex];moveCaretToEnd(this);}};$("command").onkeypress=function(evt){evt=getEvent(evt);if(evt.keyCode==38&&commandHistory.length>0&&evt.preventDefault){evt.preventDefault();}};$("command").onkeyup=function(evt){evt=getEvent(evt);if(evt.keyCode==27&&evt.preventDefault){evt.preventDefault();this.focus();}};document.onkeydown=function keyEventHandler(evt){evt=getEvent(evt);switch(evt.keyCode){case 69:if(evt.shiftKey&&(evt.ctrlKey||evt.metaKey)){evalLastCommand();cancelKeyEvent(evt);return false;}',"break;case 75:if(evt.shiftKey&&(evt.ctrlKey||evt.metaKey)){focusSearch();cancelKeyEvent(evt);return false;}","break;case 40:case 76:if(evt.shiftKey&&(evt.ctrlKey||evt.metaKey)){focusCommandLine();cancelKeyEvent(evt);return false;}","break;}};setTimeout(setLogContainerHeight,20);setShowCommandLine(showCommandLine);doSearch();};window.onunload=function(){if(mainWindowExists()){appender.unload();}",'appender=null;};function toggleLoggingEnabled(){setLoggingEnabled($("enableLogging").checked);}',"function setLoggingEnabled(enable){loggingEnabled=enable;}","var appender=null;function setAppender(appenderParam){appender=appenderParam;}",'function setShowCloseButton(showCloseButton){$("closeButton").style.display=showCloseButton?"inline":"none";}','function setShowHideButton(showHideButton){$("hideButton").style.display=showHideButton?"inline":"none";}',"var newestAtTop=false;function LogItemContentReverser(){}","LogItemContentReverser.prototype=new LogItemVisitor();LogItemContentReverser.prototype.visitGroup=function(group){group.reverseChildren();this.visitChildren(group);};function setNewestAtTop(isNewestAtTop){var oldNewestAtTop=newestAtTop;var i,iLen,j,jLen;newestAtTop=Boolean(isNewestAtTop);if(oldNewestAtTop!=newestAtTop){var visitor=new LogItemContentReverser();rootGroup.accept(visitor);if(currentSearch){var currentMatch=currentSearch.matches[currentMatchIndex];var matchIndex=0;var matches=[];var actOnLogEntry=function(logEntry){var logEntryMatches=logEntry.getSearchMatches();for(j=0,jLen=logEntryMatches.length;j<jLen;j++){matches[matchIndex]=logEntryMatches[j];if(currentMatch&&logEntryMatches[j].equals(currentMatch)){currentMatchIndex=matchIndex;}","matchIndex++;}};if(newestAtTop){for(i=logEntries.length-1;i>=0;i--){actOnLogEntry(logEntries[i]);}}else{for(i=0,iLen=logEntries.length;i<iLen;i++){actOnLogEntry(logEntries[i]);}}","currentSearch.matches=matches;if(currentMatch){currentMatch.setCurrent();}}else if(scrollToLatest){doScrollToLatest();}}",'$("newestAtTop").checked=isNewestAtTop;}','function toggleNewestAtTop(){var isNewestAtTop=$("newestAtTop").checked;setNewestAtTop(isNewestAtTop);}',"var scrollToLatest=true;function setScrollToLatest(isScrollToLatest){scrollToLatest=isScrollToLatest;if(scrollToLatest){doScrollToLatest();}",'$("scrollToLatest").checked=isScrollToLatest;}','function toggleScrollToLatest(){var isScrollToLatest=$("scrollToLatest").checked;setScrollToLatest(isScrollToLatest);}','function doScrollToLatest(){var l=logMainContainer;if(typeof l.scrollTop!="undefined"){if(newestAtTop){l.scrollTop=0;}else{var latestLogEntry=l.lastChild;if(latestLogEntry){l.scrollTop=l.scrollHeight;}}}}',"var closeIfOpenerCloses=true;function setCloseIfOpenerCloses(isCloseIfOpenerCloses){closeIfOpenerCloses=isCloseIfOpenerCloses;}","var maxMessages=null;function setMaxMessages(max){maxMessages=max;pruneLogEntries();}",'var showCommandLine=false;function setShowCommandLine(isShowCommandLine){showCommandLine=isShowCommandLine;if(loaded){$("commandLine").style.display=showCommandLine?"block":"none";setCommandInputWidth();setLogContainerHeight();}}','function focusCommandLine(){if(loaded){$("command").focus();}}','function focusSearch(){if(loaded){$("searchBox").focus();}}',"function getLogItems(){var items=[];for(var i=0,len=logItems.length;i<len;i++){logItems[i].serialize(items);}","return items;}","function setLogItems(items){var loggingReallyEnabled=loggingEnabled;loggingEnabled=true;for(var i=0,len=items.length;i<len;i++){switch(items[i][0]){case LogItem.serializedItemKeys.LOG_ENTRY:log(items[i][1],items[i][2]);break;case LogItem.serializedItemKeys.GROUP_START:group(items[i][1]);break;case LogItem.serializedItemKeys.GROUP_END:groupEnd();break;}}","loggingEnabled=loggingReallyEnabled;}","function log(logLevel,formattedMessage){if(loggingEnabled){var logEntry=new LogEntry(logLevel,formattedMessage);logEntries.push(logEntry);logEntriesAndSeparators.push(logEntry);logItems.push(logEntry);currentGroup.addChild(logEntry);if(loaded){if(logQueuedEventsTimer!==null){clearTimeout(logQueuedEventsTimer);}","logQueuedEventsTimer=setTimeout(renderQueuedLogItems,renderDelay);unrenderedLogItemsExist=true;}}}","function renderQueuedLogItems(){logQueuedEventsTimer=null;var pruned=pruneLogEntries();var initiallyHasMatches=currentSearch?currentSearch.hasMatches():false;for(var i=0,len=logItems.length;i<len;i++){if(!logItems[i].rendered){logItems[i].render();logItems[i].appendToLog();if(currentSearch&&(logItems[i]instanceof LogEntry)){currentSearch.applyTo(logItems[i]);}}}","if(currentSearch){if(pruned){if(currentSearch.hasVisibleMatches()){if(currentMatchIndex===null){setCurrentMatchIndex(0);}","displayMatches();}else{displayNoMatches();}}else if(!initiallyHasMatches&&currentSearch.hasVisibleMatches()){setCurrentMatchIndex(0);displayMatches();}}","if(scrollToLatest){doScrollToLatest();}","unrenderedLogItemsExist=false;}","function pruneLogEntries(){if((maxMessages!==null)&&(logEntriesAndSeparators.length>maxMessages)){var numberToDelete=logEntriesAndSeparators.length-maxMessages;var prunedLogEntries=logEntriesAndSeparators.slice(0,numberToDelete);if(currentSearch){currentSearch.removeMatches(prunedLogEntries);}","var group;for(var i=0;i<numberToDelete;i++){group=logEntriesAndSeparators[i].group;array_remove(logItems,logEntriesAndSeparators[i]);array_remove(logEntries,logEntriesAndSeparators[i]);logEntriesAndSeparators[i].remove(true,true);if(group.children.length===0&&group!==currentGroup&&group!==rootGroup){array_remove(logItems,group);group.remove(true,true);}}","logEntriesAndSeparators=array_removeFromStart(logEntriesAndSeparators,numberToDelete);return true;}","return false;}",'function group(name,startExpanded){if(loggingEnabled){initiallyExpanded=(typeof startExpanded==="undefined")?true:Boolean(startExpanded);var newGroup=new Group(name,false,initiallyExpanded);currentGroup.addChild(newGroup);currentGroup=newGroup;logItems.push(newGroup);if(loaded){if(logQueuedEventsTimer!==null){clearTimeout(logQueuedEventsTimer);}',"logQueuedEventsTimer=setTimeout(renderQueuedLogItems,renderDelay);unrenderedLogItemsExist=true;}}}","function groupEnd(){currentGroup=(currentGroup===rootGroup)?rootGroup:currentGroup.group;}","function mainPageReloaded(){currentGroup=rootGroup;var separator=new Separator();logEntriesAndSeparators.push(separator);logItems.push(separator);currentGroup.addChild(separator);}","function closeWindow(){if(appender&&mainWindowExists()){appender.close(true);}else{window.close();}}","function hide(){if(appender&&mainWindowExists()){appender.hide();}}",'var mainWindow=window;var windowId="log4javascriptConsoleWindow_"+new Date().getTime()+"_"+(""+Math.random()).substr(2);function setMainWindow(win){mainWindow=win;mainWindow[windowId]=window;if(opener&&closeIfOpenerCloses){pollOpener();}}',"function pollOpener(){if(closeIfOpenerCloses){if(mainWindowExists()){setTimeout(pollOpener,500);}else{closeWindow();}}}","function mainWindowExists(){try{return(mainWindow&&!mainWindow.closed&&mainWindow[windowId]==window);}catch(ex){}","return false;}",'var logLevels=["TRACE","DEBUG","INFO","WARN","ERROR","FATAL"];function getCheckBox(logLevel){return $("switch_"+logLevel);}','function getIeWrappedLogContainer(){return $("log_wrapped");}','function getIeUnwrappedLogContainer(){return $("log_unwrapped");}',"function applyFilters(){for(var i=0;i<logLevels.length;i++){if(getCheckBox(logLevels[i]).checked){addClass(logMainContainer,logLevels[i]);}else{removeClass(logMainContainer,logLevels[i]);}}","updateSearchFromFilters();}",'function toggleAllLevels(){var turnOn=$("switch_ALL").checked;for(var i=0;i<logLevels.length;i++){getCheckBox(logLevels[i]).checked=turnOn;if(turnOn){addClass(logMainContainer,logLevels[i]);}else{removeClass(logMainContainer,logLevels[i]);}}}','function checkAllLevels(){for(var i=0;i<logLevels.length;i++){if(!getCheckBox(logLevels[i]).checked){getCheckBox("ALL").checked=false;return;}}','getCheckBox("ALL").checked=true;}',"function clearLog(){rootGroup.clear();currentGroup=rootGroup;logEntries=[];logItems=[];logEntriesAndSeparators=[];doSearch();}",'function toggleWrap(){var enable=$("wrap").checked;if(enable){addClass(logMainContainer,"wrap");}else{removeClass(logMainContainer,"wrap");}',"refreshCurrentMatch();}","var searchTimer=null;function scheduleSearch(){try{clearTimeout(searchTimer);}catch(ex){}","searchTimer=setTimeout(doSearch,500);}","function Search(searchTerm,isRegex,searchRegex,isCaseSensitive){this.searchTerm=searchTerm;this.isRegex=isRegex;this.searchRegex=searchRegex;this.isCaseSensitive=isCaseSensitive;this.matches=[];}","Search.prototype={hasMatches:function(){return this.matches.length>0;},hasVisibleMatches:function(){if(this.hasMatches()){for(var i=0;i<this.matches.length;i++){if(this.matches[i].isVisible()){return true;}}}","return false;},match:function(logEntry){var entryText=String(logEntry.formattedMessage);var matchesSearch=false;if(this.isRegex){matchesSearch=this.searchRegex.test(entryText);}else if(this.isCaseSensitive){matchesSearch=(entryText.indexOf(this.searchTerm)>-1);}else{matchesSearch=(entryText.toLowerCase().indexOf(this.searchTerm.toLowerCase())>-1);}","return matchesSearch;},getNextVisibleMatchIndex:function(){for(var i=currentMatchIndex+1;i<this.matches.length;i++){if(this.matches[i].isVisible()){return i;}}","for(i=0;i<=currentMatchIndex;i++){if(this.matches[i].isVisible()){return i;}}","return-1;},getPreviousVisibleMatchIndex:function(){for(var i=currentMatchIndex-1;i>=0;i--){if(this.matches[i].isVisible()){return i;}}","for(var i=this.matches.length-1;i>=currentMatchIndex;i--){if(this.matches[i].isVisible()){return i;}}",'return-1;},applyTo:function(logEntry){var doesMatch=this.match(logEntry);if(doesMatch){logEntry.group.expand();logEntry.setSearchMatch(true);var logEntryContent;var wrappedLogEntryContent;var searchTermReplacementStartTag="<span class=\\"searchterm\\">";var searchTermReplacementEndTag="<"+"/span>";var preTagName=isIe?"pre":"span";var preStartTag="<"+preTagName+" class=\\"pre\\">";var preEndTag="<"+"/"+preTagName+">";var startIndex=0;var searchIndex,matchedText,textBeforeMatch;if(this.isRegex){var flags=this.isCaseSensitive?"g":"gi";var capturingRegex=new RegExp("("+this.searchRegex.source+")",flags);var rnd=(""+Math.random()).substr(2);var startToken="%%s"+rnd+"%%";var endToken="%%e"+rnd+"%%";logEntryContent=logEntry.formattedMessage.replace(capturingRegex,startToken+"$1"+endToken);logEntryContent=escapeHtml(logEntryContent);var result;var searchString=logEntryContent;logEntryContent="";wrappedLogEntryContent="";while((searchIndex=searchString.indexOf(startToken,startIndex))>-1){var endTokenIndex=searchString.indexOf(endToken,searchIndex);matchedText=searchString.substring(searchIndex+startToken.length,endTokenIndex);textBeforeMatch=searchString.substring(startIndex,searchIndex);logEntryContent+=preStartTag+textBeforeMatch+preEndTag;logEntryContent+=searchTermReplacementStartTag+preStartTag+matchedText+',"preEndTag+searchTermReplacementEndTag;if(isIe){wrappedLogEntryContent+=textBeforeMatch+searchTermReplacementStartTag+","matchedText+searchTermReplacementEndTag;}","startIndex=endTokenIndex+endToken.length;}",'logEntryContent+=preStartTag+searchString.substr(startIndex)+preEndTag;if(isIe){wrappedLogEntryContent+=searchString.substr(startIndex);}}else{logEntryContent="";wrappedLogEntryContent="";var searchTermReplacementLength=searchTermReplacementStartTag.length+',"this.searchTerm.length+searchTermReplacementEndTag.length;var searchTermLength=this.searchTerm.length;var searchTermLowerCase=this.searchTerm.toLowerCase();var logTextLowerCase=logEntry.formattedMessage.toLowerCase();while((searchIndex=logTextLowerCase.indexOf(searchTermLowerCase,startIndex))>-1){matchedText=escapeHtml(logEntry.formattedMessage.substr(searchIndex,this.searchTerm.length));textBeforeMatch=escapeHtml(logEntry.formattedMessage.substring(startIndex,searchIndex));var searchTermReplacement=searchTermReplacementStartTag+","preStartTag+matchedText+preEndTag+searchTermReplacementEndTag;logEntryContent+=preStartTag+textBeforeMatch+preEndTag+searchTermReplacement;if(isIe){wrappedLogEntryContent+=textBeforeMatch+searchTermReplacementStartTag+","matchedText+searchTermReplacementEndTag;}","startIndex=searchIndex+searchTermLength;}","var textAfterLastMatch=escapeHtml(logEntry.formattedMessage.substr(startIndex));logEntryContent+=preStartTag+textAfterLastMatch+preEndTag;if(isIe){wrappedLogEntryContent+=textAfterLastMatch;}}","logEntry.setContent(logEntryContent,wrappedLogEntryContent);var logEntryMatches=logEntry.getSearchMatches();this.matches=this.matches.concat(logEntryMatches);}else{logEntry.setSearchMatch(false);logEntry.setContent(logEntry.formattedMessage,logEntry.formattedMessage);}","return doesMatch;},removeMatches:function(logEntries){var matchesToRemoveCount=0;var currentMatchRemoved=false;var matchesToRemove=[];var i,iLen,j,jLen;for(i=0,iLen=this.matches.length;i<iLen;i++){for(j=0,jLen=logEntries.length;j<jLen;j++){if(this.matches[i].belongsTo(logEntries[j])){matchesToRemove.push(this.matches[i]);if(i===currentMatchIndex){currentMatchRemoved=true;}}}}","var newMatch=currentMatchRemoved?null:this.matches[currentMatchIndex];if(currentMatchRemoved){for(i=currentMatchIndex,iLen=this.matches.length;i<iLen;i++){if(this.matches[i].isVisible()&&!array_contains(matchesToRemove,this.matches[i])){newMatch=this.matches[i];break;}}}","for(i=0,iLen=matchesToRemove.length;i<iLen;i++){array_remove(this.matches,matchesToRemove[i]);matchesToRemove[i].remove();}","if(this.hasVisibleMatches()){if(newMatch===null){setCurrentMatchIndex(0);}else{var newMatchIndex=0;for(i=0,iLen=this.matches.length;i<iLen;i++){if(newMatch===this.matches[i]){newMatchIndex=i;break;}}","setCurrentMatchIndex(newMatchIndex);}}else{currentMatchIndex=null;displayNoMatches();}}};function getPageOffsetTop(el,container){var currentEl=el;var y=0;while(currentEl&&currentEl!=container){y+=currentEl.offsetTop;currentEl=currentEl.offsetParent;}","return y;}",'function scrollIntoView(el){var logContainer=logMainContainer;if(!$("wrap").checked){var logContainerLeft=logContainer.scrollLeft;var logContainerRight=logContainerLeft+logContainer.offsetWidth;var elLeft=el.offsetLeft;var elRight=elLeft+el.offsetWidth;if(elLeft<logContainerLeft||elRight>logContainerRight){logContainer.scrollLeft=elLeft-(logContainer.offsetWidth-el.offsetWidth)/2;}}',"var logContainerTop=logContainer.scrollTop;var logContainerBottom=logContainerTop+logContainer.offsetHeight;var elTop=getPageOffsetTop(el)-getToolBarsHeight();var elBottom=elTop+el.offsetHeight;if(elTop<logContainerTop||elBottom>logContainerBottom){logContainer.scrollTop=elTop-(logContainer.offsetHeight-el.offsetHeight)/2;}}","function Match(logEntryLevel,spanInMainDiv,spanInUnwrappedPre,spanInWrappedDiv){this.logEntryLevel=logEntryLevel;this.spanInMainDiv=spanInMainDiv;if(isIe){this.spanInUnwrappedPre=spanInUnwrappedPre;this.spanInWrappedDiv=spanInWrappedDiv;}","this.mainSpan=isIe?spanInUnwrappedPre:spanInMainDiv;}",'Match.prototype={equals:function(match){return this.mainSpan===match.mainSpan;},setCurrent:function(){if(isIe){addClass(this.spanInUnwrappedPre,"currentmatch");addClass(this.spanInWrappedDiv,"currentmatch");var elementToScroll=$("wrap").checked?this.spanInWrappedDiv:this.spanInUnwrappedPre;scrollIntoView(elementToScroll);}else{addClass(this.spanInMainDiv,"currentmatch");scrollIntoView(this.spanInMainDiv);}},belongsTo:function(logEntry){if(isIe){return isDescendant(this.spanInUnwrappedPre,logEntry.unwrappedPre);}else{return isDescendant(this.spanInMainDiv,logEntry.mainDiv);}},setNotCurrent:function(){if(isIe){removeClass(this.spanInUnwrappedPre,"currentmatch");removeClass(this.spanInWrappedDiv,"currentmatch");}else{removeClass(this.spanInMainDiv,"currentmatch");}},isOrphan:function(){return isOrphan(this.mainSpan);},isVisible:function(){return getCheckBox(this.logEntryLevel).checked;},remove:function(){if(isIe){this.spanInUnwrappedPre=null;this.spanInWrappedDiv=null;}else{this.spanInMainDiv=null;}}};var currentSearch=null;var currentMatchIndex=null;function doSearch(){var searchBox=$("searchBox");var searchTerm=searchBox.value;var isRegex=$("searchRegex").checked;var isCaseSensitive=$("searchCaseSensitive").checked;var i;if(searchTerm===""){$("searchReset").disabled=true;$("searchNav").style.display="none";removeClass(document.body,"searching");removeClass(searchBox,"hasmatches");removeClass(searchBox,"nomatches");for(i=0;i<logEntries.length;i++){logEntries[i].clearSearch();logEntries[i].setContent(logEntries[i].formattedMessage,logEntries[i].formattedMessage);}','currentSearch=null;setLogContainerHeight();}else{$("searchReset").disabled=false;$("searchNav").style.display="block";var searchRegex;var regexValid;if(isRegex){try{searchRegex=isCaseSensitive?new RegExp(searchTerm,"g"):new RegExp(searchTerm,"gi");regexValid=true;replaceClass(searchBox,"validregex","invalidregex");searchBox.title="Valid regex";}catch(ex){regexValid=false;replaceClass(searchBox,"invalidregex","validregex");searchBox.title="Invalid regex: "+(ex.message?ex.message:(ex.description?ex.description:"unknown error"));return;}}else{searchBox.title="";removeClass(searchBox,"validregex");removeClass(searchBox,"invalidregex");}','addClass(document.body,"searching");currentSearch=new Search(searchTerm,isRegex,searchRegex,isCaseSensitive);for(i=0;i<logEntries.length;i++){currentSearch.applyTo(logEntries[i]);}',"setLogContainerHeight();if(currentSearch.hasVisibleMatches()){setCurrentMatchIndex(0);displayMatches();}else{displayNoMatches();}}}","function updateSearchFromFilters(){if(currentSearch){if(currentSearch.hasMatches()){if(currentMatchIndex===null){currentMatchIndex=0;}","var currentMatch=currentSearch.matches[currentMatchIndex];if(currentMatch.isVisible()){displayMatches();setCurrentMatchIndex(currentMatchIndex);}else{currentMatch.setNotCurrent();var nextVisibleMatchIndex=currentSearch.getNextVisibleMatchIndex();if(nextVisibleMatchIndex>-1){setCurrentMatchIndex(nextVisibleMatchIndex);displayMatches();}else{displayNoMatches();}}}else{displayNoMatches();}}}","function refreshCurrentMatch(){if(currentSearch&&currentSearch.hasVisibleMatches()){setCurrentMatchIndex(currentMatchIndex);}}",'function displayMatches(){replaceClass($("searchBox"),"hasmatches","nomatches");$("searchBox").title=""+currentSearch.matches.length+" matches found";$("searchNav").style.display="block";setLogContainerHeight();}','function displayNoMatches(){replaceClass($("searchBox"),"nomatches","hasmatches");$("searchBox").title="No matches found";$("searchNav").style.display="none";setLogContainerHeight();}','function toggleSearchEnabled(enable){enable=(typeof enable=="undefined")?!$("searchDisable").checked:enable;$("searchBox").disabled=!enable;$("searchReset").disabled=!enable;$("searchRegex").disabled=!enable;$("searchNext").disabled=!enable;$("searchPrevious").disabled=!enable;$("searchCaseSensitive").disabled=!enable;$("searchNav").style.display=(enable&&($("searchBox").value!=="")&&currentSearch&&currentSearch.hasVisibleMatches())?"block":"none";if(enable){removeClass($("search"),"greyedout");addClass(document.body,"searching");if($("searchHighlight").checked){addClass(logMainContainer,"searchhighlight");}else{removeClass(logMainContainer,"searchhighlight");}','if($("searchFilter").checked){addClass(logMainContainer,"searchfilter");}else{removeClass(logMainContainer,"searchfilter");}','$("searchDisable").checked=!enable;}else{addClass($("search"),"greyedout");removeClass(document.body,"searching");removeClass(logMainContainer,"searchhighlight");removeClass(logMainContainer,"searchfilter");}',"setLogContainerHeight();}",'function toggleSearchFilter(){var enable=$("searchFilter").checked;if(enable){addClass(logMainContainer,"searchfilter");}else{removeClass(logMainContainer,"searchfilter");}',"refreshCurrentMatch();}",'function toggleSearchHighlight(){var enable=$("searchHighlight").checked;if(enable){addClass(logMainContainer,"searchhighlight");}else{removeClass(logMainContainer,"searchhighlight");}}','function clearSearch(){$("searchBox").value="";doSearch();}','function searchNext(){if(currentSearch!==null&&currentMatchIndex!==null){currentSearch.matches[currentMatchIndex].setNotCurrent();var nextMatchIndex=currentSearch.getNextVisibleMatchIndex();if(nextMatchIndex>currentMatchIndex||confirm("Reached the end of the page. Start from the top?")){setCurrentMatchIndex(nextMatchIndex);}}}','function searchPrevious(){if(currentSearch!==null&&currentMatchIndex!==null){currentSearch.matches[currentMatchIndex].setNotCurrent();var previousMatchIndex=currentSearch.getPreviousVisibleMatchIndex();if(previousMatchIndex<currentMatchIndex||confirm("Reached the start of the page. Continue from the bottom?")){setCurrentMatchIndex(previousMatchIndex);}}}',"function setCurrentMatchIndex(index){currentMatchIndex=index;currentSearch.matches[currentMatchIndex].setCurrent();}",'function addClass(el,cssClass){if(!hasClass(el,cssClass)){if(el.className){el.className+=" "+cssClass;}else{el.className=cssClass;}}}','function hasClass(el,cssClass){if(el.className){var classNames=el.className.split(" ");return array_contains(classNames,cssClass);}',"return false;}",'function removeClass(el,cssClass){if(hasClass(el,cssClass)){var existingClasses=el.className.split(" ");var newClasses=[];for(var i=0,len=existingClasses.length;i<len;i++){if(existingClasses[i]!=cssClass){newClasses[newClasses.length]=existingClasses[i];}}','el.className=newClasses.join(" ");}}',"function replaceClass(el,newCssClass,oldCssClass){removeClass(el,oldCssClass);addClass(el,newCssClass);}","function getElementsByClass(el,cssClass,tagName){var elements=el.getElementsByTagName(tagName);var matches=[];for(var i=0,len=elements.length;i<len;i++){if(hasClass(elements[i],cssClass)){matches.push(elements[i]);}}","return matches;}","function $(id){return document.getElementById(id);}","function isDescendant(node,ancestorNode){while(node!=null){if(node===ancestorNode){return true;}","node=node.parentNode;}","return false;}","function isOrphan(node){var currentNode=node;while(currentNode){if(currentNode==document.body){return false;}","currentNode=currentNode.parentNode;}","return true;}",'function escapeHtml(str){return str.replace(/&/g,"&amp;").replace(/[<]/g,"&lt;").replace(/>/g,"&gt;");}',"function getWindowWidth(){if(window.innerWidth){return window.innerWidth;}else if(document.documentElement&&document.documentElement.clientWidth){return document.documentElement.clientWidth;}else if(document.body){return document.body.clientWidth;}","return 0;}","function getWindowHeight(){if(window.innerHeight){return window.innerHeight;}else if(document.documentElement&&document.documentElement.clientHeight){return document.documentElement.clientHeight;}else if(document.body){return document.body.clientHeight;}","return 0;}",'function getToolBarsHeight(){return $("switches").offsetHeight;}','function getChromeHeight(){var height=getToolBarsHeight();if(showCommandLine){height+=$("commandLine").offsetHeight;}',"return height;}",'function setLogContainerHeight(){if(logMainContainer){var windowHeight=getWindowHeight();$("body").style.height=getWindowHeight()+"px";logMainContainer.style.height=""+','Math.max(0,windowHeight-getChromeHeight())+"px";}}','function setCommandInputWidth(){if(showCommandLine){$("command").style.width=""+Math.max(0,$("commandLineContainer").offsetWidth-','($("evaluateButton").offsetWidth+13))+"px";}}',"window.onresize=function(){setCommandInputWidth();setLogContainerHeight();};if(!Array.prototype.push){Array.prototype.push=function(){for(var i=0,len=arguments.length;i<len;i++){this[this.length]=arguments[i];}","return this.length;};}","if(!Array.prototype.pop){Array.prototype.pop=function(){if(this.length>0){var val=this[this.length-1];this.length=this.length-1;return val;}};}","if(!Array.prototype.shift){Array.prototype.shift=function(){if(this.length>0){var firstItem=this[0];for(var i=0,len=this.length-1;i<len;i++){this[i]=this[i+1];}","this.length=this.length-1;return firstItem;}};}","if(!Array.prototype.splice){Array.prototype.splice=function(startIndex,deleteCount){var itemsAfterDeleted=this.slice(startIndex+deleteCount);var itemsDeleted=this.slice(startIndex,startIndex+deleteCount);this.length=startIndex;var argumentsArray=[];for(var i=0,len=arguments.length;i<len;i++){argumentsArray[i]=arguments[i];}","var itemsToAppend=(argumentsArray.length>2)?itemsAfterDeleted=argumentsArray.slice(2).concat(itemsAfterDeleted):itemsAfterDeleted;for(i=0,len=itemsToAppend.length;i<len;i++){this.push(itemsToAppend[i]);}","return itemsDeleted;};}","function array_remove(arr,val){var index=-1;for(var i=0,len=arr.length;i<len;i++){if(arr[i]===val){index=i;break;}}","if(index>=0){arr.splice(index,1);return index;}else{return false;}}","function array_removeFromStart(array,numberToRemove){if(Array.prototype.splice){array.splice(0,numberToRemove);}else{for(var i=numberToRemove,len=array.length;i<len;i++){array[i-numberToRemove]=array[i];}","array.length=array.length-numberToRemove;}","return array;}","function array_contains(arr,val){for(var i=0,len=arr.length;i<len;i++){if(arr[i]==val){return true;}}","return false;}","function getErrorMessage(ex){if(ex.message){return ex.message;}else if(ex.description){return ex.description;}",'return""+ex;}',"function moveCaretToEnd(input){if(input.setSelectionRange){input.focus();var length=input.value.length;input.setSelectionRange(length,length);}else if(input.createTextRange){var range=input.createTextRange();range.collapse(false);range.select();}","input.focus();}",'function stopPropagation(evt){if(evt.stopPropagation){evt.stopPropagation();}else if(typeof evt.cancelBubble!="undefined"){evt.cancelBubble=true;}}',"function getEvent(evt){return evt?evt:event;}","function getTarget(evt){return evt.target?evt.target:evt.srcElement;}",'function getRelatedTarget(evt){if(evt.relatedTarget){return evt.relatedTarget;}else if(evt.srcElement){switch(evt.type){case"mouseover":return evt.fromElement;case"mouseout":return evt.toElement;default:return evt.srcElement;}}}',"function cancelKeyEvent(evt){evt.returnValue=false;stopPropagation(evt);}",'function evalCommandLine(){var expr=$("command").value;evalCommand(expr);$("command").value="";}',"function evalLastCommand(){if(lastCommand!=null){evalCommand(lastCommand);}}",'var lastCommand=null;var commandHistory=[];var currentCommandIndex=0;function evalCommand(expr){if(appender){appender.evalCommandAndAppend(expr);}else{var prefix=">>> "+expr+"\\r\\n";try{log("INFO",prefix+eval(expr));}catch(ex){log("ERROR",prefix+"Error: "+getErrorMessage(ex));}}',"if(expr!=commandHistory[commandHistory.length-1]){commandHistory.push(expr);if(appender){appender.storeCommandHistory(commandHistory);}}","currentCommandIndex=(expr==commandHistory[currentCommandIndex])?currentCommandIndex+1:commandHistory.length;lastCommand=expr;}","//]]>","</script>",'<style type="text/css">',"body{background-color:white;color:black;padding:0;margin:0;font-family:tahoma,verdana,arial,helvetica,sans-serif;overflow:hidden}div#switchesContainer input{margin-bottom:0}div.toolbar{border-top:solid #ffffff 1px;border-bottom:solid #aca899 1px;background-color:#f1efe7;padding:3px 5px;font-size:68.75%}div.toolbar,div#search input{font-family:tahoma,verdana,arial,helvetica,sans-serif}div.toolbar input.button{padding:0 5px;font-size:100%}div.toolbar input.hidden{display:none}div#switches input#clearButton{margin-left:20px}div#levels label{font-weight:bold}div#levels label,div#options label{margin-right:5px}div#levels label#wrapLabel{font-weight:normal}div#search label{margin-right:10px}div#search label.searchboxlabel{margin-right:0}div#search input{font-size:100%}div#search input.validregex{color:green}div#search input.invalidregex{color:red}div#search input.nomatches{color:white;background-color:#ff6666}div#search input.nomatches{color:white;background-color:#ff6666}div#searchNav{display:none}div#commandLine{display:none}div#commandLine input#command{font-size:100%;font-family:Courier New,Courier}div#commandLine input#evaluateButton{}*.greyedout{color:gray !important;border-color:gray !important}*.greyedout *.alwaysenabled{color:black}*.unselectable{-khtml-user-select:none;-moz-user-select:none;user-select:none}div#log{font-family:Courier New,Courier;font-size:75%;width:100%;overflow:auto;clear:both;position:relative}div.group{border-color:#cccccc;border-style:solid;border-width:1px 0 1px 1px;overflow:visible}div.oldIe div.group,div.oldIe div.group *,div.oldIe *.logentry{height:1%}div.group div.groupheading span.expander{border:solid black 1px;font-family:Courier New,Courier;font-size:0.833em;background-color:#eeeeee;position:relative;top:-1px;color:black;padding:0 2px;cursor:pointer;cursor:hand;height:1%}div.group div.groupcontent{margin-left:10px;padding-bottom:2px;overflow:visible}div.group div.expanded{display:block}div.group div.collapsed{display:none}*.logentry{overflow:visible;display:none;white-space:pre}span.pre{white-space:pre}pre.unwrapped{display:inline !important}pre.unwrapped pre.pre,div.wrapped pre.pre{display:inline}div.wrapped pre.pre{white-space:normal}div.wrapped{display:none}body.searching *.logentry span.currentmatch{color:white !important;background-color:green !important}body.searching div.searchhighlight *.logentry span.searchterm{color:black;background-color:yellow}div.wrap *.logentry{white-space:normal !important;border-width:0 0 1px 0;border-color:#dddddd;border-style:dotted}div.wrap #log_wrapped,#log_unwrapped{display:block}div.wrap #log_unwrapped,#log_wrapped{display:none}div.wrap *.logentry span.pre{overflow:visible;white-space:normal}div.wrap *.logentry pre.unwrapped{display:none}div.wrap *.logentry span.wrapped{display:inline}div.searchfilter *.searchnonmatch{display:none !important}div#log *.TRACE,label#label_TRACE{color:#666666}div#log *.DEBUG,label#label_DEBUG{color:green}div#log *.INFO,label#label_INFO{color:#000099}div#log *.WARN,label#label_WARN{color:#999900}div#log *.ERROR,label#label_ERROR{color:red}div#log *.FATAL,label#label_FATAL{color:#660066}div.TRACE#log *.TRACE,div.DEBUG#log *.DEBUG,div.INFO#log *.INFO,div.WARN#log *.WARN,div.ERROR#log *.ERROR,div.FATAL#log *.FATAL{display:block}div#log div.separator{background-color:#cccccc;margin:5px 0;line-height:1px}","</style>","</head>",'<body id="body">','<div id="switchesContainer">','<div id="switches">','<div id="levels" class="toolbar">',"Filters:",'<input type="checkbox" id="switch_TRACE" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide trace messages" /><label for="switch_TRACE" id="label_TRACE">trace</label>','<input type="checkbox" id="switch_DEBUG" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide debug messages" /><label for="switch_DEBUG" id="label_DEBUG">debug</label>','<input type="checkbox" id="switch_INFO" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide info messages" /><label for="switch_INFO" id="label_INFO">info</label>','<input type="checkbox" id="switch_WARN" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide warn messages" /><label for="switch_WARN" id="label_WARN">warn</label>','<input type="checkbox" id="switch_ERROR" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide error messages" /><label for="switch_ERROR" id="label_ERROR">error</label>','<input type="checkbox" id="switch_FATAL" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide fatal messages" /><label for="switch_FATAL" id="label_FATAL">fatal</label>','<input type="checkbox" id="switch_ALL" onclick="toggleAllLevels(); applyFilters()" checked="checked" title="Show/hide all messages" /><label for="switch_ALL" id="label_ALL">all</label>',"</div>",'<div id="search" class="toolbar">','<label for="searchBox" class="searchboxlabel">Search:</label> <input type="text" id="searchBox" onclick="toggleSearchEnabled(true)" onkeyup="scheduleSearch()" size="20" />','<input type="button" id="searchReset" disabled="disabled" value="Reset" onclick="clearSearch()" class="button" title="Reset the search" />','<input type="checkbox" id="searchRegex" onclick="doSearch()" title="If checked, search is treated as a regular expression" /><label for="searchRegex">Regex</label>','<input type="checkbox" id="searchCaseSensitive" onclick="doSearch()" title="If checked, search is case sensitive" /><label for="searchCaseSensitive">Match case</label>','<input type="checkbox" id="searchDisable" onclick="toggleSearchEnabled()" title="Enable/disable search" /><label for="searchDisable" class="alwaysenabled">Disable</label>','<div id="searchNav">','<input type="button" id="searchNext" disabled="disabled" value="Next" onclick="searchNext()" class="button" title="Go to the next matching log entry" />','<input type="button" id="searchPrevious" disabled="disabled" value="Previous" onclick="searchPrevious()" class="button" title="Go to the previous matching log entry" />','<input type="checkbox" id="searchFilter" onclick="toggleSearchFilter()" title="If checked, non-matching log entries are filtered out" /><label for="searchFilter">Filter</label>','<input type="checkbox" id="searchHighlight" onclick="toggleSearchHighlight()" title="Highlight matched search terms" /><label for="searchHighlight" class="alwaysenabled">Highlight all</label>',"</div>","</div>",'<div id="options" class="toolbar">',"Options:",'<input type="checkbox" id="enableLogging" onclick="toggleLoggingEnabled()" checked="checked" title="Enable/disable logging" /><label for="enableLogging" id="enableLoggingLabel">Log</label>','<input type="checkbox" id="wrap" onclick="toggleWrap()" title="Enable / disable word wrap" /><label for="wrap" id="wrapLabel">Wrap</label>','<input type="checkbox" id="newestAtTop" onclick="toggleNewestAtTop()" title="If checked, causes newest messages to appear at the top" /><label for="newestAtTop" id="newestAtTopLabel">Newest at the top</label>','<input type="checkbox" id="scrollToLatest" onclick="toggleScrollToLatest()" checked="checked" title="If checked, window automatically scrolls to a new message when it is added" /><label for="scrollToLatest" id="scrollToLatestLabel">Scroll to latest</label>','<input type="button" id="clearButton" value="Clear" onclick="clearLog()" class="button" title="Clear all log messages"  />','<input type="button" id="hideButton" value="Hide" onclick="hide()" class="hidden button" title="Hide the console" />','<input type="button" id="closeButton" value="Close" onclick="closeWindow()" class="hidden button" title="Close the window" />',"</div>","</div>","</div>",'<div id="log" class="TRACE DEBUG INFO WARN ERROR FATAL"></div>','<div id="commandLine" class="toolbar">','<div id="commandLineContainer">','<input type="text" id="command" title="Enter a JavaScript command here and hit return or press \'Evaluate\'" />','<input type="button" id="evaluateButton" value="Evaluate" class="button" title="Evaluate the command" onclick="evalCommandLine()" />',"</div>","</div>","</body>","</html>",""];
},r=[];ConsoleAppender=function(){};var i=1;ConsoleAppender.prototype=new Appender,ConsoleAppender.prototype.create=function(e,t,o,a,s,l,u,c){function p(e,t){this.loggingEvent=e,this.levelName=e.level.name,this.formattedMessage=t}function d(e,t){this.name=e,this.initiallyExpanded=t}function h(){}var f=this,g=!1,m=!1,v=!1,y=!1,$=[],b=!0,w=i++;a=extractBooleanFromParam(a,this.defaults.initiallyMinimized),o=extractBooleanFromParam(o,this.defaults.lazyInit),s=extractBooleanFromParam(s,this.defaults.useDocumentWrite);var x=this.defaults.newestMessageAtTop,E=this.defaults.scrollToLatestMessage;l=l?l:this.defaults.width,u=u?u:this.defaults.height;var C=this.defaults.maxMessages,S=this.defaults.showCommandLine,T=this.defaults.commandLineObjectExpansionDepth,A=this.defaults.showHideButton,N=this.defaults.showCloseButton;this.defaults.showLogEntryDeleteButtons;this.setLayout(this.defaults.layout);var L,O,I,k,R,M=e?"InPageAppender":"PopUpAppender",_=function(e){return m?(handleError(M+": configuration option '"+e+"' may not be set after the appender has been initialized"),!1):!0},D=function(){return v&&b&&!y};this.isNewestMessageAtTop=function(){return x},this.setNewestMessageAtTop=function(e){x=bool(e),D()&&k().setNewestAtTop(x)},this.isScrollToLatestMessage=function(){return E},this.setScrollToLatestMessage=function(e){E=bool(e),D()&&k().setScrollToLatest(E)},this.getWidth=function(){return l},this.setWidth=function(e){_("width")&&(l=extractStringFromParam(e,l))},this.getHeight=function(){return u},this.setHeight=function(e){_("height")&&(u=extractStringFromParam(e,u))},this.getMaxMessages=function(){return C},this.setMaxMessages=function(e){C=extractIntFromParam(e,C),D()&&k().setMaxMessages(C)},this.isShowCommandLine=function(){return S},this.setShowCommandLine=function(e){S=bool(e),D()&&k().setShowCommandLine(S)},this.isShowHideButton=function(){return A},this.setShowHideButton=function(e){A=bool(e),D()&&k().setShowHideButton(A)},this.isShowCloseButton=function(){return N},this.setShowCloseButton=function(e){N=bool(e),D()&&k().setShowCloseButton(N)},this.getCommandLineObjectExpansionDepth=function(){return T},this.setCommandLineObjectExpansionDepth=function(e){T=extractIntFromParam(e,T)};var j=a;this.isInitiallyMinimized=function(){return a},this.setInitiallyMinimized=function(e){_("initiallyMinimized")&&(a=bool(e),j=a)},this.isUseDocumentWrite=function(){return s},this.setUseDocumentWrite=function(e){_("useDocumentWrite")&&(s=bool(e))},p.prototype.append=function(){k().log(this.levelName,this.formattedMessage)},d.prototype.append=function(){k().group(this.name,this.initiallyExpanded)},h.prototype.append=function(){k().groupEnd()};var P=function(){I(),g?y&&te&&O():L(),I()&&F()};this.append=function(e){if(b){var t=f.getLayout().formatWithException(e);$.push(new p(e,t)),P()}},this.group=function(e,t){b&&($.push(new d(e,t)),P())},this.groupEnd=function(){b&&($.push(new h),P())};var F=function(){for(;$.length>0;)$.shift().append();c&&k().focus()};this.setAddedToLogger=function(e){this.loggers.push(e),enabled&&!o&&L()},this.clear=function(){D()&&k().clearLog(),$.length=0},this.focus=function(){D()&&k().focus()},this.focusCommandLine=function(){D()&&k().focusCommandLine()},this.focusSearch=function(){D()&&k().focusSearch()};var q=window;this.getCommandWindow=function(){return q},this.setCommandWindow=function(e){q=e},this.executeLastCommand=function(){D()&&k().evalLastCommand()};var U=new PatternLayout("%m");this.getCommandLayout=function(){return U},this.setCommandLayout=function(e){U=e},this.evalCommandAndAppend=function(e){var t={appendResult:!0,isError:!1},n="";try{var r,i;!q.eval&&q.execScript&&q.execScript("null");var o={};for(i=0,len=B.length;i<len;i++)o[B[i][0]]=B[i][1];var a=[],s=function(e){a.push([e,q[e]])};s("appender"),q.appender=f,s("commandReturnValue"),q.commandReturnValue=t,s("commandLineFunctionsHash"),q.commandLineFunctionsHash=o;var l=function(e){s(e),q[e]=function(){return this.commandLineFunctionsHash[e](f,arguments,t)}};for(i=0,len=B.length;i<len;i++)l(B[i][0]);for(q===window&&q.execScript?(s("evalExpr"),s("result"),window.evalExpr=e,q.execScript("window.result=eval(window.evalExpr);"),r=window.result):r=q.eval(e),n=isUndefined(r)?r:formatObjectExpansion(r,T),i=0,len=a.length;i<len;i++)q[a[i][0]]=a[i][1]}catch(u){n="Error evaluating command: "+getExceptionStringRep(u),t.isError=!0}if(t.appendResult){var c=">>> "+e;isUndefined(n)||(c+=newLine+n);var p=t.isError?Level.ERROR:Level.INFO,d=new LoggingEvent(null,new Date,p,[c],null),h=this.getLayout();this.setLayout(U),this.append(d),this.setLayout(h)}};var B=r.concat([]);this.addCommandLineFunction=function(e,t){B.push([e,t])};var H="log4javascriptCommandHistory";this.storeCommandHistory=function(e){setCookie(H,e.join(","))};var V=function(e){var t=n();e.open();for(var r=0,i=t.length;i>r;r++)e.writeln(t[r]);e.close()};this.setEventTypes(["load","unload"]);var G=function(){var e=k();e.setAppender(f),e.setNewestAtTop(x),e.setScrollToLatest(E),e.setMaxMessages(C),e.setShowCommandLine(S),e.setShowHideButton(A),e.setShowCloseButton(N),e.setMainWindow(window);var t=getCookie(H);t&&(e.commandHistory=t.split(","),e.currentCommandIndex=e.commandHistory.length),f.dispatchEvent("load",{win:e})};this.unload=function(){logLog.debug("unload "+this+", caller: "+this.unload.caller),y||(logLog.debug("really doing unload "+this),y=!0,v=!1,m=!1,f.dispatchEvent("unload",{}))};var W=function(e,t,n,r){function i(){try{y&&clearInterval(o),e(k())&&(clearInterval(o),n())}catch(t){clearInterval(o),b=!1,handleError(r,t)}}var o=setInterval(i,t)},z=function(){var e=document.domain!=location.hostname;return s?"":getBaseUrl()+"console.html"+(e?"?log4javascript_domain="+escape(document.domain):"")};if(e){var K=null,Y=[];this.addCssProperty=function(e,t){_("cssProperties")&&Y.push([e,t])};var X,Q=!1,J=uniqueId+"_InPageAppender_"+w;this.hide=function(){g&&m&&(D()&&k().$("command").blur(),X.style.display="none",j=!0)},this.show=function(){g&&(m?(X.style.display="block",this.setShowCommandLine(S),j=!1):Q||O(!0))},this.isVisible=function(){return!j&&!y},this.close=function(e){y||e&&!confirm("This will permanently remove the console from the page. No more messages will be logged. Do you wish to continue?")||(X.parentNode.removeChild(X),this.unload())},R=function(){function e(){try{a||f.show(),G(),v=!0,F()}catch(e){b=!1,handleError(n,e)}}function t(){try{var t=function(e){return isLoaded(e)};s&&V(k().document),t(k())?e():W(t,100,e,n)}catch(r){b=!1,handleError(n,r)}}var n="InPageAppender.open: unable to create console iframe";j=!1,X=K.appendChild(document.createElement("div")),X.style.width=l,X.style.height=u,X.style.border="solid gray 1px";for(var r=0,i=Y.length;i>r;r++)X.style[Y[r][0]]=Y[r][1];var o=s?"":" src='"+z()+"'";X.innerHTML="<iframe id='"+J+"' name='"+J+"' width='100%' height='100%' frameborder='0'"+o+" scrolling='no'></iframe>",y=!1;var c=function(e){try{return bool(e)&&bool(e.document)}catch(t){return!1}};c(k())?t():W(c,100,t,n),m=!0},O=function(e){if(e||!a){var n=function(){if(t)try{var e=document.getElementById(t);1==e.nodeType&&(K=e),R()}catch(n){handleError("InPageAppender.init: invalid container element '"+t+"' supplied",n)}else K=document.createElement("div"),K.style.position="fixed",K.style.left="0",K.style.right="0",K.style.bottom="0",document.body.appendChild(K),f.addCssProperty("borderWidth","1px 0 0 0"),f.addCssProperty("zIndex",1e6),R()};pageLoaded&&t&&t.appendChild?(K=t,R()):pageLoaded?n():log4javascript.addEventListener("load",n),Q=!0}},L=function(){O(),g=!0},k=function(){var e=window.frames[J];return e?e:void 0},I=function(){return b&&!y?(m&&!v&&k()&&isLoaded(k())&&(v=!0),v):!1}}else{var Z=f.defaults.useOldPopUp,ee=f.defaults.complainAboutPopUpBlocking,te=this.defaults.reopenWhenClosed;this.isUseOldPopUp=function(){return Z},this.setUseOldPopUp=function(e){_("useOldPopUp")&&(Z=bool(e))},this.isComplainAboutPopUpBlocking=function(){return ee},this.setComplainAboutPopUpBlocking=function(e){_("complainAboutPopUpBlocking")&&(ee=bool(e))},this.isFocusPopUp=function(){return c},this.setFocusPopUp=function(e){c=bool(e)},this.isReopenWhenClosed=function(){return te},this.setReopenWhenClosed=function(e){te=bool(e)},this.close=function(){logLog.debug("close "+this);try{ne.close(),this.unload()}catch(e){}},this.hide=function(){logLog.debug("hide "+this),D()&&this.close()},this.show=function(){logLog.debug("show "+this),m||R()},this.isVisible=function(){return I()};var ne;R=function(){function e(){k().setCloseIfOpenerCloses(!Z||!s),G(),v=!0,F(),W(a,500,c,"PopUpAppender.checkPopUpClosed: error checking pop-up window")}var t="width="+l+",height="+u+",status,resizable",n="";try{var r=window.frameElement;r&&(n="_"+r.tagName+"_"+(r.name||r.id||""))}catch(i){n="_inaccessibleParentFrame"}var o="PopUp_"+location.host.replace(/[^a-z0-9]/gi,"_")+"_"+w+n;Z&&s||(o=o+"_"+uniqueId);var a=function(e){if(y)return!0;try{return bool(e)&&e.closed}catch(t){}return!1},c=function(){y||f.unload()};try{if(ne=window.open(z(),o,t),y=!1,m=!0,ne&&ne.document)if(s&&Z&&isLoaded(ne))ne.mainPageReloaded(),e();else{s&&V(ne.document);var p=function(e){return bool(e)&&isLoaded(e)};isLoaded(ne)?e():W(p,100,e,"PopUpAppender.init: unable to create console window")}else b=!1,logLog.warn("PopUpAppender.init: pop-ups blocked, please unblock to use PopUpAppender"),ee&&handleError("log4javascript: pop-up windows appear to be blocked. Please unblock them to use pop-up logging.")}catch(d){handleError("PopUpAppender.init: error creating pop-up",d)}},O=function(){a||R()},L=function(){O(),g=!0},k=function(){return ne},I=function(){if(b&&!isUndefined(ne)&&!y){if(ne.closed||v&&isUndefined(ne.closed))return f.unload(),logLog.debug("PopUpAppender: pop-up closed"),!1;!v&&isLoaded(ne)&&(v=!0)}return b&&v&&!y}}this.getConsoleWindow=k},ConsoleAppender.addGlobalCommandLineFunction=function(e,t){r.push([e,t])},e.prototype=new ConsoleAppender,e.prototype.defaults={layout:new PatternLayout("%d{HH:mm:ss} %-5p - %m{1}%n"),initiallyMinimized:!1,focusPopUp:!1,lazyInit:!0,useOldPopUp:!0,complainAboutPopUpBlocking:!0,newestMessageAtTop:!1,scrollToLatestMessage:!0,width:"600",height:"400",reopenWhenClosed:!1,maxMessages:null,showCommandLine:!0,commandLineObjectExpansionDepth:1,showHideButton:!1,showCloseButton:!0,showLogEntryDeleteButtons:!0,useDocumentWrite:!0},e.prototype.toString=function(){return"PopUpAppender"},log4javascript.PopUpAppender=e,t.prototype=new ConsoleAppender,t.prototype.defaults={layout:new PatternLayout("%d{HH:mm:ss} %-5p - %m{1}%n"),initiallyMinimized:!1,lazyInit:!0,newestMessageAtTop:!1,scrollToLatestMessage:!0,width:"100%",height:"220px",maxMessages:null,showCommandLine:!0,commandLineObjectExpansionDepth:1,showHideButton:!1,showCloseButton:!1,showLogEntryDeleteButtons:!0,useDocumentWrite:!0},t.prototype.toString=function(){return"InPageAppender"},log4javascript.InPageAppender=t,log4javascript.InlineAppender=t}(),function(){function e(e){var t=0;for(var n in e)t=Math.max(toStr(n).length,t);var r=[];for(n in e){var i,o="  "+padWithSpaces(toStr(n),t+2);try{i=splitIntoLines(toStr(e[n])).join(padWithSpaces(newLine,t+6))}catch(a){i="[Error obtaining property. Details: "+getExceptionMessage(a)+"]"}r.push(o+i)}return r.join(newLine)}function t(e,n,r,l,u){function c(e){return e.nodeType==i.TEXT_NODE&&/^[ \t\r\n]*$/.test(e.nodeValue)}function p(e){return e.toString().replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/"/g,"&quot;")}function d(e){for(var t=e.style.cssText.split(";"),n="",r=0,i=t.length;i>r;r++){var o=t[r].split(":"),a=[];/^\s*$/.test(o[0])||a.push(trim(o[0]).toLowerCase()+":"+trim(o[1])),n=a.join(";")}return n}function h(e){if(e.prefix)return e.prefix;if(e.outerHTML){var t=new RegExp("<([^:]+):"+e.tagName+"[^>]*>","i");if(t.test(e.outerHTML))return RegExp.$1.toLowerCase()}return""}n="undefined"==typeof n?!0:!!n,"string"!=typeof r&&(r=""),l=!!l,u=!!u;var f,g="<",m=">";if(!n||e.nodeType==i.DOCUMENT_FRAGMENT_NODE){f="";for(var v=0,y=e.childNodes.length;y>v;v++)f+=t(e.childNodes[v],!0,r+s);return f}switch(e.nodeType){case i.ELEMENT_NODE:var $=e.tagName.toLowerCase();f=l?newLine+r:"",f+=g;var b=h(e),w=!!b;for(w&&(f+=b+":"),f+=$,v=0,y=e.attributes.length;y>v;v++){var x=e.attributes[v];x.specified&&null!==x.nodeValue&&"style"!==x.nodeName.toLowerCase()&&"string"==typeof x.nodeValue&&0!==x.nodeName.indexOf("_moz")&&(f+=" "+x.nodeName.toLowerCase()+'="',f+=p(x.nodeValue),f+='"')}if(e.style.cssText){var E=d(e);""!==E&&(f+=' style="'+d(e)+'"')}if(array_contains(a,$)||w&&!e.hasChildNodes())f+="/"+m;else{f+=m;for(var C=!(1===e.childNodes.length&&e.childNodes[0].nodeType===i.TEXT_NODE),S=array_contains(o,$),v=0,y=e.childNodes.length;y>v;v++)f+=t(e.childNodes[v],!0,r+s,C,S);var T=g+"/"+$+m;f+=C?newLine+r+T:T}return f;case i.TEXT_NODE:if(c(e))f="";else{if(u)f=e.nodeValue;else{for(var A=splitIntoLines(trim(e.nodeValue)),N=[],v=0,y=A.length;y>v;v++)N[v]=trim(A[v]);f=N.join(newLine+r)}l&&(f=newLine+r+f)}return f;case i.CDATA_SECTION_NODE:return"<![CDATA["+e.nodeValue+"]]>"+newLine;case i.DOCUMENT_NODE:f="";for(var v=0,y=e.childNodes.length;y>v;v++)f+=t(e.childNodes[v],!0,r);return f;default:return""}}function n(){ConsoleAppender.addGlobalCommandLineFunction("$",function(e,t,n){return document.getElementById(t[0])}),ConsoleAppender.addGlobalCommandLineFunction("dir",function(t,n,r){for(var i=[],o=0,a=n.length;a>o;o++)i[o]=e(n[o]);return i.join(newLine+newLine)}),ConsoleAppender.addGlobalCommandLineFunction("dirxml",function(e,n,r){for(var i=[],o=0,a=n.length;a>o;o++){e.getCommandWindow();i[o]=t(n[o])}return i.join(newLine+newLine)}),ConsoleAppender.addGlobalCommandLineFunction("cd",function(e,t,n){var r,i;return 0===t.length||""===t[0]?(r=window,i="Command line set to run in main window"):t[0].window==t[0]?(r=t[0],i="Command line set to run in frame '"+t[0].name+"'"):(r=window.frames[t[0]],r?i="Command line set to run in frame '"+t[0]+"'":(n.isError=!0,i="Frame '"+t[0]+"' does not exist",r=e.getCommandWindow())),e.setCommandWindow(r),i}),ConsoleAppender.addGlobalCommandLineFunction("clear",function(e,t,n){n.appendResult=!1,e.clear()}),ConsoleAppender.addGlobalCommandLineFunction("keys",function(e,t,n){var r=[];for(var i in t[0])r.push(i);return r}),ConsoleAppender.addGlobalCommandLineFunction("values",function(e,t,n){var r=[];for(var i in t[0])try{r.push(t[0][i])}catch(o){logLog.warn("values(): Unable to obtain value for key "+i+". Details: "+getExceptionMessage(o))}return r}),ConsoleAppender.addGlobalCommandLineFunction("expansionDepth",function(e,t,n){var r=parseInt(t[0],10);return isNaN(r)||0>r?(n.isError=!0,""+t[0]+" is not a valid expansion depth"):(e.setCommandLineObjectExpansionDepth(r),"Object expansion depth set to "+r)})}function r(){n()}var i={ELEMENT_NODE:1,ATTRIBUTE_NODE:2,TEXT_NODE:3,CDATA_SECTION_NODE:4,ENTITY_REFERENCE_NODE:5,ENTITY_NODE:6,PROCESSING_INSTRUCTION_NODE:7,COMMENT_NODE:8,DOCUMENT_NODE:9,DOCUMENT_TYPE_NODE:10,DOCUMENT_FRAGMENT_NODE:11,NOTATION_NODE:12},o=["script","pre"],a=["br","img","hr","param","link","area","input","col","base","meta"],s="  ";r()}(),log4javascript.setDocumentReady=function(){pageLoaded=!0,log4javascript.dispatchEvent("load",{})},window.addEventListener)window.addEventListener("load",log4javascript.setDocumentReady,!1);else if(window.attachEvent)window.attachEvent("onload",log4javascript.setDocumentReady);else{var oldOnload=window.onload;"function"!=typeof window.onload?window.onload=log4javascript.setDocumentReady:window.onload=function(e){oldOnload&&oldOnload(e),log4javascript.setDocumentReady()}}return window.log4javascript=log4javascript,log4javascript}();!function(e,t){"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?module.exports=t():e.store=t()}(this,function(){function e(){try{return o in r&&r[o]}catch(e){return!1}}var t,n={},r="undefined"!=typeof window?window:global,i=r.document,o="localStorage",a="script";if(n.disabled=!1,n.version="1.3.20",n.set=function(e,t){},n.get=function(e,t){},n.has=function(e){return void 0!==n.get(e)},n.remove=function(e){},n.clear=function(){},n.transact=function(e,t,r){null==r&&(r=t,t=null),null==t&&(t={});var i=n.get(e,t);r(i),n.set(e,i)},n.getAll=function(){},n.forEach=function(){},n.serialize=function(e){return JSON.stringify(e)},n.deserialize=function(e){if("string"==typeof e)try{return JSON.parse(e)}catch(t){return e||void 0}},e())t=r[o],n.set=function(e,r){return void 0===r?n.remove(e):(t.setItem(e,n.serialize(r)),r)},n.get=function(e,r){var i=n.deserialize(t.getItem(e));return void 0===i?r:i},n.remove=function(e){t.removeItem(e)},n.clear=function(){t.clear()},n.getAll=function(){var e={};return n.forEach(function(t,n){e[t]=n}),e},n.forEach=function(e){for(var r=0;r<t.length;r++){var i=t.key(r);e(i,n.get(i))}};else if(i&&i.documentElement.addBehavior){var s,l;try{l=new ActiveXObject("htmlfile"),l.open(),l.write("<"+a+">document.w=window</"+a+'><iframe src="/favicon.ico"></iframe>'),l.close(),s=l.w.frames[0].document,t=s.createElement("div")}catch(u){t=i.createElement("div"),s=i.body}var c=function(e){return function(){var r=Array.prototype.slice.call(arguments,0);r.unshift(t),s.appendChild(t),t.addBehavior("#default#userData"),t.load(o);var i=e.apply(n,r);return s.removeChild(t),i}},p=new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]","g"),d=function(e){return e.replace(/^d/,"___$&").replace(p,"___")};n.set=c(function(e,t,r){return t=d(t),void 0===r?n.remove(t):(e.setAttribute(t,n.serialize(r)),e.save(o),r)}),n.get=c(function(e,t,r){t=d(t);var i=n.deserialize(e.getAttribute(t));return void 0===i?r:i}),n.remove=c(function(e,t){t=d(t),e.removeAttribute(t),e.save(o)}),n.clear=c(function(e){var t=e.XMLDocument.documentElement.attributes;e.load(o);for(var n=t.length-1;n>=0;n--)e.removeAttribute(t[n].name);e.save(o)}),n.getAll=function(e){var t={};return n.forEach(function(e,n){t[e]=n}),t},n.forEach=c(function(e,t){for(var r,i=e.XMLDocument.documentElement.attributes,o=0;r=i[o];++o)t(r.name,n.deserialize(e.getAttribute(r.name)))})}try{var h="__storejs__";n.set(h,h),n.get(h)!=h&&(n.disabled=!0),n.remove(h)}catch(u){n.disabled=!0}return n.enabled=!n.disabled,n});var Logging={level:0,log:function(){}},AuthenticationContext;"undefined"!=typeof module&&module.exports&&(module.exports.inject=function(e){return new AuthenticationContext(e)}),AuthenticationContext=function(e){if(this.REQUEST_TYPE={LOGIN:"LOGIN",RENEW_TOKEN:"RENEW_TOKEN",UNKNOWN:"UNKNOWN"},this.CONSTANTS={ACCESS_TOKEN:"access_token",EXPIRES_IN:"expires_in",ID_TOKEN:"id_token",ERROR_DESCRIPTION:"error_description",SESSION_STATE:"session_state",STORAGE:{TOKEN_KEYS:"adal.token.keys",ACCESS_TOKEN_KEY:"adal.access.token.key",EXPIRATION_KEY:"adal.expiration.key",START_PAGE:"adal.start.page",START_PAGE_PARAMS:"adal.start.page.params",STATE_LOGIN:"adal.state.login",STATE_RENEW:"adal.state.renew",STATE_RENEW_RESOURCE:"adal.state.renew.resource",NONCE_IDTOKEN:"adal.nonce.idtoken",SESSION_STATE:"adal.session.state",USERNAME:"adal.username",IDTOKEN:"adal.idtoken",ERROR:"adal.error",ERROR_DESCRIPTION:"adal.error.description",LOGIN_REQUEST:"adal.login.request",LOGIN_ERROR:"adal.login.error"},RESOURCE_DELIMETER:"|",ERR_MESSAGES:{NO_TOKEN:"User is not authorized"},LOGGING_LEVEL:{ERROR:0,WARN:1,INFO:2,VERBOSE:3},LEVEL_STRING_MAP:{0:"ERROR:",1:"WARNING:",2:"INFO:",3:"VERBOSE:"}},AuthenticationContext.prototype._singletonInstance)return AuthenticationContext.prototype._singletonInstance;if(AuthenticationContext.prototype._singletonInstance=this,this.instance="https://login.microsoftonline.com/",this.config={},this.callback=null,this.popUp=!1,this._user=null,this._activeRenewals={},this._loginInProgress=!1,this._renewStates=[],window.callBackMappedToRenewStates={},window.callBacksMappedToRenewStates={},e.displayCall&&"function"!=typeof e.displayCall)throw new Error("displayCall is not a function");if(!e.clientId)throw new Error("clientId is required");e.correlationId||(e.correlationId=this._guid()),this.config=this._cloneConfig(e),this.config.loginResource||(this.config.loginResource=this.config.clientId),this.config.redirectUri||(this.config.redirectUri=window.location.href)},AuthenticationContext.prototype.login=function(){var e=this._guid();this.config.state=e,this._idTokenNonce=this._guid(),this.verbose("Expected state: "+e+" startPage:"+window.location),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST,window.location),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,""),this._saveItem(this.CONSTANTS.STORAGE.STATE_LOGIN,e),this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,this._idTokenNonce),this._saveItem(this.CONSTANTS.STORAGE.ERROR,""),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,"");var t=this._getNavigateUrl("id_token",null)+"&nonce="+encodeURIComponent(this._idTokenNonce);this.frameCallInProgress=!1,this._loginInProgress=!0,this.config.displayCall?this.config.displayCall(t):this.promptUser(t)},AuthenticationContext.prototype.loginInProgress=function(){return this._loginInProgress},AuthenticationContext.prototype._hasResource=function(e){var t=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS);return t&&!this._isEmpty(t)&&t.indexOf(e+this.CONSTANTS.RESOURCE_DELIMETER)>-1},AuthenticationContext.prototype.getCachedToken=function(e){if(!this._hasResource(e))return null;var t=this._getItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+e),n=this._getItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+e),r=this.config.expireOffsetSeconds||120;return n&&n>this._now()+r?t:(this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+e,""),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+e,0),null)},AuthenticationContext.prototype.getCachedUser=function(){if(this._user)return this._user;var e=this._getItem(this.CONSTANTS.STORAGE.IDTOKEN);return this._user=this._createUser(e),this._user},AuthenticationContext.prototype.registerCallback=function(e,t,n){this._activeRenewals[t]=e,window.callBacksMappedToRenewStates[e]||(window.callBacksMappedToRenewStates[e]=[]);var r=this;window.callBacksMappedToRenewStates[e].push(n),window.callBackMappedToRenewStates[e]||(window.callBackMappedToRenewStates[e]=function(n,i){for(var o=0;o<window.callBacksMappedToRenewStates[e].length;++o)window.callBacksMappedToRenewStates[e][o](n,i);r._activeRenewals[t]=null,window.callBacksMappedToRenewStates[e]=null,window.callBackMappedToRenewStates[e]=null})},AuthenticationContext.prototype._renewToken=function(e,t){this.info("renewToken is called for resource:"+e);var n=this._addAdalFrame("adalRenewFrame"+e),r=this._guid()+"|"+e;this._idTokenNonce=this._guid(),this.config.state=r,this._renewStates.push(r),this.verbose("Renew token Expected state: "+r);var i=this._getNavigateUrl("token",e)+"&prompt=none&login_hint="+encodeURIComponent(this._user.userName);this._urlContainsQueryStringParameter("domain_hint",i)||(i+="&domain_hint="+encodeURIComponent(this._getDomainHint())),i+="&nonce="+encodeURIComponent(this._idTokenNonce),this.callback=t,this.registerCallback(r,e,t),this.idTokenNonce=null,this.verbose("Navigate to:"+i),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST,""),n.src="about:blank",this._loadFrame(i,"adalRenewFrame"+e)},AuthenticationContext.prototype._renewIdToken=function(e){this.info("renewIdToken is called");var t=this._addAdalFrame("adalIdTokenFrame"),n=this._guid()+"|"+this.config.clientId;this._idTokenNonce=this._guid(),this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,this._idTokenNonce),this.config.state=n,this._renewStates.push(n),this.verbose("Renew Idtoken Expected state: "+n);var r=this._getNavigateUrl("id_token",null)+"&prompt=none&login_hint="+encodeURIComponent(this._user.userName);this._urlContainsQueryStringParameter("domain_hint",r)||(r+="&domain_hint="+encodeURIComponent(this._getDomainHint())),r+="&nonce="+encodeURIComponent(this._idTokenNonce),this.registerCallback(n,this.config.clientId,e),this.idTokenNonce=null,this.verbose("Navigate to:"+r),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST,""),t.src="about:blank",this._loadFrame(r,"adalIdTokenFrame")},AuthenticationContext.prototype._urlContainsQueryStringParameter=function(e,t){var n=new RegExp("[\\?&]"+e+"=");return n.test(t)},AuthenticationContext.prototype._loadFrame=function(e,t){var n=this;n.info("LoadFrame: "+t);var r=t;setTimeout(function(){var t=n._addAdalFrame(r);""!==t.src&&"about:blank"!==t.src||(t.src=e,n._loadFrame(e,r))},500)},AuthenticationContext.prototype.acquireToken=function(e,t){if(this._isEmpty(e))return this.warn("resource is required"),void t("resource is required",null);var n=this.getCachedToken(e);return n?(this.info("Token is already in cache for resource:"+e),void t(null,n)):this._user?void(this._activeRenewals[e]?this.registerCallback(this._activeRenewals[e],e,t):e===this.config.clientId?(this.verbose("renewing idtoken"),this._renewIdToken(t)):this._renewToken(e,t)):(this.warn("User login is required"),void t("User login is required",null))},AuthenticationContext.prototype.promptUser=function(e){e?(this.info("Navigate to:"+e),window.location.replace(e)):this.info("Navigate url is empty")},AuthenticationContext.prototype.clearCache=function(){this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY,""),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY,0),this._saveItem(this.CONSTANTS.STORAGE.SESSION_STATE,""),this._saveItem(this.CONSTANTS.STORAGE.STATE_LOGIN,""),this._renewStates=[],this._saveItem(this.CONSTANTS.STORAGE.START_PAGE,""),this._saveItem(this.CONSTANTS.STORAGE.START_PAGE_PARAMS,""),this._saveItem(this.CONSTANTS.STORAGE.USERNAME,""),this._saveItem(this.CONSTANTS.STORAGE.IDTOKEN,""),this._saveItem(this.CONSTANTS.STORAGE.ERROR,""),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,"");var e=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS);if(!this._isEmpty(e)){e=e.split(this.CONSTANTS.RESOURCE_DELIMETER);for(var t=0;t<e.length;t++)this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+e[t],""),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+e[t],0)}this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS,"")},AuthenticationContext.prototype.clearCacheForResource=function(e){this._saveItem(this.CONSTANTS.STORAGE.STATE_RENEW,""),this._saveItem(this.CONSTANTS.STORAGE.ERROR,""),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,""),this._hasResource(e)&&(this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+e,""),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+e,0))},AuthenticationContext.prototype.logOut=function(){this.clearCache();var e="common",t="";this._user=null,this.config.tenant&&(e=this.config.tenant),this.config.instance&&(this.instance=this.config.instance),this.config.postLogoutRedirectUri&&(t="post_logout_redirect_uri="+encodeURIComponent(this.config.postLogoutRedirectUri));var n=this.instance+e+"/oauth2/logout?"+t;this.info("Logout navigate to: "+n),this.promptUser(n)},AuthenticationContext.prototype._isEmpty=function(e){return"undefined"==typeof e||!e||0===e.length},AuthenticationContext.prototype.getUser=function(e){if("function"!=typeof e)throw new Error("callback is not a function");if(this.callback=e,this._user)return void this.callback(null,this._user);var t=this._getItem(this.CONSTANTS.STORAGE.IDTOKEN);this._isEmpty(t)?(this.warn("User information is not available"),this.callback("User information is not available")):(this.info("User exists in cache: "),this._user=this._createUser(t),this.callback(null,this._user))},AuthenticationContext.prototype._getDomainHint=function(){if(this._user&&this._user.userName&&this._user.userName.indexOf("@")>-1){var e=this._user.userName.split("@");return e[e.length-1]}return""},AuthenticationContext.prototype._createUser=function(e){var t=null,n=this._extractIdToken(e);return n&&n.hasOwnProperty("aud")&&(n.aud.toLowerCase()===this.config.clientId.toLowerCase()?(t={userName:"",profile:n},n.hasOwnProperty("upn")?t.userName=n.upn:n.hasOwnProperty("email")&&(t.userName=n.email)):this.warn("IdToken has invalid aud field")),t},AuthenticationContext.prototype._getHash=function(e){return e.indexOf("#/")>-1?e=e.substring(e.indexOf("#/")+2):e.indexOf("#")>-1&&(e=e.substring(1)),e},AuthenticationContext.prototype.isCallback=function(e){e=this._getHash(e);var t=this._deserialize(e);return t.hasOwnProperty(this.CONSTANTS.ERROR_DESCRIPTION)||t.hasOwnProperty(this.CONSTANTS.ACCESS_TOKEN)||t.hasOwnProperty(this.CONSTANTS.ID_TOKEN)},AuthenticationContext.prototype.getLoginError=function(){return this._getItem(this.CONSTANTS.STORAGE.LOGIN_ERROR)},AuthenticationContext.prototype.getRequestInfo=function(e){e=this._getHash(e);var t=this._deserialize(e),n={valid:!1,parameters:{},stateMatch:!1,stateResponse:"",requestType:this.REQUEST_TYPE.UNKNOWN};if(t&&(n.parameters=t,t.hasOwnProperty(this.CONSTANTS.ERROR_DESCRIPTION)||t.hasOwnProperty(this.CONSTANTS.ACCESS_TOKEN)||t.hasOwnProperty(this.CONSTANTS.ID_TOKEN))){n.valid=!0;var r="";if(!t.hasOwnProperty("state"))return this.warn("No state returned"),n;if(this.verbose("State: "+t.state),r=t.state,n.stateResponse=r,r===this._getItem(this.CONSTANTS.STORAGE.STATE_LOGIN))return n.requestType=this.REQUEST_TYPE.LOGIN,n.stateMatch=!0,n;if(!n.stateMatch&&window.parent&&window.parent.AuthenticationContext())for(var i=window.parent.AuthenticationContext()._renewStates,o=0;o<i.length;o++)if(i[o]===n.stateResponse){n.requestType=this.REQUEST_TYPE.RENEW_TOKEN,n.stateMatch=!0;break}}return n},AuthenticationContext.prototype._getResourceFromState=function(e){if(e){var t=e.indexOf("|");if(t>-1&&t+1<e.length)return e.substring(t+1)}return""},AuthenticationContext.prototype.saveTokenFromHash=function(e){if(this.info("State status:"+e.stateMatch+"; Request type:"+e.requestType),this._saveItem(this.CONSTANTS.STORAGE.ERROR,""),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,""),e.parameters.hasOwnProperty(this.CONSTANTS.ERROR_DESCRIPTION))this.info("Error :"+e.parameters.error+"; Error description:"+e.parameters[this.CONSTANTS.ERROR_DESCRIPTION]),this._saveItem(this.CONSTANTS.STORAGE.ERROR,e.parameters.error),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,e.parameters[this.CONSTANTS.ERROR_DESCRIPTION]),e.requestType===this.REQUEST_TYPE.LOGIN&&(this._loginInProgress=!1,this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,e.parameters.errorDescription));else if(e.stateMatch){this.info("State is right"),e.parameters.hasOwnProperty(this.CONSTANTS.SESSION_STATE)&&this._saveItem(this.CONSTANTS.STORAGE.SESSION_STATE,e.parameters[this.CONSTANTS.SESSION_STATE]);var t,n;e.parameters.hasOwnProperty(this.CONSTANTS.ACCESS_TOKEN)&&(this.info("Fragment has access token"),n=this._getResourceFromState(e.stateResponse),this._hasResource(n)||(t=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS)||"",this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS,t+n+this.CONSTANTS.RESOURCE_DELIMETER)),this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+n,e.parameters[this.CONSTANTS.ACCESS_TOKEN]),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+n,this._expiresIn(e.parameters[this.CONSTANTS.EXPIRES_IN]))),e.parameters.hasOwnProperty(this.CONSTANTS.ID_TOKEN)&&(this.info("Fragment has id token"),this._loginInProgress=!1,this._user=this._createUser(e.parameters[this.CONSTANTS.ID_TOKEN]),this._user&&this._user.profile&&(this._user.profile.nonce!==this._getItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN)?(this._user=null,this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,"Nonce is not same as "+this._idTokenNonce)):(this._saveItem(this.CONSTANTS.STORAGE.IDTOKEN,e.parameters[this.CONSTANTS.ID_TOKEN]),n=this.config.loginResource?this.config.loginResource:this.config.clientId,this._hasResource(n)||(t=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS)||"",this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS,t+n+this.CONSTANTS.RESOURCE_DELIMETER)),this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+n,e.parameters[this.CONSTANTS.ID_TOKEN]),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+n,this._user.profile.exp))))}else this._saveItem(this.CONSTANTS.STORAGE.ERROR,"Invalid_state"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,"Invalid_state. state: "+e.stateResponse)},AuthenticationContext.prototype.getResourceForEndpoint=function(e){
if(this.config&&this.config.endpoints)for(var t in this.config.endpoints)if(e.indexOf(t)>-1)return this.config.endpoints[t];return e.indexOf("http://")>-1||e.indexOf("https://")>-1?this._getHostFromUri(e)===this._getHostFromUri(this.config.redirectUri)?this.config.loginResource:null:this.config.loginResource},AuthenticationContext.prototype._getHostFromUri=function(e){var t=String(e).replace(/^(https?:)\/\//,"");return t=t.split("/")[0]},AuthenticationContext.prototype.handleWindowCallback=function(){var e=window.location.hash;if(this.isCallback(e)){var t=this.getRequestInfo(e);this.info("Returned from redirect url"),this.saveTokenFromHash(t);var n=null;if(t.requestType===this.REQUEST_TYPE.RENEW_TOKEN&&window.parent?(this.verbose("Window is in iframe"),n=window.parent.callBackMappedToRenewStates[t.stateResponse],window.src=""):window&&window.oauth2Callback&&(this.verbose("Window is redirecting"),n=this.callback),window.location.hash="",window.location=this._getItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST),t.requestType===this.REQUEST_TYPE.RENEW_TOKEN)return void n(this._getItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION),t.parameters[this.CONSTANTS.ACCESS_TOKEN]||t.parameters[this.CONSTANTS.ID_TOKEN])}},AuthenticationContext.prototype._getNavigateUrl=function(e,t){var n="common";this.config.tenant&&(n=this.config.tenant),this.config.instance&&(this.instance=this.config.instance);var r=this.instance+n+"/oauth2/authorize"+this._serialize(e,this.config,t)+this._addLibMetadata();return this.info("Navigate url:"+r),r},AuthenticationContext.prototype._extractIdToken=function(e){var t=this._decodeJwt(e);if(!t)return null;try{var n=t.JWSPayload,r=this._base64DecodeStringUrlSafe(n);return r?JSON.parse(r):(this.info("The returned id_token could not be base64 url safe decoded."),null)}catch(i){this.error("The returned id_token could not be decoded",i)}return null},AuthenticationContext.prototype._extractUserName=function(e){try{var t=this._extractIdToken(e);if(t){if(t.hasOwnProperty("upn"))return t.upn;if(t.hasOwnProperty("email"))return t.email}}catch(n){this.error("The returned id_token could not be decoded",n)}return null},AuthenticationContext.prototype._base64DecodeStringUrlSafe=function(e){return e=e.replace(/-/g,"+").replace(/_/g,"/"),window.atob?decodeURIComponent(escape(window.atob(e))):decodeURIComponent(escape(this._decode(e)))},AuthenticationContext.prototype._decode=function(e){var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";e=String(e).replace(/=+$/,"");var n=e.length;if(n%4===1)throw new Error("The token to be decoded is not correctly encoded.");for(var r,i,o,a,s,l,u,c,p="",d=0;n>d;d+=4){if(r=t.indexOf(e.charAt(d)),i=t.indexOf(e.charAt(d+1)),o=t.indexOf(e.charAt(d+2)),a=t.indexOf(e.charAt(d+3)),d+2===n-1){s=r<<18|i<<12|o<<6,l=s>>16&255,u=s>>8&255,p+=String.fromCharCode(l,u);break}if(d+1===n-1){s=r<<18|i<<12,l=s>>16&255,p+=String.fromCharCode(l);break}s=r<<18|i<<12|o<<6|a,l=s>>16&255,u=s>>8&255,c=255&s,p+=String.fromCharCode(l,u,c)}return p},AuthenticationContext.prototype._decodeJwt=function(e){if(this._isEmpty(e))return null;var t=/^([^\.\s]*)\.([^\.\s]+)\.([^\.\s]*)$/,n=t.exec(e);if(!n||n.length<4)return this.warn("The returned id_token is not parseable."),null;var r={header:n[1],JWSPayload:n[2],JWSSig:n[3]};return r},AuthenticationContext.prototype._convertUrlSafeToRegularBase64EncodedString=function(e){return e.replace("-","+").replace("_","/")},AuthenticationContext.prototype._serialize=function(e,t,n){var r=[];return null!==t&&(r.push("?response_type="+e),r.push("client_id="+encodeURIComponent(t.clientId)),n&&r.push("resource="+encodeURIComponent(n)),r.push("redirect_uri="+encodeURIComponent(t.redirectUri)),r.push("state="+encodeURIComponent(t.state)),t.hasOwnProperty("slice")&&r.push("slice="+encodeURIComponent(t.slice)),t.hasOwnProperty("extraQueryParameter")&&r.push(t.extraQueryParameter),t.correlationId&&r.push("client-request-id="+encodeURIComponent(t.correlationId))),r.join("&")},AuthenticationContext.prototype._deserialize=function(e){var t,n=/\+/g,r=/([^&=]+)=?([^&]*)/g,i=function(e){return decodeURIComponent(e.replace(n," "))},o={};for(t=r.exec(e);t;)o[i(t[1])]=i(t[2]),t=r.exec(e);return o},AuthenticationContext.prototype._guid=function(){for(var e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx",t="0123456789abcdef",n=0,r="",i=0;36>i;i++)"-"!==e[i]&&"4"!==e[i]&&(n=16*Math.random()|0),"x"===e[i]?r+=t[n]:"y"===e[i]?(n&=3,n|=8,r+=t[n]):r+=e[i];return r},AuthenticationContext.prototype._expiresIn=function(e){return this._now()+parseInt(e,10)},AuthenticationContext.prototype._now=function(){return Math.round((new Date).getTime()/1e3)},AuthenticationContext.prototype._addAdalFrame=function(e){if("undefined"!=typeof e){this.info("Add adal frame to document:"+e);var t=document.getElementById(e);if(!t){if(document.createElement&&document.documentElement&&(window.opera||-1===window.navigator.userAgent.indexOf("MSIE 5.0"))){var n=document.createElement("iframe");n.setAttribute("id",e),n.style.visibility="hidden",n.style.position="absolute",n.style.width=n.style.height=n.borderWidth="0px",t=document.getElementsByTagName("body")[0].appendChild(n)}else document.body&&document.body.insertAdjacentHTML&&document.body.insertAdjacentHTML("beforeEnd",'<iframe name="'+e+'" id="'+e+'" style="display:none"></iframe>');window.frames&&window.frames[e]&&(t=window.frames[e])}return t}},AuthenticationContext.prototype._saveItem=function(e,t){return this.config&&this.config.cacheLocation&&"localStorage"===this.config.cacheLocation?this._supportsLocalStorage()?(localStorage.setItem(e,t),!0):(this.info("Local storage is not supported"),!1):this._supportsSessionStorage()?(sessionStorage.setItem(e,t),!0):(this.info("Session storage is not supported"),!1)},AuthenticationContext.prototype._getItem=function(e){return this.config&&this.config.cacheLocation&&"localStorage"===this.config.cacheLocation?this._supportsLocalStorage()?localStorage.getItem(e):(this.info("Local storage is not supported"),null):this._supportsSessionStorage()?sessionStorage.getItem(e):(this.info("Session storage is not supported"),null)},AuthenticationContext.prototype._supportsLocalStorage=function(){try{return"localStorage"in window&&window.localStorage}catch(e){return!1}},AuthenticationContext.prototype._supportsSessionStorage=function(){try{return"sessionStorage"in window&&window.sessionStorage}catch(e){return!1}},AuthenticationContext.prototype._cloneConfig=function(e){if(null===e||"object"!=typeof e)return e;var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},AuthenticationContext.prototype._addLibMetadata=function(){return"&x-client-SKU=Js&x-client-Ver="+this._libVersion()},AuthenticationContext.prototype.log=function(e,t,n){if(e<=Logging.level){var r=this.config.correlationId,i=(new Date).toUTCString(),o=i+":"+r+"-"+this._libVersion()+"-"+this.CONSTANTS.LEVEL_STRING_MAP[e]+" "+t;n&&(o+="\nstack:\n"+n.stack),Logging.log(o)}},AuthenticationContext.prototype.error=function(e,t){this.log(this.CONSTANTS.LOGGING_LEVEL.ERROR,e,t)},AuthenticationContext.prototype.warn=function(e){this.log(this.CONSTANTS.LOGGING_LEVEL.WARN,e,null)},AuthenticationContext.prototype.info=function(e){this.log(this.CONSTANTS.LOGGING_LEVEL.INFO,e,null)},AuthenticationContext.prototype.verbose=function(e){this.log(this.CONSTANTS.LOGGING_LEVEL.VERBOSE,e,null)},AuthenticationContext.prototype._libVersion=function(){return"1.0.9"},"undefined"!=typeof module&&module.exports&&(module.exports.inject=function(e){return new AuthenticationContext(e)}),function(){if(angular){var e=angular.module("AdalAngular",[]);e.provider("adalAuthenticationService",function(){var e=null,t={isAuthenticated:!1,userName:"",loginError:"",profile:""},n=function(n){var r=e.getCachedToken(n);t.isAuthenticated=null!==r&&r.length>0;var i=e.getCachedUser()||{userName:""};t.userName=i.userName,t.profile=i.profile,t.loginError=e.getLoginError()};this.init=function(t,r){if(!t)throw new Error("You must set configOptions, when calling init");var i=window.location.hash,o=window.location.href;i&&(o=o.replace(i,"")),t.redirectUri=t.redirectUri||o,t.postLogoutRedirectUri=t.postLogoutRedirectUri||o,r&&r.interceptors&&r.interceptors.push("ProtectedResourceInterceptor"),e=new AuthenticationContext(t),n(e.config.loginResource)},this.$get=["$rootScope","$window","$q","$location","$timeout",function(r,i,o,a,s){function l(e,t){return t.requireADLogin?e.requireADLogin!==!1:!!e.requireADLogin}var u=function(){var o=i.location.hash;if(e.isCallback(o)){var l=e.getRequestInfo(o);if(e.saveTokenFromHash(l),a.$$html5?i.location=i.location.origin+i.location.pathname:i.location.hash="",l.requestType!==e.REQUEST_TYPE.LOGIN&&(e._renewActive=!1,e.callback=i.parent.AuthenticationContext().callback,l.requestType===e.REQUEST_TYPE.RENEW_TOKEN&&(e.callback=i.parent.callBackMappedToRenewStates[l.stateResponse])),l.stateMatch)if("function"==typeof e.callback){if(l.requestType===e.REQUEST_TYPE.RENEW_TOKEN){if(l.parameters.access_token)return void e.callback(e._getItem(e.CONSTANTS.STORAGE.ERROR_DESCRIPTION),l.parameters.access_token);if(l.parameters.id_token)return void e.callback(e._getItem(e.CONSTANTS.STORAGE.ERROR_DESCRIPTION),l.parameters.id_token)}}else n(e.config.loginResource),t.userName?(s(function(){n(e.config.loginResource),r.userInfo=t;var i=e._getItem(e.CONSTANTS.STORAGE.START_PAGE);if(i){var o=e._getItem(e.CONSTANTS.STORAGE.START_PAGE_PARAMS);if(o){var s=JSON.parse(o);a.url(i).search(s)}else a.url(i)}},1),r.$broadcast("adal:loginSuccess")):r.$broadcast("adal:loginFailure",e._getItem(e.CONSTANTS.STORAGE.ERROR_DESCRIPTION));else r.$broadcast("adal:stateMismatch",e._getItem(e.CONSTANTS.STORAGE.ERROR_DESCRIPTION))}else n(e.config.loginResource),e._renewActive||t.isAuthenticated||!t.userName||(e._renewActive=!0,e.acquireToken(e.config.loginResource,function(e,n){e?r.$broadcast("adal:loginFailure","auto renew failure"):n&&(t.isAuthenticated=!0)}));s(function(){n(e.config.loginResource),r.userInfo=t},1)},c=function(){e.info("Login event for:"+a.$$url),e.config&&e.config.localLoginUrl?a.path(e.config.localLoginUrl):(e._saveItem(e.CONSTANTS.STORAGE.START_PAGE,a.$$url),e.info("Start login at:"+window.location.href),r.$broadcast("adal:loginRedirect"),e.login())},p=function(n,r){r&&r.$$route&&l(r.$$route,e.config)&&(t.isAuthenticated||e._renewActive||(e.info("Route change event for:"+a.$$url),c()))},d=function(n,r,i,o,s){r&&l(r,e.config)&&(t.isAuthenticated||e._renewActive||(a.$$url=r.url,e._saveItem(e.CONSTANTS.STORAGE.START_PAGE_PARAMS,JSON.stringify(i)),e.info("State change event for:"+a.$$url),c()))};return r.$on("$routeChangeStart",p),r.$on("$stateChangeStart",d),r.$on("$locationChangeStart",u),n(e.config.loginResource),r.userInfo=t,{config:e.config,login:function(){e.login()},loginInProgress:function(){return e.loginInProgress()},logOut:function(){e.logOut()},getCachedToken:function(t){return e.getCachedToken(t)},userInfo:t,acquireToken:function(t){var n=o.defer();return e._renewActive=!0,e.acquireToken(t,function(r,i){e._renewActive=!1,r?(e.error("Error when acquiring token for resource: "+t,r),n.reject(r)):n.resolve(i)}),n.promise},getUser:function(){var t=o.defer();return e.getUser(function(n,r){n?(e.error("Error when getting user",n),t.reject(n)):t.resolve(r)}),t.promise},getResourceForEndpoint:function(t){return e.getResourceForEndpoint(t)},clearCache:function(){e.clearCache()},clearCacheForResource:function(t){e.clearCacheForResource(t)},info:function(t){e.info(t)},verbose:function(t){e.verbose(t)}}}]}),e.factory("ProtectedResourceInterceptor",["adalAuthenticationService","$q","$rootScope",function(e,t,n){return{request:function(n){if(n){n.headers=n.headers||{};var r=e.getResourceForEndpoint(n.url);if(null===r)return n;var i=e.getCachedToken(r);if(i)return e.info("Token is avaliable for this url "+n.url),n.headers.Authorization="Bearer "+i,n;if(e.loginInProgress())return e.info("login already start."),t.reject("login in progress, cancelling the request");var o=t.defer();return e.acquireToken(r).then(function(t){e.verbose("Token is avaliable"),n.headers.Authorization="Bearer "+t,o.resolve(n)},function(e){o.reject(e)}),o.promise}},responseError:function(r){if(e.info("Getting error in the response"),r){if(401===r.status){var i=e.getResourceForEndpoint(r.config.url);e.clearCacheForResource(i),n.$broadcast("adal:notAuthorized",r,i)}else n.$broadcast("adal:errorResponse",r);return t.reject(r)}}}}])}else console.error("Angular.JS is not included")}(),function(e,t){"use strict";function n(){function e(e,n){return t.extend(Object.create(e),n)}function n(e,t){var n=t.caseInsensitiveMatch,r={originalPath:e,regexp:e},i=r.keys=[];return e=e.replace(/([().])/g,"\\$1").replace(/(\/)?:(\w+)(\*\?|[\?\*])?/g,function(e,t,n,r){var o="?"===r||"*?"===r?"?":null,a="*"===r||"*?"===r?"*":null;return i.push({name:n,optional:!!o}),t=t||"",""+(o?"":t)+"(?:"+(o?t:"")+(a&&"(.+?)"||"([^/]+)")+(o||"")+")"+(o||"")}).replace(/([\/$\*])/g,"\\$1"),r.regexp=new RegExp("^"+e+"$",n?"i":""),r}var r={};this.when=function(e,i){var o=t.copy(i);if(t.isUndefined(o.reloadOnSearch)&&(o.reloadOnSearch=!0),t.isUndefined(o.caseInsensitiveMatch)&&(o.caseInsensitiveMatch=this.caseInsensitiveMatch),r[e]=t.extend(o,e&&n(e,o)),e){var a="/"==e[e.length-1]?e.substr(0,e.length-1):e+"/";r[a]=t.extend({redirectTo:e},n(a,o))}return this},this.caseInsensitiveMatch=!1,this.otherwise=function(e){return"string"==typeof e&&(e={redirectTo:e}),this.when(null,e),this},this.$get=["$rootScope","$location","$routeParams","$q","$injector","$templateRequest","$sce",function(n,i,o,a,l,u,c){function p(e,t){var n=t.keys,r={};if(!t.regexp)return null;var i=t.regexp.exec(e);if(!i)return null;for(var o=1,a=i.length;a>o;++o){var s=n[o-1],l=i[o];s&&l&&(r[s.name]=l)}return r}function d(e){var r=$.current;m=f(),v=m&&r&&m.$$route===r.$$route&&t.equals(m.pathParams,r.pathParams)&&!m.reloadOnSearch&&!y,v||!r&&!m||n.$broadcast("$routeChangeStart",m,r).defaultPrevented&&e&&e.preventDefault()}function h(){var e=$.current,r=m;v?(e.params=r.params,t.copy(e.params,o),n.$broadcast("$routeUpdate",e)):(r||e)&&(y=!1,$.current=r,r&&r.redirectTo&&(t.isString(r.redirectTo)?i.path(g(r.redirectTo,r.params)).search(r.params).replace():i.url(r.redirectTo(r.pathParams,i.path(),i.search())).replace()),a.when(r).then(function(){if(r){var e,n,i=t.extend({},r.resolve);return t.forEach(i,function(e,n){i[n]=t.isString(e)?l.get(e):l.invoke(e,null,null,n)}),t.isDefined(e=r.template)?t.isFunction(e)&&(e=e(r.params)):t.isDefined(n=r.templateUrl)&&(t.isFunction(n)&&(n=n(r.params)),t.isDefined(n)&&(r.loadedTemplateUrl=c.valueOf(n),e=u(n))),t.isDefined(e)&&(i.$template=e),a.all(i)}}).then(function(i){r==$.current&&(r&&(r.locals=i,t.copy(r.params,o)),n.$broadcast("$routeChangeSuccess",r,e))},function(t){r==$.current&&n.$broadcast("$routeChangeError",r,e,t)}))}function f(){var n,o;return t.forEach(r,function(r,a){!o&&(n=p(i.path(),r))&&(o=e(r,{params:t.extend({},i.search(),n),pathParams:n}),o.$$route=r)}),o||r[null]&&e(r[null],{params:{},pathParams:{}})}function g(e,n){var r=[];return t.forEach((e||"").split(":"),function(e,t){if(0===t)r.push(e);else{var i=e.match(/(\w+)(?:[?*])?(.*)/),o=i[1];r.push(n[o]),r.push(i[2]||""),delete n[o]}}),r.join("")}var m,v,y=!1,$={routes:r,reload:function(){y=!0;var e={defaultPrevented:!1,preventDefault:function(){this.defaultPrevented=!0,y=!1}};n.$evalAsync(function(){d(e),e.defaultPrevented||h()})},updateParams:function(e){if(!this.current||!this.current.$$route)throw s("norout","Tried updating route when with no current route");e=t.extend({},this.current.params,e),i.path(g(this.current.$$route.originalPath,e)),i.search(e)}};return n.$on("$locationChangeStart",d),n.$on("$locationChangeSuccess",h),$}]}function r(){this.$get=function(){return{}}}function i(e,n,r){return{restrict:"ECA",terminal:!0,priority:400,transclude:"element",link:function(i,o,a,s,l){function u(){h&&(r.cancel(h),h=null),p&&(p.$destroy(),p=null),d&&(h=r.leave(d),h.then(function(){h=null}),d=null)}function c(){var a=e.current&&e.current.locals,s=a&&a.$template;if(t.isDefined(s)){var c=i.$new(),h=e.current,m=l(c,function(e){r.enter(e,null,d||o).then(function(){!t.isDefined(f)||f&&!i.$eval(f)||n()}),u()});d=m,p=h.scope=c,p.$emit("$viewContentLoaded"),p.$eval(g)}else u()}var p,d,h,f=a.autoscroll,g=a.onload||"";i.$on("$routeChangeSuccess",c),c()}}}function o(e,t,n){return{restrict:"ECA",priority:-400,link:function(r,i){var o=n.current,a=o.locals;i.html(a.$template);var s=e(i.contents());if(o.controller){a.$scope=r;var l=t(o.controller,a);o.controllerAs&&(r[o.controllerAs]=l),i.data("$ngControllerController",l),i.children().data("$ngControllerController",l)}r[o.resolveAs||"$resolve"]=a,s(r)}}}var a=t.module("ngRoute",["ng"]).provider("$route",n),s=t.$$minErr("ngRoute");a.provider("$routeParams",r),a.directive("ngView",i),a.directive("ngView",o),i.$inject=["$route","$anchorScroll","$animate"],o.$inject=["$compile","$controller","$route"]}(window,window.angular);var requirejs,require,define;!function(global){function commentReplace(e,t,n,r){return r||""}function isFunction(e){return"[object Function]"===ostring.call(e)}function isArray(e){return"[object Array]"===ostring.call(e)}function each(e,t){if(e){var n;for(n=0;n<e.length&&(!e[n]||!t(e[n],n,e));n+=1);}}function eachReverse(e,t){if(e){var n;for(n=e.length-1;n>-1&&(!e[n]||!t(e[n],n,e));n-=1);}}function hasProp(e,t){return hasOwn.call(e,t)}function getOwn(e,t){return hasProp(e,t)&&e[t]}function eachProp(e,t){var n;for(n in e)if(hasProp(e,n)&&t(e[n],n))break}function mixin(e,t,n,r){return t&&eachProp(t,function(t,i){!n&&hasProp(e,i)||(!r||"object"!=typeof t||!t||isArray(t)||isFunction(t)||t instanceof RegExp?e[i]=t:(e[i]||(e[i]={}),mixin(e[i],t,n,r)))}),e}function bind(e,t){return function(){return t.apply(e,arguments)}}function scripts(){return document.getElementsByTagName("script")}function defaultOnError(e){throw e}function getGlobal(e){if(!e)return e;var t=global;return each(e.split("."),function(e){t=t[e]}),t}function makeError(e,t,n,r){var i=new Error(t+"\nhttp://requirejs.org/docs/errors.html#"+e);return i.requireType=e,i.requireModules=r,n&&(i.originalError=n),i}function newContext(e){function t(e){var t,n;for(t=0;t<e.length;t++)if(n=e[t],"."===n)e.splice(t,1),t-=1;else if(".."===n){if(0===t||1===t&&".."===e[2]||".."===e[t-1])continue;t>0&&(e.splice(t-1,2),t-=2)}}function n(e,n,r){var i,o,a,s,l,u,c,p,d,h,f,g,m=n&&n.split("/"),v=E.map,y=v&&v["*"];if(e&&(e=e.split("/"),c=e.length-1,E.nodeIdCompat&&jsSuffixRegExp.test(e[c])&&(e[c]=e[c].replace(jsSuffixRegExp,"")),"."===e[0].charAt(0)&&m&&(g=m.slice(0,m.length-1),e=g.concat(e)),t(e),e=e.join("/")),r&&v&&(m||y)){a=e.split("/");e:for(s=a.length;s>0;s-=1){if(u=a.slice(0,s).join("/"),m)for(l=m.length;l>0;l-=1)if(o=getOwn(v,m.slice(0,l).join("/")),o&&(o=getOwn(o,u))){p=o,d=s;break e}!h&&y&&getOwn(y,u)&&(h=getOwn(y,u),f=s)}!p&&h&&(p=h,d=f),p&&(a.splice(0,d,p),e=a.join("/"))}return i=getOwn(E.pkgs,e),i?i:e}function r(e){isBrowser&&each(scripts(),function(t){return t.getAttribute("data-requiremodule")===e&&t.getAttribute("data-requirecontext")===b.contextName?(t.parentNode.removeChild(t),!0):void 0})}function i(e){var t=getOwn(E.paths,e);return t&&isArray(t)&&t.length>1?(t.shift(),b.require.undef(e),b.makeRequire(null,{skipMap:!0})([e]),!0):void 0}function o(e){var t,n=e?e.indexOf("!"):-1;return n>-1&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function a(e,t,r,i){var a,s,l,u,c=null,p=t?t.name:null,d=e,h=!0,f="";return e||(h=!1,e="_@r"+(I+=1)),u=o(e),c=u[0],e=u[1],c&&(c=n(c,p,i),s=getOwn(N,c)),e&&(c?f=s&&s.normalize?s.normalize(e,function(e){return n(e,p,i)}):-1===e.indexOf("!")?n(e,p,i):e:(f=n(e,p,i),u=o(f),c=u[0],f=u[1],r=!0,a=b.nameToUrl(f))),l=!c||s||r?"":"_unnormalized"+(k+=1),{prefix:c,name:f,parentMap:t,unnormalized:!!l,url:a,originalName:d,isDefine:h,id:(c?c+"!"+f:f)+l}}function s(e){var t=e.id,n=getOwn(C,t);return n||(n=C[t]=new b.Module(e)),n}function l(e,t,n){var r=e.id,i=getOwn(C,r);!hasProp(N,r)||i&&!i.defineEmitComplete?(i=s(e),i.error&&"error"===t?n(i.error):i.on(t,n)):"defined"===t&&n(N[r])}function u(e,t){var n=e.requireModules,r=!1;t?t(e):(each(n,function(t){var n=getOwn(C,t);n&&(n.error=e,n.events.error&&(r=!0,n.emit("error",e)))}),r||req.onError(e))}function c(){globalDefQueue.length&&(each(globalDefQueue,function(e){var t=e[0];"string"==typeof t&&(b.defQueueMap[t]=!0),A.push(e)}),globalDefQueue=[])}function p(e){delete C[e],delete S[e]}function d(e,t,n){var r=e.map.id;e.error?e.emit("error",e.error):(t[r]=!0,each(e.depMaps,function(r,i){var o=r.id,a=getOwn(C,o);!a||e.depMatched[i]||n[o]||(getOwn(t,o)?(e.defineDep(i,N[o]),e.check()):d(a,t,n))}),n[r]=!0)}function h(){var e,t,n=1e3*E.waitSeconds,o=n&&b.startTime+n<(new Date).getTime(),a=[],s=[],l=!1,c=!0;if(!y){if(y=!0,eachProp(S,function(e){var n=e.map,u=n.id;if(e.enabled&&(n.isDefine||s.push(e),!e.error))if(!e.inited&&o)i(u)?(t=!0,l=!0):(a.push(u),r(u));else if(!e.inited&&e.fetched&&n.isDefine&&(l=!0,!n.prefix))return c=!1}),o&&a.length)return e=makeError("timeout","Load timeout for modules: "+a,null,a),e.contextName=b.contextName,u(e);c&&each(s,function(e){d(e,{},{})}),o&&!t||!l||!isBrowser&&!isWebWorker||x||(x=setTimeout(function(){x=0,h()},50)),y=!1}}function f(e){hasProp(N,e[0])||s(a(e[0],null,!0)).init(e[1],e[2])}function g(e,t,n,r){e.detachEvent&&!isOpera?r&&e.detachEvent(r,t):e.removeEventListener(n,t,!1)}function m(e){var t=e.currentTarget||e.srcElement;return g(t,b.onScriptLoad,"load","onreadystatechange"),g(t,b.onScriptError,"error"),{node:t,id:t&&t.getAttribute("data-requiremodule")}}function v(){var e;for(c();A.length;){if(e=A.shift(),null===e[0])return u(makeError("mismatch","Mismatched anonymous define() module: "+e[e.length-1]));f(e)}b.defQueueMap={}}var y,$,b,w,x,E={waitSeconds:7,baseUrl:"./",paths:{},bundles:{},pkgs:{},shim:{},config:{}},C={},S={},T={},A=[],N={},L={},O={},I=1,k=1;return w={require:function(e){return e.require?e.require:e.require=b.makeRequire(e.map)},exports:function(e){return e.usingExports=!0,e.map.isDefine?e.exports?N[e.map.id]=e.exports:e.exports=N[e.map.id]={}:void 0},module:function(e){return e.module?e.module:e.module={id:e.map.id,uri:e.map.url,config:function(){return getOwn(E.config,e.map.id)||{}},exports:e.exports||(e.exports={})}}},$=function(e){this.events=getOwn(T,e.id)||{},this.map=e,this.shim=getOwn(E.shim,e.id),this.depExports=[],this.depMaps=[],this.depMatched=[],this.pluginMaps={},this.depCount=0},$.prototype={init:function(e,t,n,r){r=r||{},this.inited||(this.factory=t,n?this.on("error",n):this.events.error&&(n=bind(this,function(e){this.emit("error",e)})),this.depMaps=e&&e.slice(0),this.errback=n,this.inited=!0,this.ignore=r.ignore,r.enabled||this.enabled?this.enable():this.check())},defineDep:function(e,t){this.depMatched[e]||(this.depMatched[e]=!0,this.depCount-=1,this.depExports[e]=t)},fetch:function(){if(!this.fetched){this.fetched=!0,b.startTime=(new Date).getTime();var e=this.map;return this.shim?void b.makeRequire(this.map,{enableBuildCallback:!0})(this.shim.deps||[],bind(this,function(){return e.prefix?this.callPlugin():this.load()})):e.prefix?this.callPlugin():this.load()}},load:function(){var e=this.map.url;L[e]||(L[e]=!0,b.load(this.map.id,e))},check:function(){if(this.enabled&&!this.enabling){var e,t,n=this.map.id,r=this.depExports,i=this.exports,o=this.factory;if(this.inited){if(this.error)this.emit("error",this.error);else if(!this.defining){if(this.defining=!0,this.depCount<1&&!this.defined){if(isFunction(o)){if(this.events.error&&this.map.isDefine||req.onError!==defaultOnError)try{i=b.execCb(n,o,r,i)}catch(a){e=a}else i=b.execCb(n,o,r,i);if(this.map.isDefine&&void 0===i&&(t=this.module,t?i=t.exports:this.usingExports&&(i=this.exports)),e)return e.requireMap=this.map,e.requireModules=this.map.isDefine?[this.map.id]:null,e.requireType=this.map.isDefine?"define":"require",u(this.error=e)}else i=o;if(this.exports=i,this.map.isDefine&&!this.ignore&&(N[n]=i,req.onResourceLoad)){var s=[];each(this.depMaps,function(e){s.push(e.normalizedMap||e)}),req.onResourceLoad(b,this.map,s)}p(n),this.defined=!0}this.defining=!1,this.defined&&!this.defineEmitted&&(this.defineEmitted=!0,this.emit("defined",this.exports),this.defineEmitComplete=!0)}}else hasProp(b.defQueueMap,n)||this.fetch()}},callPlugin:function(){var e=this.map,t=e.id,r=a(e.prefix);this.depMaps.push(r),l(r,"defined",bind(this,function(r){var i,o,c,d=getOwn(O,this.map.id),h=this.map.name,f=this.map.parentMap?this.map.parentMap.name:null,g=b.makeRequire(e.parentMap,{enableBuildCallback:!0});return this.map.unnormalized?(r.normalize&&(h=r.normalize(h,function(e){return n(e,f,!0)})||""),o=a(e.prefix+"!"+h,this.map.parentMap),l(o,"defined",bind(this,function(e){this.map.normalizedMap=o,this.init([],function(){return e},null,{enabled:!0,ignore:!0})})),c=getOwn(C,o.id),void(c&&(this.depMaps.push(o),this.events.error&&c.on("error",bind(this,function(e){this.emit("error",e)})),c.enable()))):d?(this.map.url=b.nameToUrl(d),void this.load()):(i=bind(this,function(e){this.init([],function(){return e},null,{enabled:!0})}),i.error=bind(this,function(e){this.inited=!0,this.error=e,e.requireModules=[t],eachProp(C,function(e){0===e.map.id.indexOf(t+"_unnormalized")&&p(e.map.id)}),u(e)}),i.fromText=bind(this,function(n,r){var o=e.name,l=a(o),c=useInteractive;r&&(n=r),c&&(useInteractive=!1),s(l),hasProp(E.config,t)&&(E.config[o]=E.config[t]);try{req.exec(n)}catch(p){return u(makeError("fromtexteval","fromText eval for "+t+" failed: "+p,p,[t]))}c&&(useInteractive=!0),this.depMaps.push(l),b.completeLoad(o),g([o],i)}),void r.load(e.name,g,i,E))})),b.enable(r,this),this.pluginMaps[r.id]=r},enable:function(){S[this.map.id]=this,this.enabled=!0,this.enabling=!0,each(this.depMaps,bind(this,function(e,t){var n,r,i;if("string"==typeof e){if(e=a(e,this.map.isDefine?this.map:this.map.parentMap,!1,!this.skipMap),this.depMaps[t]=e,i=getOwn(w,e.id))return void(this.depExports[t]=i(this));this.depCount+=1,l(e,"defined",bind(this,function(e){this.undefed||(this.defineDep(t,e),this.check())})),this.errback?l(e,"error",bind(this,this.errback)):this.events.error&&l(e,"error",bind(this,function(e){this.emit("error",e)}))}n=e.id,r=C[n],hasProp(w,n)||!r||r.enabled||b.enable(e,this)})),eachProp(this.pluginMaps,bind(this,function(e){var t=getOwn(C,e.id);t&&!t.enabled&&b.enable(e,this)})),this.enabling=!1,this.check()},on:function(e,t){var n=this.events[e];n||(n=this.events[e]=[]),n.push(t)},emit:function(e,t){each(this.events[e],function(e){e(t)}),"error"===e&&delete this.events[e]}},b={config:E,contextName:e,registry:C,defined:N,urlFetched:L,defQueue:A,defQueueMap:{},Module:$,makeModuleMap:a,nextTick:req.nextTick,onError:u,configure:function(e){if(e.baseUrl&&"/"!==e.baseUrl.charAt(e.baseUrl.length-1)&&(e.baseUrl+="/"),"string"==typeof e.urlArgs){var t=e.urlArgs;e.urlArgs=function(e,n){return(-1===n.indexOf("?")?"?":"&")+t}}var n=E.shim,r={paths:!0,bundles:!0,config:!0,map:!0};eachProp(e,function(e,t){r[t]?(E[t]||(E[t]={}),mixin(E[t],e,!0,!0)):E[t]=e}),e.bundles&&eachProp(e.bundles,function(e,t){each(e,function(e){e!==t&&(O[e]=t)})}),e.shim&&(eachProp(e.shim,function(e,t){isArray(e)&&(e={deps:e}),!e.exports&&!e.init||e.exportsFn||(e.exportsFn=b.makeShimExports(e)),n[t]=e}),E.shim=n),e.packages&&each(e.packages,function(e){var t,n;e="string"==typeof e?{name:e}:e,n=e.name,t=e.location,t&&(E.paths[n]=e.location),E.pkgs[n]=e.name+"/"+(e.main||"main").replace(currDirRegExp,"").replace(jsSuffixRegExp,"")}),eachProp(C,function(e,t){e.inited||e.map.unnormalized||(e.map=a(t,null,!0))}),(e.deps||e.callback)&&b.require(e.deps||[],e.callback)},makeShimExports:function(e){function t(){var t;return e.init&&(t=e.init.apply(global,arguments)),t||e.exports&&getGlobal(e.exports)}return t},makeRequire:function(t,i){function o(n,r,l){var c,p,d;return i.enableBuildCallback&&r&&isFunction(r)&&(r.__requireJsBuild=!0),"string"==typeof n?isFunction(r)?u(makeError("requireargs","Invalid require call"),l):t&&hasProp(w,n)?w[n](C[t.id]):req.get?req.get(b,n,t,o):(p=a(n,t,!1,!0),c=p.id,hasProp(N,c)?N[c]:u(makeError("notloaded",'Module name "'+c+'" has not been loaded yet for context: '+e+(t?"":". Use require([])")))):(v(),b.nextTick(function(){v(),d=s(a(null,t)),d.skipMap=i.skipMap,d.init(n,r,l,{enabled:!0}),h()}),o)}return i=i||{},mixin(o,{isBrowser:isBrowser,toUrl:function(e){var r,i=e.lastIndexOf("."),o=e.split("/")[0],a="."===o||".."===o;return-1!==i&&(!a||i>1)&&(r=e.substring(i,e.length),e=e.substring(0,i)),b.nameToUrl(n(e,t&&t.id,!0),r,!0)},defined:function(e){return hasProp(N,a(e,t,!1,!0).id)},specified:function(e){return e=a(e,t,!1,!0).id,hasProp(N,e)||hasProp(C,e)}}),t||(o.undef=function(e){c();var n=a(e,t,!0),i=getOwn(C,e);i.undefed=!0,r(e),delete N[e],delete L[n.url],delete T[e],eachReverse(A,function(t,n){t[0]===e&&A.splice(n,1)}),delete b.defQueueMap[e],i&&(i.events.defined&&(T[e]=i.events),p(e))}),o},enable:function(e){var t=getOwn(C,e.id);t&&s(e).enable()},completeLoad:function(e){var t,n,r,o=getOwn(E.shim,e)||{},a=o.exports;for(c();A.length;){if(n=A.shift(),null===n[0]){if(n[0]=e,t)break;t=!0}else n[0]===e&&(t=!0);f(n)}if(b.defQueueMap={},r=getOwn(C,e),!t&&!hasProp(N,e)&&r&&!r.inited){if(!(!E.enforceDefine||a&&getGlobal(a)))return i(e)?void 0:u(makeError("nodefine","No define call for "+e,null,[e]));f([e,o.deps||[],o.exportsFn])}h()},nameToUrl:function(e,t,n){var r,i,o,a,s,l,u,c=getOwn(E.pkgs,e);if(c&&(e=c),u=getOwn(O,e))return b.nameToUrl(u,t,n);if(req.jsExtRegExp.test(e))s=e+(t||"");else{for(r=E.paths,i=e.split("/"),o=i.length;o>0;o-=1)if(a=i.slice(0,o).join("/"),l=getOwn(r,a)){isArray(l)&&(l=l[0]),i.splice(0,o,l);break}s=i.join("/"),s+=t||(/^data\:|^blob\:|\?/.test(s)||n?"":".js"),s=("/"===s.charAt(0)||s.match(/^[\w\+\.\-]+:/)?"":E.baseUrl)+s}return E.urlArgs&&!/^blob\:/.test(s)?s+E.urlArgs(e,s):s},load:function(e,t){req.load(b,e,t)},execCb:function(e,t,n,r){return t.apply(r,n)},onScriptLoad:function(e){if("load"===e.type||readyRegExp.test((e.currentTarget||e.srcElement).readyState)){interactiveScript=null;var t=m(e);b.completeLoad(t.id)}},onScriptError:function(e){var t=m(e);if(!i(t.id)){var n=[];return eachProp(C,function(e,r){0!==r.indexOf("_@r")&&each(e.depMaps,function(e){return e.id===t.id?(n.push(r),!0):void 0})}),u(makeError("scripterror",'Script error for "'+t.id+(n.length?'", needed by: '+n.join(", "):'"'),e,[t.id]))}}},b.require=b.makeRequire(),b}function getInteractiveScript(){return interactiveScript&&"interactive"===interactiveScript.readyState?interactiveScript:(eachReverse(scripts(),function(e){return"interactive"===e.readyState?interactiveScript=e:void 0}),interactiveScript)}var req,s,head,baseElement,dataMain,src,interactiveScript,currentlyAddingScript,mainScript,subPath,version="2.2.0",commentRegExp=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,cjsRequireRegExp=/[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,jsSuffixRegExp=/\.js$/,currDirRegExp=/^\.\//,op=Object.prototype,ostring=op.toString,hasOwn=op.hasOwnProperty,isBrowser=!("undefined"==typeof window||"undefined"==typeof navigator||!window.document),isWebWorker=!isBrowser&&"undefined"!=typeof importScripts,readyRegExp=isBrowser&&"PLAYSTATION 3"===navigator.platform?/^complete$/:/^(complete|loaded)$/,defContextName="_",isOpera="undefined"!=typeof opera&&"[object Opera]"===opera.toString(),contexts={},cfg={},globalDefQueue=[],useInteractive=!1;if("undefined"==typeof define){if("undefined"!=typeof requirejs){if(isFunction(requirejs))return;cfg=requirejs,requirejs=void 0}"undefined"==typeof require||isFunction(require)||(cfg=require,require=void 0),req=requirejs=function(e,t,n,r){var i,o,a=defContextName;return isArray(e)||"string"==typeof e||(o=e,isArray(t)?(e=t,t=n,n=r):e=[]),o&&o.context&&(a=o.context),i=getOwn(contexts,a),i||(i=contexts[a]=req.s.newContext(a)),o&&i.configure(o),i.require(e,t,n)},req.config=function(e){return req(e)},req.nextTick="undefined"!=typeof setTimeout?function(e){setTimeout(e,4)}:function(e){e()},require||(require=req),req.version=version,req.jsExtRegExp=/^\/|:|\?|\.js$/,
req.isBrowser=isBrowser,s=req.s={contexts:contexts,newContext:newContext},req({}),each(["toUrl","undef","defined","specified"],function(e){req[e]=function(){var t=contexts[defContextName];return t.require[e].apply(t,arguments)}}),isBrowser&&(head=s.head=document.getElementsByTagName("head")[0],baseElement=document.getElementsByTagName("base")[0],baseElement&&(head=s.head=baseElement.parentNode)),req.onError=defaultOnError,req.createNode=function(e,t,n){var r=e.xhtml?document.createElementNS("http://www.w3.org/1999/xhtml","html:script"):document.createElement("script");return r.type=e.scriptType||"text/javascript",r.charset="utf-8",r.async=!0,r},req.load=function(e,t,n){var r,i=e&&e.config||{};if(isBrowser)return r=req.createNode(i,t,n),r.setAttribute("data-requirecontext",e.contextName),r.setAttribute("data-requiremodule",t),!r.attachEvent||r.attachEvent.toString&&r.attachEvent.toString().indexOf("[native code")<0||isOpera?(r.addEventListener("load",e.onScriptLoad,!1),r.addEventListener("error",e.onScriptError,!1)):(useInteractive=!0,r.attachEvent("onreadystatechange",e.onScriptLoad)),r.src=n,i.onNodeCreated&&i.onNodeCreated(r,i,t,n),currentlyAddingScript=r,baseElement?head.insertBefore(r,baseElement):head.appendChild(r),currentlyAddingScript=null,r;if(isWebWorker)try{setTimeout(function(){},0),importScripts(n),e.completeLoad(t)}catch(o){e.onError(makeError("importscripts","importScripts failed for "+t+" at "+n,o,[t]))}},isBrowser&&!cfg.skipDataMain&&eachReverse(scripts(),function(e){return head||(head=e.parentNode),dataMain=e.getAttribute("data-main"),dataMain?(mainScript=dataMain,cfg.baseUrl||-1!==mainScript.indexOf("!")||(src=mainScript.split("/"),mainScript=src.pop(),subPath=src.length?src.join("/")+"/":"./",cfg.baseUrl=subPath),mainScript=mainScript.replace(jsSuffixRegExp,""),req.jsExtRegExp.test(mainScript)&&(mainScript=dataMain),cfg.deps=cfg.deps?cfg.deps.concat(mainScript):[mainScript],!0):void 0}),define=function(e,t,n){var r,i;"string"!=typeof e&&(n=t,t=e,e=null),isArray(t)||(n=t,t=null),!t&&isFunction(n)&&(t=[],n.length&&(n.toString().replace(commentRegExp,commentReplace).replace(cjsRequireRegExp,function(e,n){t.push(n)}),t=(1===n.length?["require"]:["require","exports","module"]).concat(t))),useInteractive&&(r=currentlyAddingScript||getInteractiveScript(),r&&(e||(e=r.getAttribute("data-requiremodule")),i=contexts[r.getAttribute("data-requirecontext")])),i?(i.defQueue.push([e,t,n]),i.defQueueMap[e]=!0):globalDefQueue.push([e,t,n])},define.amd={jQuery:!0},req.exec=function(text){return eval(text)},req(cfg)}}(this),define(function(){"use strict";function e(e){var t;for(t=0;t<e.length;t+=1)e[t](u)}function t(){var t=c;l&&t.length&&(c=[],e(t))}function n(){l||(l=!0,a&&clearInterval(a),t())}function r(e){return l?e(u):c.push(e),r}var i,o,a,s="undefined"!=typeof window&&window.document,l=!s,u=s?document:null,c=[];if(s){if(document.addEventListener)document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1);else if(window.attachEvent){window.attachEvent("onload",n),o=document.createElement("div");try{i=null===window.frameElement}catch(p){}o.doScroll&&i&&window.external&&(a=setInterval(function(){try{o.doScroll(),n()}catch(e){}},30))}"complete"===document.readyState&&n()}return r.version="2.0.1",r.load=function(e,t,n,i){i.isBuild?n(null):r(n)},r}),define(function(){if("undefined"==typeof window)return{load:function(e,t,n){n()}};var e=document.getElementsByTagName("head")[0],t=window.navigator.userAgent.match(/Trident\/([^ ;]*)|AppleWebKit\/([^ ;]*)|Opera\/([^ ;]*)|rv\:([^ ;]*)(.*?)Gecko\/([^ ;]*)|MSIE\s([^ ;]*)|AndroidWebKit\/([^ ;]*)/)||0,n=!1,r=!0;t[1]||t[7]?n=parseInt(t[1])<6||parseInt(t[7])<=9:t[2]||t[8]?r=!1:t[4]&&(n=parseInt(t[4])<18);var i={};i.pluginBuilder="./css-builder";var o,a,s,l=function(){o=document.createElement("style"),e.appendChild(o),a=o.styleSheet||o.sheet},u=0,c=[],p=function(e){a.addImport(e),o.onload=function(){d()},u++,31==u&&(l(),u=0)},d=function(){s();var e=c.shift();return e?(s=e[1],void p(e[0])):void(s=null)},h=function(e,t){if(a&&a.addImport||l(),a&&a.addImport)s?c.push([e,t]):(p(e),s=t);else{o.textContent='@import "'+e+'";';var n=setInterval(function(){try{o.sheet.cssRules,clearInterval(n),t()}catch(e){}},10)}},f=function(t,n){var i=document.createElement("link");if(i.type="text/css",i.rel="stylesheet",r)i.onload=function(){i.onload=function(){},setTimeout(n,7)};else var o=setInterval(function(){for(var e=0;e<document.styleSheets.length;e++){var t=document.styleSheets[e];if(t.href==i.href)return clearInterval(o),n()}},10);i.href=t,e.appendChild(i)};return i.normalize=function(e,t){return".css"==e.substr(e.length-4,4)&&(e=e.substr(0,e.length-4)),t(e)},i.load=function(e,t,r,i){(n?h:f)(t.toUrl(e+".css"),r)},i}),define(["require","./normalize"],function(e,t){function n(e){if("none"==d.optimizeCss)return e;if("undefined"!=typeof process&&process.versions&&process.versions.node&&require.nodeRequire){try{var t=require.nodeRequire("csso")}catch(n){return console.log('Compression module not installed. Use "npm install csso -g" to enable.'),e}var r=e.length;try{e=t.justDoIt(e)}catch(n){return console.log("Compression failed due to a CSS syntax error."),e}return console.log("Compressed CSS output to "+Math.round(e.length/r*100)+"%."),e}return console.log("Compression not supported outside of nodejs environments."),e}function r(e){if("undefined"!=typeof process&&process.versions&&process.versions.node&&require.nodeRequire){var t=require.nodeRequire("fs"),n=t.readFileSync(e,"utf8");return 0===n.indexOf("\ufeff")?n.substring(1):n}var r,i,n=new java.io.File(e),o=java.lang.System.getProperty("line.separator"),a=new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(n),"utf-8"));try{for(r=new java.lang.StringBuffer,i=a.readLine(),i&&i.length()&&65279===i.charAt(0)&&(i=i.substring(1)),r.append(i);null!==(i=a.readLine());)r.append(o).append(i);return String(r.toString())}finally{a.close()}}function i(e,t){if("undefined"!=typeof process&&process.versions&&process.versions.node&&require.nodeRequire){var n=require.nodeRequire("fs");n.writeFileSync(e,t,"utf8")}else{var r=new java.lang.String(t),i=new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(e),"utf-8"));try{i.write(r,0,r.length()),i.flush()}finally{i.close()}}}function o(e){return e.replace(/(["'\\])/g,"\\$1").replace(/[\f]/g,"\\f").replace(/[\b]/g,"\\b").replace(/[\n]/g,"\\n").replace(/[\t]/g,"\\t").replace(/[\r]/g,"\\r")}var a,s={},l=!!process.platform.match(/^win/),u=/^([^\:\/]+:\/)?\//,c="define('@writecss', function() {return function writeCss(c) {var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));};});",p=e.toUrl("base_url").split("/");p[p.length-1]="";var d,h=p.join("/"),f=!0,g=[],m={};return s.load=function(e,n,i,o){if(d=d||o,a||(a=path.resolve(d.dir||path.dirname(d.out),d.siteRoot||".")+"/",l&&(a=a.replace(/\\/g,"/"))),e.match(u))return i();var s=n.toUrl(e+".css");l&&(s=s.replace(/\\/g,"/"));var c=s;if(c.indexOf(h)<0){var p=n.toUrl(d.appDir);l&&(p=p.replace(/\\/g,"/")),0==c.indexOf(p)&&(c=a+c.substring(p.length))}m[e]=t(r(s),c,a),i()},s.normalize=function(e,t){return".css"==e.substr(e.length-4,4)&&(e=e.substr(0,e.length-4)),t(e)},s.write=function(e,t,r,i){var a;if(!t.match(u)&&(g.push(m[t]),global._requirejsCssData?global._requirejsCssData.usedBy.css=!0:global._requirejsCssData={usedBy:{css:!0},css:""},0!=d.buildCSS)){var s=m[t];d.writeCSSModule&&s?(f&&(f=!1,r(c)),a='define(["@writecss"], function(writeCss){\n writeCss("'+o(n(s))+'");\n})'):a="define(function(){})",r.asModule(e+"!"+t,a)}},s.onLayerEnd=function(e,t){if(d.separateCSS&&d.IESelectorLimit)throw"RequireCSS: separateCSS option is not compatible with ensuring the IE selector limit";if(d.separateCSS){var r=t.path.replace(/(\.js)?$/,".css");console.log("Writing CSS! file: "+r+"\n");var a=g.join("");process.nextTick(function(){global._requirejsCssData&&(a=global._requirejsCssData.css=a+global._requirejsCssData.css,delete global._requirejsCssData.usedBy.css,0===Object.keys(global._requirejsCssData.usedBy).length&&delete global._requirejsCssData),i(r,n(a))})}else if(0!=d.buildCSS&&1!=d.writeCSSModule)for(var s=d.IESelectorLimit?g:[g.join("")],l=0;l<s.length;l++){if(""==s[l])return;e("(function(c){var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));})\n('"+o(n(s[l]))+"');\n")}g=[],f=!0},s}),define(function(){function e(e,r,i){if(e.match(s)||e.match(a))return e;e=o(e);var l=i.match(a),u=r.match(a);return!u||l&&l[1]==u[1]&&l[2]==u[2]?n(t(e,r),i):t(e,r)}function t(e,t){if("./"==e.substr(0,2)&&(e=e.substr(2)),e.match(s)||e.match(a))return e;var n=t.split("/"),r=e.split("/");for(n.pop();curPart=r.shift();)".."==curPart?n.pop():n.push(curPart);return n.join("/")}function n(e,t){var n=t.split("/");for(n.pop(),t=n.join("/")+"/",i=0;t.substr(i,1)==e.substr(i,1);)i++;for(;"/"!=t.substr(i,1);)i--;t=t.substr(i+1),e=e.substr(i+1),n=t.split("/");var r=e.split("/");for(out="";n.shift();)out+="../";for(;curPart=r.shift();)out+=curPart+"/";return out.substr(0,out.length-1)}var r=/([^:])\/+/g,o=function(e){return e.replace(r,"$1/")},a=/[^\:\/]*:\/\/([^\/])*/,s=/^(\/|data:)/,l=function(t,n,r){n=o(n),r=o(r);for(var i,a,t,s=/@import\s*("([^"]*)"|'([^']*)')|url\s*\((?!#)\s*(\s*"([^"]*)"|'([^']*)'|[^\)]*\s*)\s*\)/gi;i=s.exec(t);){a=i[3]||i[2]||i[5]||i[6]||i[4];var l;l=e(a,n,r);var u=i[5]||i[6]?1:0;t=t.substr(0,s.lastIndex-a.length-u-1)+l+t.substr(s.lastIndex-u-1),s.lastIndex=s.lastIndex+(l.length-a.length)}return t};return l.convertURIBase=e,l.absoluteURI=t,l.relativeURI=n,l}),function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=!!e&&"length"in e&&e.length,n=oe.type(e);return"function"===n||oe.isWindow(e)?!1:"array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e}function r(e,t,n){if(oe.isFunction(t))return oe.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return oe.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(ge.test(t))return oe.filter(t,e,n);t=oe.filter(t,e)}return oe.grep(e,function(e){return Z.call(t,e)>-1!==n})}function i(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t={};return oe.each(e.match(we)||[],function(e,n){t[n]=!0}),t}function a(){Y.removeEventListener("DOMContentLoaded",a),e.removeEventListener("load",a),oe.ready()}function s(){this.expando=oe.expando+s.uid++}function l(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Ne,"-$&").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:Ae.test(n)?oe.parseJSON(n):n}catch(i){}Te.set(e,t,n)}else n=void 0;return n}function u(e,t,n,r){var i,o=1,a=20,s=r?function(){return r.cur()}:function(){return oe.css(e,t,"")},l=s(),u=n&&n[3]||(oe.cssNumber[t]?"":"px"),c=(oe.cssNumber[t]||"px"!==u&&+l)&&Oe.exec(oe.css(e,t));if(c&&c[3]!==u){u=u||c[3],n=n||[],c=+l||1;do o=o||".5",c/=o,oe.style(e,t,c+u);while(o!==(o=s()/l)&&1!==o&&--a)}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}function c(e,t){var n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&oe.nodeName(e,t)?oe.merge([e],n):n}function p(e,t){for(var n=0,r=e.length;r>n;n++)Se.set(e[n],"globalEval",!t||Se.get(t[n],"globalEval"))}function d(e,t,n,r,i){for(var o,a,s,l,u,d,h=t.createDocumentFragment(),f=[],g=0,m=e.length;m>g;g++)if(o=e[g],o||0===o)if("object"===oe.type(o))oe.merge(f,o.nodeType?[o]:o);else if(je.test(o)){for(a=a||h.appendChild(t.createElement("div")),s=(Me.exec(o)||["",""])[1].toLowerCase(),l=De[s]||De._default,a.innerHTML=l[1]+oe.htmlPrefilter(o)+l[2],d=l[0];d--;)a=a.lastChild;oe.merge(f,a.childNodes),a=h.firstChild,a.textContent=""}else f.push(t.createTextNode(o));for(h.textContent="",g=0;o=f[g++];)if(r&&oe.inArray(o,r)>-1)i&&i.push(o);else if(u=oe.contains(o.ownerDocument,o),a=c(h.appendChild(o),"script"),u&&p(a),n)for(d=0;o=a[d++];)_e.test(o.type||"")&&n.push(o);return h}function h(){return!0}function f(){return!1}function g(){try{return Y.activeElement}catch(e){}}function m(e,t,n,r,i,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(s in t)m(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),i===!1)i=f;else if(!i)return e;return 1===o&&(a=i,i=function(e){return oe().off(e),a.apply(this,arguments)},i.guid=a.guid||(a.guid=oe.guid++)),e.each(function(){oe.event.add(this,t,i,r,n)})}function v(e,t){return oe.nodeName(e,"table")&&oe.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function y(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function $(e){var t=Ve.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function b(e,t){var n,r,i,o,a,s,l,u;if(1===t.nodeType){if(Se.hasData(e)&&(o=Se.access(e),a=Se.set(t,o),u=o.events)){delete a.handle,a.events={};for(i in u)for(n=0,r=u[i].length;r>n;n++)oe.event.add(t,i,u[i][n])}Te.hasData(e)&&(s=Te.access(e),l=oe.extend({},s),Te.set(t,l))}}function w(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Re.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function x(e,t,n,r){t=Q.apply([],t);var i,o,a,s,l,u,p=0,h=e.length,f=h-1,g=t[0],m=oe.isFunction(g);if(m||h>1&&"string"==typeof g&&!re.checkClone&&He.test(g))return e.each(function(i){var o=e.eq(i);m&&(t[0]=g.call(this,i,o.html())),x(o,t,n,r)});if(h&&(i=d(t,e[0].ownerDocument,!1,e,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(a=oe.map(c(i,"script"),y),s=a.length;h>p;p++)l=i,p!==f&&(l=oe.clone(l,!0,!0),s&&oe.merge(a,c(l,"script"))),n.call(e[p],l,p);if(s)for(u=a[a.length-1].ownerDocument,oe.map(a,$),p=0;s>p;p++)l=a[p],_e.test(l.type||"")&&!Se.access(l,"globalEval")&&oe.contains(u,l)&&(l.src?oe._evalUrl&&oe._evalUrl(l.src):oe.globalEval(l.textContent.replace(Ge,"")))}return e}function E(e,t,n){for(var r,i=t?oe.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||oe.cleanData(c(r)),r.parentNode&&(n&&oe.contains(r.ownerDocument,r)&&p(c(r,"script")),r.parentNode.removeChild(r));return e}function C(e,t){var n=oe(t.createElement(e)).appendTo(t.body),r=oe.css(n[0],"display");return n.detach(),r}function S(e){var t=Y,n=ze[e];return n||(n=C(e,t),"none"!==n&&n||(We=(We||oe("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=We[0].contentDocument,t.write(),t.close(),n=C(e,t),We.detach()),ze[e]=n),n}function T(e,t,n){var r,i,o,a,s=e.style;return n=n||Xe(e),a=n?n.getPropertyValue(t)||n[t]:void 0,""!==a&&void 0!==a||oe.contains(e.ownerDocument,e)||(a=oe.style(e,t)),n&&!re.pixelMarginRight()&&Ye.test(a)&&Ke.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o),void 0!==a?a+"":a}function A(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function N(e){if(e in rt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=nt.length;n--;)if(e=nt[n]+t,e in rt)return e}function L(e,t,n){var r=Oe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function O(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,a=0;4>o;o+=2)"margin"===n&&(a+=oe.css(e,n+Ie[o],!0,i)),r?("content"===n&&(a-=oe.css(e,"padding"+Ie[o],!0,i)),"margin"!==n&&(a-=oe.css(e,"border"+Ie[o]+"Width",!0,i))):(a+=oe.css(e,"padding"+Ie[o],!0,i),"padding"!==n&&(a+=oe.css(e,"border"+Ie[o]+"Width",!0,i)));return a}function I(t,n,r){var i=!0,o="width"===n?t.offsetWidth:t.offsetHeight,a=Xe(t),s="border-box"===oe.css(t,"boxSizing",!1,a);if(Y.msFullscreenElement&&e.top!==e&&t.getClientRects().length&&(o=Math.round(100*t.getBoundingClientRect()[n])),0>=o||null==o){if(o=T(t,n,a),(0>o||null==o)&&(o=t.style[n]),Ye.test(o))return o;i=s&&(re.boxSizingReliable()||o===t.style[n]),o=parseFloat(o)||0}return o+O(t,n,r||(s?"border":"content"),i,a)+"px"}function k(e,t){for(var n,r,i,o=[],a=0,s=e.length;s>a;a++)r=e[a],r.style&&(o[a]=Se.get(r,"olddisplay"),n=r.style.display,t?(o[a]||"none"!==n||(r.style.display=""),""===r.style.display&&ke(r)&&(o[a]=Se.access(r,"olddisplay",S(r.nodeName)))):(i=ke(r),"none"===n&&i||Se.set(r,"olddisplay",i?n:oe.css(r,"display"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[a]||"":"none"));return e}function R(e,t,n,r,i){return new R.prototype.init(e,t,n,r,i)}function M(){return e.setTimeout(function(){it=void 0}),it=oe.now()}function _(e,t){var n,r=0,i={height:e};for(t=t?1:0;4>r;r+=2-t)n=Ie[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function D(e,t,n){for(var r,i=(F.tweeners[t]||[]).concat(F.tweeners["*"]),o=0,a=i.length;a>o;o++)if(r=i[o].call(n,t,e))return r}function j(e,t,n){var r,i,o,a,s,l,u,c,p=this,d={},h=e.style,f=e.nodeType&&ke(e),g=Se.get(e,"fxshow");n.queue||(s=oe._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,l=s.empty.fire,s.empty.fire=function(){s.unqueued||l()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,oe.queue(e,"fx").length||s.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],u=oe.css(e,"display"),c="none"===u?Se.get(e,"olddisplay")||S(e.nodeName):u,"inline"===c&&"none"===oe.css(e,"float")&&(h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],at.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(f?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;f=!0}d[r]=g&&g[r]||oe.style(e,r)}else u=void 0;if(oe.isEmptyObject(d))"inline"===("none"===u?S(e.nodeName):u)&&(h.display=u);else{g?"hidden"in g&&(f=g.hidden):g=Se.access(e,"fxshow",{}),o&&(g.hidden=!f),f?oe(e).show():p.done(function(){oe(e).hide()}),p.done(function(){var t;Se.remove(e,"fxshow");for(t in d)oe.style(e,t,d[t])});for(r in d)a=D(f?g[r]:0,r,p),r in g||(g[r]=a.start,f&&(a.end=a.start,a.start="width"===r||"height"===r?1:0))}}function P(e,t){var n,r,i,o,a;for(n in e)if(r=oe.camelCase(n),i=t[r],o=e[n],oe.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),a=oe.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function F(e,t,n){var r,i,o=0,a=F.prefilters.length,s=oe.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;for(var t=it||M(),n=Math.max(0,u.startTime+u.duration-t),r=n/u.duration||0,o=1-r,a=0,l=u.tweens.length;l>a;a++)u.tweens[a].run(o);return s.notifyWith(e,[u,o,n]),1>o&&l?n:(s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:oe.extend({},t),opts:oe.extend(!0,{specialEasing:{},easing:oe.easing._default},n),originalProperties:t,originalOptions:n,startTime:it||M(),duration:n.duration,tweens:[],createTween:function(t,n){var r=oe.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),c=u.props;for(P(c,u.opts.specialEasing);a>o;o++)if(r=F.prefilters[o].call(u,e,c,u.opts))return oe.isFunction(r.stop)&&(oe._queueHooks(u.elem,u.opts.queue).stop=oe.proxy(r.stop,r)),r;return oe.map(c,D,u),oe.isFunction(u.opts.start)&&u.opts.start.call(e,u),oe.fx.timer(oe.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function q(e){return e.getAttribute&&e.getAttribute("class")||""}function U(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(we)||[];if(oe.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function B(e,t,n,r){function i(s){var l;return o[s]=!0,oe.each(e[s]||[],function(e,s){var u=s(t,n,r);return"string"!=typeof u||a||o[u]?a?!(l=u):void 0:(t.dataTypes.unshift(u),i(u),!1)}),l}var o={},a=e===Tt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function H(e,t){var n,r,i=oe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&oe.extend(!0,e,r),e}function V(e,t,n){for(var r,i,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}a||(a=i)}o=o||a}return o?(o!==l[0]&&l.unshift(o),n[o]):void 0}function G(e,t,n,r){var i,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(a=u[l+" "+o]||u["* "+o],!a)for(i in u)if(s=i.split(" "),s[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){a===!0?a=u[i]:u[i]!==!0&&(o=s[0],c.unshift(s[1]));break}if(a!==!0)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(p){return{state:"parsererror",error:a?p:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}function W(e,t,n,r){var i;if(oe.isArray(t))oe.each(t,function(t,i){n||Ot.test(e)?r(e,i):W(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==oe.type(t))r(e,t);else for(i in t)W(e+"["+i+"]",t[i],n,r)}function z(e){return oe.isWindow(e)?e:9===e.nodeType&&e.defaultView}var K=[],Y=e.document,X=K.slice,Q=K.concat,J=K.push,Z=K.indexOf,ee={},te=ee.toString,ne=ee.hasOwnProperty,re={},ie="2.2.3",oe=function(e,t){return new oe.fn.init(e,t)},ae=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,se=/^-ms-/,le=/-([\da-z])/gi,ue=function(e,t){return t.toUpperCase()};oe.fn=oe.prototype={jquery:ie,constructor:oe,selector:"",length:0,toArray:function(){return X.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:X.call(this)},pushStack:function(e){var t=oe.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return oe.each(this,e)},map:function(e){return this.pushStack(oe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(X.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:J,sort:K.sort,splice:K.splice},oe.extend=oe.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||oe.isFunction(a)||(a={}),s===l&&(a=this,s--);l>s;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],r=e[t],a!==r&&(u&&r&&(oe.isPlainObject(r)||(i=oe.isArray(r)))?(i?(i=!1,o=n&&oe.isArray(n)?n:[]):o=n&&oe.isPlainObject(n)?n:{},a[t]=oe.extend(u,o,r)):void 0!==r&&(a[t]=r));return a},oe.extend({expando:"jQuery"+(ie+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===oe.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=e&&e.toString();return!oe.isArray(e)&&t-parseFloat(t)+1>=0},isPlainObject:function(e){var t;if("object"!==oe.type(e)||e.nodeType||oe.isWindow(e))return!1;if(e.constructor&&!ne.call(e,"constructor")&&!ne.call(e.constructor.prototype||{},"isPrototypeOf"))return!1;for(t in e);return void 0===t||ne.call(e,t)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?ee[te.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;e=oe.trim(e),e&&(1===e.indexOf("use strict")?(t=Y.createElement("script"),t.text=e,Y.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(se,"ms-").replace(le,ue)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var r,i=0;if(n(e))for(r=e.length;r>i&&t.call(e[i],i,e[i])!==!1;i++);else for(i in e)if(t.call(e[i],i,e[i])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(ae,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?oe.merge(r,"string"==typeof e?[e]:e):J.call(r,e)),r},inArray:function(e,t,n){return null==t?-1:Z.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;n>r;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;a>o;o++)r=!t(e[o],o),r!==s&&i.push(e[o]);return i},map:function(e,t,r){var i,o,a=0,s=[];if(n(e))for(i=e.length;i>a;a++)o=t(e[a],a,r),null!=o&&s.push(o);else for(a in e)o=t(e[a],a,r),null!=o&&s.push(o);return Q.apply([],s)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(n=e[t],t=e,e=n),oe.isFunction(e)?(r=X.call(arguments,2),i=function(){return e.apply(t||this,r.concat(X.call(arguments)))},i.guid=e.guid=e.guid||oe.guid++,i):void 0},now:Date.now,support:re}),"function"==typeof Symbol&&(oe.fn[Symbol.iterator]=K[Symbol.iterator]),oe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ee["[object "+t+"]"]=t.toLowerCase()});var ce=function(e){function t(e,t,n,r){var i,o,a,s,l,u,p,h,f=t&&t.ownerDocument,g=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==g&&9!==g&&11!==g)return n;if(!r&&((t?t.ownerDocument||t:q)!==k&&I(t),t=t||k,M)){if(11!==g&&(u=ve.exec(e)))if(i=u[1]){if(9===g){if(!(a=t.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&P(t,a)&&a.id===i)return n.push(a),n}else{if(u[2])return J.apply(n,t.getElementsByTagName(e)),n;if((i=u[3])&&w.getElementsByClassName&&t.getElementsByClassName)return J.apply(n,t.getElementsByClassName(i)),n}if(w.qsa&&!G[e+" "]&&(!_||!_.test(e))){if(1!==g)f=t,h=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace($e,"\\$&"):t.setAttribute("id",s=F),p=S(e),o=p.length,l=de.test(s)?"#"+s:"[id='"+s+"']";o--;)p[o]=l+" "+d(p[o]);h=p.join(","),f=ye.test(e)&&c(t.parentNode)||t}if(h)try{return J.apply(n,f.querySelectorAll(h)),n}catch(m){}finally{s===F&&t.removeAttribute("id")}}}return A(e.replace(se,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>x.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[F]=!0,e}function i(e){var t=k.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)x.attrHandle[n[r]]=t}function a(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||z)-(~e.sourceIndex||z);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function l(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function u(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function c(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function p(){}function d(e){for(var t=0,n=e.length,r="";n>t;t++)r+=e[t].value;return r}function h(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=B++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,a){var s,l,u,c=[U,o];if(a){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,a))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(u=t[F]||(t[F]={}),l=u[t.uniqueID]||(u[t.uniqueID]={}),(s=l[r])&&s[0]===U&&s[1]===o)return c[2]=s[2];if(l[r]=c,c[2]=e(t,n,a))return!0}}}function f(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function g(e,n,r){for(var i=0,o=n.length;o>i;i++)t(e,n[i],r);return r}function m(e,t,n,r,i){for(var o,a=[],s=0,l=e.length,u=null!=t;l>s;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),u&&t.push(s)));return a}function v(e,t,n,i,o,a){return i&&!i[F]&&(i=v(i)),o&&!o[F]&&(o=v(o,a)),r(function(r,a,s,l){var u,c,p,d=[],h=[],f=a.length,v=r||g(t||"*",s.nodeType?[s]:s,[]),y=!e||!r&&t?v:m(v,d,e,s,l),$=n?o||(r?e:f||i)?[]:a:y;if(n&&n(y,$,s,l),i)for(u=m($,h),i(u,[],s,l),c=u.length;c--;)(p=u[c])&&($[h[c]]=!(y[h[c]]=p));if(r){if(o||e){if(o){for(u=[],c=$.length;c--;)(p=$[c])&&u.push(y[c]=p);o(null,$=[],u,l)}for(c=$.length;c--;)(p=$[c])&&(u=o?ee(r,p):d[c])>-1&&(r[u]=!(a[u]=p))}}else $=m($===a?$.splice(f,$.length):$),o?o(null,a,$,l):J.apply(a,$)})}function y(e){for(var t,n,r,i=e.length,o=x.relative[e[0].type],a=o||x.relative[" "],s=o?1:0,l=h(function(e){return e===t},a,!0),u=h(function(e){return ee(t,e)>-1},a,!0),c=[function(e,n,r){var i=!o&&(r||n!==N)||((t=n).nodeType?l(e,n,r):u(e,n,r));return t=null,i}];i>s;s++)if(n=x.relative[e[s].type])c=[h(f(c),n)];else{if(n=x.filter[e[s].type].apply(null,e[s].matches),n[F]){for(r=++s;i>r&&!x.relative[e[r].type];r++);return v(s>1&&f(c),s>1&&d(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(se,"$1"),n,r>s&&y(e.slice(s,r)),i>r&&y(e=e.slice(r)),i>r&&d(e))}c.push(n)}return f(c)}function $(e,n){var i=n.length>0,o=e.length>0,a=function(r,a,s,l,u){var c,p,d,h=0,f="0",g=r&&[],v=[],y=N,$=r||o&&x.find.TAG("*",u),b=U+=null==y?1:Math.random()||.1,w=$.length;for(u&&(N=a===k||a||u);f!==w&&null!=(c=$[f]);f++){if(o&&c){for(p=0,a||c.ownerDocument===k||(I(c),s=!M);d=e[p++];)if(d(c,a||k,s)){l.push(c);break}u&&(U=b)}i&&((c=!d&&c)&&h--,r&&g.push(c))}if(h+=f,i&&f!==h){for(p=0;d=n[p++];)d(g,v,a,s);if(r){if(h>0)for(;f--;)g[f]||v[f]||(v[f]=X.call(l));v=m(v)}J.apply(l,v),u&&!r&&v.length>0&&h+n.length>1&&t.uniqueSort(l)}return u&&(U=b,N=y),g};return i?r(a):a}var b,w,x,E,C,S,T,A,N,L,O,I,k,R,M,_,D,j,P,F="sizzle"+1*new Date,q=e.document,U=0,B=0,H=n(),V=n(),G=n(),W=function(e,t){return e===t&&(O=!0),0},z=1<<31,K={}.hasOwnProperty,Y=[],X=Y.pop,Q=Y.push,J=Y.push,Z=Y.slice,ee=function(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ie="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+re+"))|)"+ne+"*\\]",oe=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",ae=new RegExp(ne+"+","g"),se=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),le=new RegExp("^"+ne+"*,"+ne+"*"),ue=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),ce=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),pe=new RegExp(oe),de=new RegExp("^"+re+"$"),he={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},fe=/^(?:input|select|textarea|button)$/i,ge=/^h\d$/i,me=/^[^{]+\{\s*\[native \w/,ve=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,$e=/'|\\/g,be=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),we=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320);
},xe=function(){I()};try{J.apply(Y=Z.call(q.childNodes),q.childNodes),Y[q.childNodes.length].nodeType}catch(Ee){J={apply:Y.length?function(e,t){Q.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}w=t.support={},C=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},I=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:q;return r!==k&&9===r.nodeType&&r.documentElement?(k=r,R=k.documentElement,M=!C(k),(n=k.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xe,!1):n.attachEvent&&n.attachEvent("onunload",xe)),w.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),w.getElementsByTagName=i(function(e){return e.appendChild(k.createComment("")),!e.getElementsByTagName("*").length}),w.getElementsByClassName=me.test(k.getElementsByClassName),w.getById=i(function(e){return R.appendChild(e).id=F,!k.getElementsByName||!k.getElementsByName(F).length}),w.getById?(x.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&M){var n=t.getElementById(e);return n?[n]:[]}},x.filter.ID=function(e){var t=e.replace(be,we);return function(e){return e.getAttribute("id")===t}}):(delete x.find.ID,x.filter.ID=function(e){var t=e.replace(be,we);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),x.find.TAG=w.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},x.find.CLASS=w.getElementsByClassName&&function(e,t){return"undefined"!=typeof t.getElementsByClassName&&M?t.getElementsByClassName(e):void 0},D=[],_=[],(w.qsa=me.test(k.querySelectorAll))&&(i(function(e){R.appendChild(e).innerHTML="<a id='"+F+"'></a><select id='"+F+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&_.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||_.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+F+"-]").length||_.push("~="),e.querySelectorAll(":checked").length||_.push(":checked"),e.querySelectorAll("a#"+F+"+*").length||_.push(".#.+[+~]")}),i(function(e){var t=k.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&_.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||_.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),_.push(",.*:")})),(w.matchesSelector=me.test(j=R.matches||R.webkitMatchesSelector||R.mozMatchesSelector||R.oMatchesSelector||R.msMatchesSelector))&&i(function(e){w.disconnectedMatch=j.call(e,"div"),j.call(e,"[s!='']:x"),D.push("!=",oe)}),_=_.length&&new RegExp(_.join("|")),D=D.length&&new RegExp(D.join("|")),t=me.test(R.compareDocumentPosition),P=t||me.test(R.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},W=t?function(e,t){if(e===t)return O=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!w.sortDetached&&t.compareDocumentPosition(e)===n?e===k||e.ownerDocument===q&&P(q,e)?-1:t===k||t.ownerDocument===q&&P(q,t)?1:L?ee(L,e)-ee(L,t):0:4&n?-1:1)}:function(e,t){if(e===t)return O=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,s=[e],l=[t];if(!i||!o)return e===k?-1:t===k?1:i?-1:o?1:L?ee(L,e)-ee(L,t):0;if(i===o)return a(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;s[r]===l[r];)r++;return r?a(s[r],l[r]):s[r]===q?-1:l[r]===q?1:0},k):k},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==k&&I(e),n=n.replace(ce,"='$1']"),w.matchesSelector&&M&&!G[n+" "]&&(!D||!D.test(n))&&(!_||!_.test(n)))try{var r=j.call(e,n);if(r||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,k,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==k&&I(e),P(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==k&&I(e);var n=x.attrHandle[t.toLowerCase()],r=n&&K.call(x.attrHandle,t.toLowerCase())?n(e,t,!M):void 0;return void 0!==r?r:w.attributes||!M?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(O=!w.detectDuplicates,L=!w.sortStable&&e.slice(0),e.sort(W),O){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return L=null,e},E=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=E(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=E(t);return n},x=t.selectors={cacheLength:50,createPseudo:r,match:he,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(be,we),e[3]=(e[3]||e[4]||e[5]||"").replace(be,we),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return he.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&pe.test(n)&&(t=S(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(be,we).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=H[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&H(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:n?(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(ae," ")+" ").indexOf(r)>-1:"|="===n?o===r||o.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,p,d,h,f,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!l&&!s,$=!1;if(m){if(o){for(;g;){for(d=t;d=d[g];)if(s?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;f=g="only"===e&&!f&&"nextSibling"}return!0}if(f=[a?m.firstChild:m.lastChild],a&&y){for(d=m,p=d[F]||(d[F]={}),c=p[d.uniqueID]||(p[d.uniqueID]={}),u=c[e]||[],h=u[0]===U&&u[1],$=h&&u[2],d=h&&m.childNodes[h];d=++h&&d&&d[g]||($=h=0)||f.pop();)if(1===d.nodeType&&++$&&d===t){c[e]=[U,h,$];break}}else if(y&&(d=t,p=d[F]||(d[F]={}),c=p[d.uniqueID]||(p[d.uniqueID]={}),u=c[e]||[],h=u[0]===U&&u[1],$=h),$===!1)for(;(d=++h&&d&&d[g]||($=h=0)||f.pop())&&((s?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++$||(y&&(p=d[F]||(d[F]={}),c=p[d.uniqueID]||(p[d.uniqueID]={}),c[e]=[U,$]),d!==t)););return $-=i,$===r||$%r===0&&$/r>=0}}},PSEUDO:function(e,n){var i,o=x.pseudos[e]||x.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[F]?o(n):o.length>1?(i=[e,e,"",n],x.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),a=i.length;a--;)r=ee(e,i[a]),e[r]=!(t[r]=i[a])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=T(e.replace(se,"$1"));return i[F]?r(function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(be,we),function(t){return(t.textContent||t.innerText||E(t)).indexOf(e)>-1}}),lang:r(function(e){return de.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(be,we).toLowerCase(),function(t){var n;do if(n=M?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===R},focus:function(e){return e===k.activeElement&&(!k.hasFocus||k.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return ge.test(e.nodeName)},input:function(e){return fe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,n){return[0>n?n+t:n]}),even:u(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:u(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:u(function(e,t,n){for(var r=0>n?n+t:n;--r>=0;)e.push(r);return e}),gt:u(function(e,t,n){for(var r=0>n?n+t:n;++r<t;)e.push(r);return e})}},x.pseudos.nth=x.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[b]=s(b);for(b in{submit:!0,reset:!0})x.pseudos[b]=l(b);return p.prototype=x.filters=x.pseudos,x.setFilters=new p,S=t.tokenize=function(e,n){var r,i,o,a,s,l,u,c=V[e+" "];if(c)return n?0:c.slice(0);for(s=e,l=[],u=x.preFilter;s;){r&&!(i=le.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(o=[])),r=!1,(i=ue.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(se," ")}),s=s.slice(r.length));for(a in x.filter)!(i=he[a].exec(s))||u[a]&&!(i=u[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?t.error(e):V(e,l).slice(0)},T=t.compile=function(e,t){var n,r=[],i=[],o=G[e+" "];if(!o){for(t||(t=S(e)),n=t.length;n--;)o=y(t[n]),o[F]?r.push(o):i.push(o);o=G(e,$(i,r)),o.selector=e}return o},A=t.select=function(e,t,n,r){var i,o,a,s,l,u="function"==typeof e&&e,p=!r&&S(e=u.selector||e);if(n=n||[],1===p.length){if(o=p[0]=p[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&w.getById&&9===t.nodeType&&M&&x.relative[o[1].type]){if(t=(x.find.ID(a.matches[0].replace(be,we),t)||[])[0],!t)return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=he.needsContext.test(e)?0:o.length;i--&&(a=o[i],!x.relative[s=a.type]);)if((l=x.find[s])&&(r=l(a.matches[0].replace(be,we),ye.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&d(o),!e)return J.apply(n,r),n;break}}return(u||T(e,p))(r,t,!M,n,!t||ye.test(e)&&c(t.parentNode)||t),n},w.sortStable=F.split("").sort(W).join("")===F,w.detectDuplicates=!!O,I(),w.sortDetached=i(function(e){return 1&e.compareDocumentPosition(k.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),w.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;return n?void 0:e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);oe.find=ce,oe.expr=ce.selectors,oe.expr[":"]=oe.expr.pseudos,oe.uniqueSort=oe.unique=ce.uniqueSort,oe.text=ce.getText,oe.isXMLDoc=ce.isXML,oe.contains=ce.contains;var pe=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&oe(e).is(n))break;r.push(e)}return r},de=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},he=oe.expr.match.needsContext,fe=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,ge=/^.[^:#\[\.,]*$/;oe.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?oe.find.matchesSelector(r,e)?[r]:[]:oe.find.matches(e,oe.grep(t,function(e){return 1===e.nodeType}))},oe.fn.extend({find:function(e){var t,n=this.length,r=[],i=this;if("string"!=typeof e)return this.pushStack(oe(e).filter(function(){for(t=0;n>t;t++)if(oe.contains(i[t],this))return!0}));for(t=0;n>t;t++)oe.find(e,i[t],r);return r=this.pushStack(n>1?oe.unique(r):r),r.selector=this.selector?this.selector+" "+e:e,r},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&he.test(e)?oe(e):e||[],!1).length}});var me,ve=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ye=oe.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||me,"string"==typeof e){if(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:ve.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof oe?t[0]:t,oe.merge(this,oe.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:Y,!0)),fe.test(r[1])&&oe.isPlainObject(t))for(r in t)oe.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=Y.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=Y,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):oe.isFunction(e)?void 0!==n.ready?n.ready(e):e(oe):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),oe.makeArray(e,this))};ye.prototype=oe.fn,me=oe(Y);var $e=/^(?:parents|prev(?:Until|All))/,be={children:!0,contents:!0,next:!0,prev:!0};oe.fn.extend({has:function(e){var t=oe(e,this),n=t.length;return this.filter(function(){for(var e=0;n>e;e++)if(oe.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],a=he.test(e)||"string"!=typeof e?oe(e,t||this.context):0;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&oe.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?oe.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?Z.call(oe(e),this[0]):Z.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(oe.uniqueSort(oe.merge(this.get(),oe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),oe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return pe(e,"parentNode")},parentsUntil:function(e,t,n){return pe(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return pe(e,"nextSibling")},prevAll:function(e){return pe(e,"previousSibling")},nextUntil:function(e,t,n){return pe(e,"nextSibling",n)},prevUntil:function(e,t,n){return pe(e,"previousSibling",n)},siblings:function(e){return de((e.parentNode||{}).firstChild,e)},children:function(e){return de(e.firstChild)},contents:function(e){return e.contentDocument||oe.merge([],e.childNodes)}},function(e,t){oe.fn[e]=function(n,r){var i=oe.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=oe.filter(r,i)),this.length>1&&(be[e]||oe.uniqueSort(i),$e.test(e)&&i.reverse()),this.pushStack(i)}});var we=/\S+/g;oe.Callbacks=function(e){e="string"==typeof e?o(e):oe.extend({},e);var t,n,r,i,a=[],s=[],l=-1,u=function(){for(i=e.once,r=t=!0;s.length;l=-1)for(n=s.shift();++l<a.length;)a[l].apply(n[0],n[1])===!1&&e.stopOnFalse&&(l=a.length,n=!1);e.memory||(n=!1),t=!1,i&&(a=n?[]:"")},c={add:function(){return a&&(n&&!t&&(l=a.length-1,s.push(n)),function r(t){oe.each(t,function(t,n){oe.isFunction(n)?e.unique&&c.has(n)||a.push(n):n&&n.length&&"string"!==oe.type(n)&&r(n)})}(arguments),n&&!t&&u()),this},remove:function(){return oe.each(arguments,function(e,t){for(var n;(n=oe.inArray(t,a,n))>-1;)a.splice(n,1),l>=n&&l--}),this},has:function(e){return e?oe.inArray(e,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return i=s=[],a=n="",this},disabled:function(){return!a},lock:function(){return i=s=[],n||(a=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},oe.extend({Deferred:function(e){var t=[["resolve","done",oe.Callbacks("once memory"),"resolved"],["reject","fail",oe.Callbacks("once memory"),"rejected"],["notify","progress",oe.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return oe.Deferred(function(n){oe.each(t,function(t,o){var a=oe.isFunction(e[t])&&e[t];i[o[1]](function(){var e=a&&a.apply(this,arguments);e&&oe.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===r?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?oe.extend(e,r):r}},i={};return r.pipe=r.then,oe.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=X.call(arguments),a=o.length,s=1!==a||e&&oe.isFunction(e.promise)?a:0,l=1===s?e:oe.Deferred(),u=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?X.call(arguments):i,r===t?l.notifyWith(n,r):--s||l.resolveWith(n,r)}};if(a>1)for(t=new Array(a),n=new Array(a),r=new Array(a);a>i;i++)o[i]&&oe.isFunction(o[i].promise)?o[i].promise().progress(u(i,n,t)).done(u(i,r,o)).fail(l.reject):--s;return s||l.resolveWith(r,o),l.promise()}});var xe;oe.fn.ready=function(e){return oe.ready.promise().done(e),this},oe.extend({isReady:!1,readyWait:1,holdReady:function(e){e?oe.readyWait++:oe.ready(!0)},ready:function(e){(e===!0?--oe.readyWait:oe.isReady)||(oe.isReady=!0,e!==!0&&--oe.readyWait>0||(xe.resolveWith(Y,[oe]),oe.fn.triggerHandler&&(oe(Y).triggerHandler("ready"),oe(Y).off("ready"))))}}),oe.ready.promise=function(t){return xe||(xe=oe.Deferred(),"complete"===Y.readyState||"loading"!==Y.readyState&&!Y.documentElement.doScroll?e.setTimeout(oe.ready):(Y.addEventListener("DOMContentLoaded",a),e.addEventListener("load",a))),xe.promise(t)},oe.ready.promise();var Ee=function(e,t,n,r,i,o,a){var s=0,l=e.length,u=null==n;if("object"===oe.type(n)){i=!0;for(s in n)Ee(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,oe.isFunction(r)||(a=!0),u&&(a?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(oe(e),n)})),t))for(;l>s;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:u?t.call(e):l?t(e[0],n):o},Ce=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};s.uid=1,s.prototype={register:function(e,t){var n=t||{};return e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,writable:!0,configurable:!0}),e[this.expando]},cache:function(e){if(!Ce(e))return{};var t=e[this.expando];return t||(t={},Ce(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[t]=n;else for(r in t)i[r]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][t]},access:function(e,t,n){var r;return void 0===t||t&&"string"==typeof t&&void 0===n?(r=this.get(e,t),void 0!==r?r:this.get(e,oe.camelCase(t))):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r,i,o=e[this.expando];if(void 0!==o){if(void 0===t)this.register(e);else{oe.isArray(t)?r=t.concat(t.map(oe.camelCase)):(i=oe.camelCase(t),t in o?r=[t,i]:(r=i,r=r in o?[r]:r.match(we)||[])),n=r.length;for(;n--;)delete o[r[n]]}(void 0===t||oe.isEmptyObject(o))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!oe.isEmptyObject(t)}};var Se=new s,Te=new s,Ae=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ne=/[A-Z]/g;oe.extend({hasData:function(e){return Te.hasData(e)||Se.hasData(e)},data:function(e,t,n){return Te.access(e,t,n)},removeData:function(e,t){Te.remove(e,t)},_data:function(e,t,n){return Se.access(e,t,n)},_removeData:function(e,t){Se.remove(e,t)}}),oe.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=Te.get(o),1===o.nodeType&&!Se.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=oe.camelCase(r.slice(5)),l(o,r,i[r])));Se.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Te.set(this,e)}):Ee(this,function(t){var n,r;if(o&&void 0===t){if(n=Te.get(o,e)||Te.get(o,e.replace(Ne,"-$&").toLowerCase()),void 0!==n)return n;if(r=oe.camelCase(e),n=Te.get(o,r),void 0!==n)return n;if(n=l(o,r,void 0),void 0!==n)return n}else r=oe.camelCase(e),this.each(function(){var n=Te.get(this,r);Te.set(this,r,t),e.indexOf("-")>-1&&void 0!==n&&Te.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Te.remove(this,e)})}}),oe.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=Se.get(e,t),n&&(!r||oe.isArray(n)?r=Se.access(e,t,oe.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=oe.queue(e,t),r=n.length,i=n.shift(),o=oe._queueHooks(e,t),a=function(){oe.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Se.get(e,n)||Se.access(e,n,{empty:oe.Callbacks("once memory").add(function(){Se.remove(e,[t+"queue",n])})})}}),oe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?oe.queue(this[0],e):void 0===t?this:this.each(function(){var n=oe.queue(this,e,t);oe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&oe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){oe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=oe.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)n=Se.get(o[a],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var Le=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Oe=new RegExp("^(?:([+-])=|)("+Le+")([a-z%]*)$","i"),Ie=["Top","Right","Bottom","Left"],ke=function(e,t){return e=t||e,"none"===oe.css(e,"display")||!oe.contains(e.ownerDocument,e)},Re=/^(?:checkbox|radio)$/i,Me=/<([\w:-]+)/,_e=/^$|\/(?:java|ecma)script/i,De={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};De.optgroup=De.option,De.tbody=De.tfoot=De.colgroup=De.caption=De.thead,De.th=De.td;var je=/<|&#?\w+;/;!function(){var e=Y.createDocumentFragment(),t=e.appendChild(Y.createElement("div")),n=Y.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),re.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",re.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Pe=/^key/,Fe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,qe=/^([^.]*)(?:\.(.+)|)/;oe.event={global:{},add:function(e,t,n,r,i){var o,a,s,l,u,c,p,d,h,f,g,m=Se.get(e);if(m)for(n.handler&&(o=n,n=o.handler,i=o.selector),n.guid||(n.guid=oe.guid++),(l=m.events)||(l=m.events={}),(a=m.handle)||(a=m.handle=function(t){return"undefined"!=typeof oe&&oe.event.triggered!==t.type?oe.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(we)||[""],u=t.length;u--;)s=qe.exec(t[u])||[],h=g=s[1],f=(s[2]||"").split(".").sort(),h&&(p=oe.event.special[h]||{},h=(i?p.delegateType:p.bindType)||h,p=oe.event.special[h]||{},c=oe.extend({type:h,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&oe.expr.match.needsContext.test(i),namespace:f.join(".")},o),(d=l[h])||(d=l[h]=[],d.delegateCount=0,p.setup&&p.setup.call(e,r,f,a)!==!1||e.addEventListener&&e.addEventListener(h,a)),p.add&&(p.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),oe.event.global[h]=!0)},remove:function(e,t,n,r,i){var o,a,s,l,u,c,p,d,h,f,g,m=Se.hasData(e)&&Se.get(e);if(m&&(l=m.events)){for(t=(t||"").match(we)||[""],u=t.length;u--;)if(s=qe.exec(t[u])||[],h=g=s[1],f=(s[2]||"").split(".").sort(),h){for(p=oe.event.special[h]||{},h=(r?p.delegateType:p.bindType)||h,d=l[h]||[],s=s[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=d.length;o--;)c=d[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,p.remove&&p.remove.call(e,c));a&&!d.length&&(p.teardown&&p.teardown.call(e,f,m.handle)!==!1||oe.removeEvent(e,h,m.handle),delete l[h])}else for(h in l)oe.event.remove(e,h+t[u],n,r,!0);oe.isEmptyObject(l)&&Se.remove(e,"handle events")}},dispatch:function(e){e=oe.event.fix(e);var t,n,r,i,o,a=[],s=X.call(arguments),l=(Se.get(this,"events")||{})[e.type]||[],u=oe.event.special[e.type]||{};if(s[0]=e,e.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,e)!==!1){for(a=oe.event.handlers.call(this,e,l),t=0;(i=a[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(o.namespace)||(e.handleObj=o,e.data=o.data,r=((oe.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s),void 0!==r&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,a=[],s=t.delegateCount,l=e.target;if(s&&l.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==e.type)){for(r=[],n=0;s>n;n++)o=t[n],i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?oe(i,this).index(l)>-1:oe.find(i,this,null,[l]).length),r[i]&&r.push(o);r.length&&a.push({elem:l,handlers:r})}return s<t.length&&a.push({elem:this,handlers:t.slice(s)}),a},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||Y,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},fix:function(e){if(e[oe.expando])return e;var t,n,r,i=e.type,o=e,a=this.fixHooks[i];for(a||(this.fixHooks[i]=a=Fe.test(i)?this.mouseHooks:Pe.test(i)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,e=new oe.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=Y),3===e.target.nodeType&&(e.target=e.target.parentNode),a.filter?a.filter(e,o):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==g()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===g()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&oe.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(e){return oe.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},oe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},oe.Event=function(e,t){return this instanceof oe.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?h:f):this.type=e,t&&oe.extend(this,t),this.timeStamp=e&&e.timeStamp||oe.now(),void(this[oe.expando]=!0)):new oe.Event(e,t)},oe.Event.prototype={constructor:oe.Event,isDefaultPrevented:f,isPropagationStopped:f,isImmediatePropagationStopped:f,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=h,e&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=h,e&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=h,e&&e.stopImmediatePropagation(),this.stopPropagation()}},oe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){oe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||oe.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),oe.fn.extend({on:function(e,t,n,r){return m(this,e,t,n,r)},one:function(e,t,n,r){return m(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,oe(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return t!==!1&&"function"!=typeof t||(n=t,t=void 0),n===!1&&(n=f),this.each(function(){oe.event.remove(this,e,n,t)})}});var Ue=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Be=/<script|<style|<link/i,He=/checked\s*(?:[^=]|=\s*.checked.)/i,Ve=/^true\/(.*)/,Ge=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;oe.extend({htmlPrefilter:function(e){return e.replace(Ue,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),l=oe.contains(e.ownerDocument,e);if(!(re.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||oe.isXMLDoc(e)))for(a=c(s),o=c(e),r=0,i=o.length;i>r;r++)w(o[r],a[r]);if(t)if(n)for(o=o||c(e),a=a||c(s),r=0,i=o.length;i>r;r++)b(o[r],a[r]);else b(e,s);return a=c(s,"script"),a.length>0&&p(a,!l&&c(e,"script")),s},cleanData:function(e){for(var t,n,r,i=oe.event.special,o=0;void 0!==(n=e[o]);o++)if(Ce(n)){if(t=n[Se.expando]){if(t.events)for(r in t.events)i[r]?oe.event.remove(n,r):oe.removeEvent(n,r,t.handle);n[Se.expando]=void 0}n[Te.expando]&&(n[Te.expando]=void 0)}}}),oe.fn.extend({domManip:x,detach:function(e){return E(this,e,!0)},remove:function(e){return E(this,e)},text:function(e){return Ee(this,function(e){return void 0===e?oe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return x(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=v(this,e);t.appendChild(e)}})},prepend:function(){return x(this,arguments,function(e){
if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=v(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return x(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return x(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(oe.cleanData(c(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return oe.clone(this,e,t)})},html:function(e){return Ee(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Be.test(e)&&!De[(Me.exec(e)||["",""])[1].toLowerCase()]){e=oe.htmlPrefilter(e);try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(oe.cleanData(c(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return x(this,arguments,function(t){var n=this.parentNode;oe.inArray(this,e)<0&&(oe.cleanData(c(this)),n&&n.replaceChild(t,this))},e)}}),oe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){oe.fn[e]=function(e){for(var n,r=[],i=oe(e),o=i.length-1,a=0;o>=a;a++)n=a===o?this:this.clone(!0),oe(i[a])[t](n),J.apply(r,n.get());return this.pushStack(r)}});var We,ze={HTML:"block",BODY:"block"},Ke=/^margin/,Ye=new RegExp("^("+Le+")(?!px)[a-z%]+$","i"),Xe=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Qe=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i},Je=Y.documentElement;!function(){function t(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Je.appendChild(a);var t=e.getComputedStyle(s);n="1%"!==t.top,o="2px"===t.marginLeft,r="4px"===t.width,s.style.marginRight="50%",i="4px"===t.marginRight,Je.removeChild(a)}var n,r,i,o,a=Y.createElement("div"),s=Y.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",re.clearCloneStyle="content-box"===s.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(s),oe.extend(re,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return null==r&&t(),r},pixelMarginRight:function(){return null==r&&t(),i},reliableMarginLeft:function(){return null==r&&t(),o},reliableMarginRight:function(){var t,n=s.appendChild(Y.createElement("div"));return n.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",s.style.width="1px",Je.appendChild(a),t=!parseFloat(e.getComputedStyle(n).marginRight),Je.removeChild(a),s.removeChild(n),t}}))}();var Ze=/^(none|table(?!-c[ea]).+)/,et={position:"absolute",visibility:"hidden",display:"block"},tt={letterSpacing:"0",fontWeight:"400"},nt=["Webkit","O","Moz","ms"],rt=Y.createElement("div").style;oe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=T(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=oe.camelCase(t),l=e.style;return t=oe.cssProps[s]||(oe.cssProps[s]=N(s)||s),a=oe.cssHooks[t]||oe.cssHooks[s],void 0===n?a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t]:(o=typeof n,"string"===o&&(i=Oe.exec(n))&&i[1]&&(n=u(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(oe.cssNumber[s]?"":"px")),re.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(l[t]=n)),void 0)}},css:function(e,t,n,r){var i,o,a,s=oe.camelCase(t);return t=oe.cssProps[s]||(oe.cssProps[s]=N(s)||s),a=oe.cssHooks[t]||oe.cssHooks[s],a&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=T(e,t,r)),"normal"===i&&t in tt&&(i=tt[t]),""===n||n?(o=parseFloat(i),n===!0||isFinite(o)?o||0:i):i}}),oe.each(["height","width"],function(e,t){oe.cssHooks[t]={get:function(e,n,r){return n?Ze.test(oe.css(e,"display"))&&0===e.offsetWidth?Qe(e,et,function(){return I(e,t,r)}):I(e,t,r):void 0},set:function(e,n,r){var i,o=r&&Xe(e),a=r&&O(e,t,r,"border-box"===oe.css(e,"boxSizing",!1,o),o);return a&&(i=Oe.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=oe.css(e,t)),L(e,n,a)}}}),oe.cssHooks.marginLeft=A(re.reliableMarginLeft,function(e,t){return t?(parseFloat(T(e,"marginLeft"))||e.getBoundingClientRect().left-Qe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px":void 0}),oe.cssHooks.marginRight=A(re.reliableMarginRight,function(e,t){return t?Qe(e,{display:"inline-block"},T,[e,"marginRight"]):void 0}),oe.each({margin:"",padding:"",border:"Width"},function(e,t){oe.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];4>r;r++)i[e+Ie[r]+t]=o[r]||o[r-2]||o[0];return i}},Ke.test(e)||(oe.cssHooks[e+t].set=L)}),oe.fn.extend({css:function(e,t){return Ee(this,function(e,t,n){var r,i,o={},a=0;if(oe.isArray(t)){for(r=Xe(e),i=t.length;i>a;a++)o[t[a]]=oe.css(e,t[a],!1,r);return o}return void 0!==n?oe.style(e,t,n):oe.css(e,t)},e,t,arguments.length>1)},show:function(){return k(this,!0)},hide:function(){return k(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ke(this)?oe(this).show():oe(this).hide()})}}),oe.Tween=R,R.prototype={constructor:R,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||oe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(oe.cssNumber[n]?"":"px")},cur:function(){var e=R.propHooks[this.prop];return e&&e.get?e.get(this):R.propHooks._default.get(this)},run:function(e){var t,n=R.propHooks[this.prop];return this.options.duration?this.pos=t=oe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):R.propHooks._default.set(this),this}},R.prototype.init.prototype=R.prototype,R.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=oe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){oe.fx.step[e.prop]?oe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[oe.cssProps[e.prop]]&&!oe.cssHooks[e.prop]?e.elem[e.prop]=e.now:oe.style(e.elem,e.prop,e.now+e.unit)}}},R.propHooks.scrollTop=R.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},oe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},oe.fx=R.prototype.init,oe.fx.step={};var it,ot,at=/^(?:toggle|show|hide)$/,st=/queueHooks$/;oe.Animation=oe.extend(F,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return u(n.elem,e,Oe.exec(t),n),n}]},tweener:function(e,t){oe.isFunction(e)?(t=e,e=["*"]):e=e.match(we);for(var n,r=0,i=e.length;i>r;r++)n=e[r],F.tweeners[n]=F.tweeners[n]||[],F.tweeners[n].unshift(t)},prefilters:[j],prefilter:function(e,t){t?F.prefilters.unshift(e):F.prefilters.push(e)}}),oe.speed=function(e,t,n){var r=e&&"object"==typeof e?oe.extend({},e):{complete:n||!n&&t||oe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!oe.isFunction(t)&&t};return r.duration=oe.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in oe.fx.speeds?oe.fx.speeds[r.duration]:oe.fx.speeds._default,null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){oe.isFunction(r.old)&&r.old.call(this),r.queue&&oe.dequeue(this,r.queue)},r},oe.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ke).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=oe.isEmptyObject(e),o=oe.speed(t,n,r),a=function(){var t=F(this,oe.extend({},e),o);(i||Se.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=oe.timers,a=Se.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&st.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||oe.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=Se.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=oe.timers,a=r?r.length:0;for(n.finish=!0,oe.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;a>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),oe.each(["toggle","show","hide"],function(e,t){var n=oe.fn[t];oe.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(_(t,!0),e,r,i)}}),oe.each({slideDown:_("show"),slideUp:_("hide"),slideToggle:_("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){oe.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),oe.timers=[],oe.fx.tick=function(){var e,t=0,n=oe.timers;for(it=oe.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||oe.fx.stop(),it=void 0},oe.fx.timer=function(e){oe.timers.push(e),e()?oe.fx.start():oe.timers.pop()},oe.fx.interval=13,oe.fx.start=function(){ot||(ot=e.setInterval(oe.fx.tick,oe.fx.interval))},oe.fx.stop=function(){e.clearInterval(ot),ot=null},oe.fx.speeds={slow:600,fast:200,_default:400},oe.fn.delay=function(t,n){return t=oe.fx?oe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=Y.createElement("input"),t=Y.createElement("select"),n=t.appendChild(Y.createElement("option"));e.type="checkbox",re.checkOn=""!==e.value,re.optSelected=n.selected,t.disabled=!0,re.optDisabled=!n.disabled,e=Y.createElement("input"),e.value="t",e.type="radio",re.radioValue="t"===e.value}();var lt,ut=oe.expr.attrHandle;oe.fn.extend({attr:function(e,t){return Ee(this,oe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){oe.removeAttr(this,e)})}}),oe.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?oe.prop(e,t,n):(1===o&&oe.isXMLDoc(e)||(t=t.toLowerCase(),i=oe.attrHooks[t]||(oe.expr.match.bool.test(t)?lt:void 0)),void 0!==n?null===n?void oe.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=oe.find.attr(e,t),null==r?void 0:r))},attrHooks:{type:{set:function(e,t){if(!re.radioValue&&"radio"===t&&oe.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(we);if(o&&1===e.nodeType)for(;n=o[i++];)r=oe.propFix[n]||n,oe.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)}}),lt={set:function(e,t,n){return t===!1?oe.removeAttr(e,n):e.setAttribute(n,n),n}},oe.each(oe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ut[t]||oe.find.attr;ut[t]=function(e,t,r){var i,o;return r||(o=ut[t],ut[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,ut[t]=o),i}});var ct=/^(?:input|select|textarea|button)$/i,pt=/^(?:a|area)$/i;oe.fn.extend({prop:function(e,t){return Ee(this,oe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[oe.propFix[e]||e]})}}),oe.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&oe.isXMLDoc(e)||(t=oe.propFix[t]||t,i=oe.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=oe.find.attr(e,"tabindex");return t?parseInt(t,10):ct.test(e.nodeName)||pt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),re.optSelected||(oe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),oe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){oe.propFix[this.toLowerCase()]=this});var dt=/[\t\r\n\f]/g;oe.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,l=0;if(oe.isFunction(e))return this.each(function(t){oe(this).addClass(e.call(this,t,q(this)))});if("string"==typeof e&&e)for(t=e.match(we)||[];n=this[l++];)if(i=q(n),r=1===n.nodeType&&(" "+i+" ").replace(dt," ")){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");s=oe.trim(r),i!==s&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,l=0;if(oe.isFunction(e))return this.each(function(t){oe(this).removeClass(e.call(this,t,q(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(we)||[];n=this[l++];)if(i=q(n),r=1===n.nodeType&&(" "+i+" ").replace(dt," ")){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");s=oe.trim(r),i!==s&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):oe.isFunction(e)?this.each(function(n){oe(this).toggleClass(e.call(this,n,q(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=oe(this),o=e.match(we)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||(t=q(this),t&&Se.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":Se.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+q(n)+" ").replace(dt," ").indexOf(t)>-1)return!0;return!1}});var ht=/\r/g,ft=/[\x20\t\r\n\f]+/g;oe.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=oe.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,oe(this).val()):e,null==i?i="":"number"==typeof i?i+="":oe.isArray(i)&&(i=oe.map(i,function(e){return null==e?"":e+""})),t=oe.valHooks[this.type]||oe.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=oe.valHooks[i.type]||oe.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(ht,""):null==n?"":n)}}}),oe.extend({valHooks:{option:{get:function(e){var t=oe.find.attr(e,"value");return null!=t?t:oe.trim(oe.text(e)).replace(ft," ")}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,a=o?null:[],s=o?i+1:r.length,l=0>i?s:o?i:0;s>l;l++)if(n=r[l],(n.selected||l===i)&&(re.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!oe.nodeName(n.parentNode,"optgroup"))){if(t=oe(n).val(),o)return t;a.push(t)}return a},set:function(e,t){for(var n,r,i=e.options,o=oe.makeArray(t),a=i.length;a--;)r=i[a],(r.selected=oe.inArray(oe.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),oe.each(["radio","checkbox"],function(){oe.valHooks[this]={set:function(e,t){return oe.isArray(t)?e.checked=oe.inArray(oe(e).val(),t)>-1:void 0}},re.checkOn||(oe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var gt=/^(?:focusinfocus|focusoutblur)$/;oe.extend(oe.event,{trigger:function(t,n,r,i){var o,a,s,l,u,c,p,d=[r||Y],h=ne.call(t,"type")?t.type:t,f=ne.call(t,"namespace")?t.namespace.split("."):[];if(a=s=r=r||Y,3!==r.nodeType&&8!==r.nodeType&&!gt.test(h+oe.event.triggered)&&(h.indexOf(".")>-1&&(f=h.split("."),h=f.shift(),f.sort()),u=h.indexOf(":")<0&&"on"+h,t=t[oe.expando]?t:new oe.Event(h,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:oe.makeArray(n,[t]),p=oe.event.special[h]||{},i||!p.trigger||p.trigger.apply(r,n)!==!1)){if(!i&&!p.noBubble&&!oe.isWindow(r)){for(l=p.delegateType||h,gt.test(l+h)||(a=a.parentNode);a;a=a.parentNode)d.push(a),s=a;s===(r.ownerDocument||Y)&&d.push(s.defaultView||s.parentWindow||e)}for(o=0;(a=d[o++])&&!t.isPropagationStopped();)t.type=o>1?l:p.bindType||h,c=(Se.get(a,"events")||{})[t.type]&&Se.get(a,"handle"),c&&c.apply(a,n),c=u&&a[u],c&&c.apply&&Ce(a)&&(t.result=c.apply(a,n),t.result===!1&&t.preventDefault());return t.type=h,i||t.isDefaultPrevented()||p._default&&p._default.apply(d.pop(),n)!==!1||!Ce(r)||u&&oe.isFunction(r[h])&&!oe.isWindow(r)&&(s=r[u],s&&(r[u]=null),oe.event.triggered=h,r[h](),oe.event.triggered=void 0,s&&(r[u]=s)),t.result}},simulate:function(e,t,n){var r=oe.extend(new oe.Event,n,{type:e,isSimulated:!0});oe.event.trigger(r,null,t),r.isDefaultPrevented()&&n.preventDefault()}}),oe.fn.extend({trigger:function(e,t){return this.each(function(){oe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?oe.event.trigger(e,t,n,!0):void 0}}),oe.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){oe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),oe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),re.focusin="onfocusin"in e,re.focusin||oe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){oe.event.simulate(t,e.target,oe.event.fix(e))};oe.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=Se.access(r,t);i||r.addEventListener(e,n,!0),Se.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Se.access(r,t)-1;i?Se.access(r,t,i):(r.removeEventListener(e,n,!0),Se.remove(r,t))}}});var mt=e.location,vt=oe.now(),yt=/\?/;oe.parseJSON=function(e){return JSON.parse(e+"")},oe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(r){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||oe.error("Invalid XML: "+t),n};var $t=/#.*$/,bt=/([?&])_=[^&]*/,wt=/^(.*?):[ \t]*([^\r\n]*)$/gm,xt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Et=/^(?:GET|HEAD)$/,Ct=/^\/\//,St={},Tt={},At="*/".concat("*"),Nt=Y.createElement("a");Nt.href=mt.href,oe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:mt.href,type:"GET",isLocal:xt.test(mt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":At,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":oe.parseJSON,"text xml":oe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?H(H(e,oe.ajaxSettings),t):H(oe.ajaxSettings,e)},ajaxPrefilter:U(St),ajaxTransport:U(Tt),ajax:function(t,n){function r(t,n,r,s){var u,p,y,$,w,E=n;2!==b&&(b=2,l&&e.clearTimeout(l),i=void 0,a=s||"",x.readyState=t>0?4:0,u=t>=200&&300>t||304===t,r&&($=V(d,x,r)),$=G(d,$,x,u),u?(d.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(oe.lastModified[o]=w),w=x.getResponseHeader("etag"),w&&(oe.etag[o]=w)),204===t||"HEAD"===d.type?E="nocontent":304===t?E="notmodified":(E=$.state,p=$.data,y=$.error,u=!y)):(y=E,!t&&E||(E="error",0>t&&(t=0))),x.status=t,x.statusText=(n||E)+"",u?g.resolveWith(h,[p,E,x]):g.rejectWith(h,[x,E,y]),x.statusCode(v),v=void 0,c&&f.trigger(u?"ajaxSuccess":"ajaxError",[x,d,u?p:y]),m.fireWith(h,[x,E]),c&&(f.trigger("ajaxComplete",[x,d]),--oe.active||oe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,a,s,l,u,c,p,d=oe.ajaxSetup({},n),h=d.context||d,f=d.context&&(h.nodeType||h.jquery)?oe(h):oe.event,g=oe.Deferred(),m=oe.Callbacks("once memory"),v=d.statusCode||{},y={},$={},b=0,w="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!s)for(s={};t=wt.exec(a);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?a:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=$[n]=$[n]||e,y[e]=t),this},overrideMimeType:function(e){return b||(d.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>b)for(t in e)v[t]=[v[t],e[t]];else x.always(e[x.status]);return this},abort:function(e){var t=e||w;return i&&i.abort(t),r(0,t),this}};if(g.promise(x).complete=m.add,x.success=x.done,x.error=x.fail,d.url=((t||d.url||mt.href)+"").replace($t,"").replace(Ct,mt.protocol+"//"),d.type=n.method||n.type||d.method||d.type,d.dataTypes=oe.trim(d.dataType||"*").toLowerCase().match(we)||[""],null==d.crossDomain){u=Y.createElement("a");try{u.href=d.url,u.href=u.href,d.crossDomain=Nt.protocol+"//"+Nt.host!=u.protocol+"//"+u.host}catch(E){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=oe.param(d.data,d.traditional)),B(St,d,n,x),2===b)return x;c=oe.event&&d.global,c&&0===oe.active++&&oe.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Et.test(d.type),o=d.url,d.hasContent||(d.data&&(o=d.url+=(yt.test(o)?"&":"?")+d.data,delete d.data),d.cache===!1&&(d.url=bt.test(o)?o.replace(bt,"$1_="+vt++):o+(yt.test(o)?"&":"?")+"_="+vt++)),d.ifModified&&(oe.lastModified[o]&&x.setRequestHeader("If-Modified-Since",oe.lastModified[o]),oe.etag[o]&&x.setRequestHeader("If-None-Match",oe.etag[o])),(d.data&&d.hasContent&&d.contentType!==!1||n.contentType)&&x.setRequestHeader("Content-Type",d.contentType),x.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+At+"; q=0.01":""):d.accepts["*"]);for(p in d.headers)x.setRequestHeader(p,d.headers[p]);if(d.beforeSend&&(d.beforeSend.call(h,x,d)===!1||2===b))return x.abort();w="abort";for(p in{success:1,error:1,complete:1})x[p](d[p]);if(i=B(Tt,d,n,x)){if(x.readyState=1,c&&f.trigger("ajaxSend",[x,d]),2===b)return x;d.async&&d.timeout>0&&(l=e.setTimeout(function(){x.abort("timeout")},d.timeout));try{b=1,i.send(y,r)}catch(E){if(!(2>b))throw E;r(-1,E)}}else r(-1,"No Transport");return x},getJSON:function(e,t,n){return oe.get(e,t,n,"json")},getScript:function(e,t){return oe.get(e,void 0,t,"script")}}),oe.each(["get","post"],function(e,t){oe[t]=function(e,n,r,i){return oe.isFunction(n)&&(i=i||r,r=n,n=void 0),oe.ajax(oe.extend({url:e,type:t,dataType:i,data:n,success:r},oe.isPlainObject(e)&&e))}}),oe._evalUrl=function(e){return oe.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},oe.fn.extend({wrapAll:function(e){var t;return oe.isFunction(e)?this.each(function(t){oe(this).wrapAll(e.call(this,t))}):(this[0]&&(t=oe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return oe.isFunction(e)?this.each(function(t){oe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=oe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=oe.isFunction(e);return this.each(function(n){oe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){oe.nodeName(this,"body")||oe(this).replaceWith(this.childNodes)}).end()}}),oe.expr.filters.hidden=function(e){return!oe.expr.filters.visible(e)},oe.expr.filters.visible=function(e){return e.offsetWidth>0||e.offsetHeight>0||e.getClientRects().length>0};var Lt=/%20/g,Ot=/\[\]$/,It=/\r?\n/g,kt=/^(?:submit|button|image|reset|file)$/i,Rt=/^(?:input|select|textarea|keygen)/i;oe.param=function(e,t){var n,r=[],i=function(e,t){t=oe.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=oe.ajaxSettings&&oe.ajaxSettings.traditional),oe.isArray(e)||e.jquery&&!oe.isPlainObject(e))oe.each(e,function(){i(this.name,this.value)});else for(n in e)W(n,e[n],t,i);return r.join("&").replace(Lt,"+")},oe.fn.extend({serialize:function(){return oe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=oe.prop(this,"elements");return e?oe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!oe(this).is(":disabled")&&Rt.test(this.nodeName)&&!kt.test(e)&&(this.checked||!Re.test(e))}).map(function(e,t){var n=oe(this).val();return null==n?null:oe.isArray(n)?oe.map(n,function(e){return{name:t.name,value:e.replace(It,"\r\n")}}):{name:t.name,value:n.replace(It,"\r\n")}}).get()}}),oe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(t){}};var Mt={0:200,1223:204},_t=oe.ajaxSettings.xhr();re.cors=!!_t&&"withCredentials"in _t,re.ajax=_t=!!_t,oe.ajaxTransport(function(t){var n,r;return re.cors||_t&&!t.crossDomain?{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)s.setRequestHeader(a,i[a]);n=function(e){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Mt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(l){if(n)throw l}},abort:function(){n&&n()}}:void 0}),oe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return oe.globalEval(e),e}}}),oe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),oe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=oe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),Y.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Dt=[],jt=/(=)\?(?=&|$)|\?\?/;oe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Dt.pop()||oe.expando+"_"+vt++;return this[e]=!0,e}}),oe.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=t.jsonp!==!1&&(jt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&jt.test(t.data)&&"data");return s||"jsonp"===t.dataTypes[0]?(i=t.jsonpCallback=oe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(jt,"$1"+i):t.jsonp!==!1&&(t.url+=(yt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||oe.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},r.always(function(){void 0===o?oe(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Dt.push(i)),a&&oe.isFunction(o)&&o(a[0]),a=o=void 0}),"script"):void 0}),oe.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||Y;var r=fe.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=d([e],t,i),i&&i.length&&oe(i).remove(),oe.merge([],r.childNodes))};var Pt=oe.fn.load;oe.fn.load=function(e,t,n){if("string"!=typeof e&&Pt)return Pt.apply(this,arguments);var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=oe.trim(e.slice(s)),e=e.slice(0,s)),oe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&oe.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?oe("<div>").append(oe.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},oe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){oe.fn[t]=function(e){return this.on(t,e)}}),oe.expr.filters.animated=function(e){return oe.grep(oe.timers,function(t){return e===t.elem}).length},oe.offset={setOffset:function(e,t,n){var r,i,o,a,s,l,u,c=oe.css(e,"position"),p=oe(e),d={};"static"===c&&(e.style.position="relative"),s=p.offset(),o=oe.css(e,"top"),l=oe.css(e,"left"),u=("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1,u?(r=p.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(l)||0),oe.isFunction(t)&&(t=t.call(e,n,oe.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+i),"using"in t?t.using.call(e,d):p.css(d)}},oe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){oe.offset.setOffset(this,e,t)});var t,n,r=this[0],i={top:0,left:0},o=r&&r.ownerDocument;if(o)return t=o.documentElement,oe.contains(t,r)?(i=r.getBoundingClientRect(),n=z(o),{top:i.top+n.pageYOffset-t.clientTop,left:i.left+n.pageXOffset-t.clientLeft}):i},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===oe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),oe.nodeName(e[0],"html")||(r=e.offset()),r.top+=oe.css(e[0],"borderTopWidth",!0),r.left+=oe.css(e[0],"borderLeftWidth",!0)),{top:t.top-r.top-oe.css(n,"marginTop",!0),left:t.left-r.left-oe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===oe.css(e,"position");)e=e.offsetParent;return e||Je})}}),oe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;oe.fn[e]=function(r){return Ee(this,function(e,r,i){var o=z(e);return void 0===i?o?o[t]:e[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i)},e,r,arguments.length)}}),oe.each(["top","left"],function(e,t){oe.cssHooks[t]=A(re.pixelPosition,function(e,n){return n?(n=T(e,t),Ye.test(n)?oe(e).position()[t]+"px":n):void 0})}),oe.each({Height:"height",Width:"width"},function(e,t){oe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){oe.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),a=n||(r===!0||i===!0?"margin":"border");return Ee(this,function(t,n,r){var i;return oe.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?oe.css(t,n,a):oe.style(t,n,r,a)},t,o?r:void 0,o,null)}})}),oe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},size:function(){return this.length}}),oe.fn.andSelf=oe.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return oe});var Ft=e.jQuery,qt=e.$;return oe.noConflict=function(t){return e.$===oe&&(e.$=qt),t&&e.jQuery===oe&&(e.jQuery=Ft),oe},t||(e.jQuery=e.$=oe),oe});
//# sourceMappingURL=data:application/json;base64,
