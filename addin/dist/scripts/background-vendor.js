!function(e){"use strict";function t(e){return function(){var t,n=arguments[0];for(t="["+(e?e+":":"")+n+"] http://errors.angularjs.org/1.5.7/"+(e?e+"/":"")+n,n=1;n<arguments.length;n++){t=t+(1==n?"?":"&")+"p"+(n-1)+"=";var r,i=encodeURIComponent;r=arguments[n],r="function"==typeof r?r.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof r?"undefined":"string"!=typeof r?JSON.stringify(r):r,t+=i(r)}return Error(t)}}function n(e){if(null==e||S(e))return!1;if(ar(e)||b(e)||Wn&&e instanceof Wn)return!0;var t="length"in Object(e)&&e.length;return x(t)&&(t>=0&&(t-1 in e||e instanceof Array)||"function"==typeof e.item)}function r(e,t,i){var o,a;if(e)if(C(e))for(o in e)"prototype"==o||"length"==o||"name"==o||e.hasOwnProperty&&!e.hasOwnProperty(o)||t.call(i,e[o],o,e);else if(ar(e)||n(e)){var s="object"!=typeof e;for(o=0,a=e.length;a>o;o++)(s||o in e)&&t.call(i,e[o],o,e)}else if(e.forEach&&e.forEach!==r)e.forEach(t,i,e);else if($(e))for(o in e)t.call(i,e[o],o,e);else if("function"==typeof e.hasOwnProperty)for(o in e)e.hasOwnProperty(o)&&t.call(i,e[o],o,e);else for(o in e)Xn.call(e,o)&&t.call(i,e[o],o,e);return e}function i(e,t,n){for(var r=Object.keys(e).sort(),i=0;i<r.length;i++)t.call(n,e[r[i]],r[i]);return r}function o(e){return function(t,n){e(n,t)}}function a(){return++or}function s(e,t,n){for(var r=e.$$hashKey,i=0,o=t.length;o>i;++i){var a=t[i];if(y(a)||C(a))for(var l=Object.keys(a),u=0,c=l.length;c>u;u++){var p=l[u],f=a[p];n&&y(f)?w(f)?e[p]=new Date(f.valueOf()):E(f)?e[p]=new RegExp(f):f.nodeName?e[p]=f.cloneNode(!0):k(f)?e[p]=f.clone():(y(e[p])||(e[p]=ar(f)?[]:{}),s(e[p],[f],!0)):e[p]=f}}return r?e.$$hashKey=r:delete e.$$hashKey,e}function l(e){return s(e,Qn.call(arguments,1),!1)}function u(e){return s(e,Qn.call(arguments,1),!0)}function c(e){return parseInt(e,10)}function p(e,t){return l(Object.create(e),t)}function f(){}function d(e){return e}function h(e){return function(){return e}}function g(e){return C(e.toString)&&e.toString!==tr}function m(e){return"undefined"==typeof e}function v(e){return"undefined"!=typeof e}function y(e){return null!==e&&"object"==typeof e}function $(e){return null!==e&&"object"==typeof e&&!nr(e)}function b(e){return"string"==typeof e}function x(e){return"number"==typeof e}function w(e){return"[object Date]"===tr.call(e)}function C(e){return"function"==typeof e}function E(e){return"[object RegExp]"===tr.call(e)}function S(e){return e&&e.window===e}function T(e){return e&&e.$evalAsync&&e.$watch}function L(e){return"boolean"==typeof e}function A(e){return e&&x(e.length)&&sr.test(tr.call(e))}function k(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function M(e){var t={};e=e.split(",");var n;for(n=0;n<e.length;n++)t[e[n]]=!0;return t}function N(e){return Yn(e.nodeName||e[0]&&e[0].nodeName)}function D(e,t){var n=e.indexOf(t);return n>=0&&e.splice(n,1),n}function I(e,t){function n(e,t){var n,r=t.$$hashKey;if(ar(e)){n=0;for(var o=e.length;o>n;n++)t.push(i(e[n]))}else if($(e))for(n in e)t[n]=i(e[n]);else if(e&&"function"==typeof e.hasOwnProperty)for(n in e)e.hasOwnProperty(n)&&(t[n]=i(e[n]));else for(n in e)Xn.call(e,n)&&(t[n]=i(e[n]));return r?t.$$hashKey=r:delete t.$$hashKey,t}function i(e){if(!y(e))return e;var t=a.indexOf(e);if(-1!==t)return s[t];if(S(e)||T(e))throw rr("cpws");var t=!1,r=o(e);return void 0===r&&(r=ar(e)?[]:Object.create(nr(e)),t=!0),a.push(e),s.push(r),t?n(e,r):r}function o(e){switch(tr.call(e)){case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Float32Array]":case"[object Float64Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return new e.constructor(i(e.buffer));case"[object ArrayBuffer]":if(!e.slice){var t=new ArrayBuffer(e.byteLength);return new Uint8Array(t).set(new Uint8Array(e)),t}return e.slice(0);case"[object Boolean]":case"[object Number]":case"[object String]":case"[object Date]":return new e.constructor(e.valueOf());case"[object RegExp]":return t=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]),t.lastIndex=e.lastIndex,t;case"[object Blob]":return new e.constructor([e],{type:e.type})}return C(e.cloneNode)?e.cloneNode(!0):void 0}var a=[],s=[];if(t){if(A(t)||"[object ArrayBuffer]"===tr.call(t))throw rr("cpta");if(e===t)throw rr("cpi");return ar(t)?t.length=0:r(t,function(e,n){"$$hashKey"!==n&&delete t[n]}),a.push(e),s.push(t),n(e,t)}return i(e)}function O(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var n,r=typeof e;if(r==typeof t&&"object"==r){if(!ar(e)){if(w(e))return w(t)?O(e.getTime(),t.getTime()):!1;if(E(e))return E(t)?e.toString()==t.toString():!1;if(T(e)||T(t)||S(e)||S(t)||ar(t)||w(t)||E(t))return!1;r=ae();for(n in e)if("$"!==n.charAt(0)&&!C(e[n])){if(!O(e[n],t[n]))return!1;r[n]=!0}for(n in t)if(!(n in r)&&"$"!==n.charAt(0)&&v(t[n])&&!C(t[n]))return!1;return!0}if(!ar(t))return!1;if((r=e.length)==t.length){for(n=0;r>n;n++)if(!O(e[n],t[n]))return!1;return!0}}return!1}function j(e,t,n){return e.concat(Qn.call(t,n))}function R(e,t){var n=2<arguments.length?Qn.call(arguments,2):[];return!C(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,j(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function P(t,n){var r=n;return"string"==typeof t&&"$"===t.charAt(0)&&"$"===t.charAt(1)?r=void 0:S(n)?r="$WINDOW":n&&e.document===n?r="$DOCUMENT":T(n)&&(r="$SCOPE"),r}function F(e,t){return m(e)?void 0:(x(t)||(t=t?2:null),JSON.stringify(e,P,t))}function H(e){return b(e)?JSON.parse(e):e}function B(e,t){e=e.replace(fr,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function _(e,t,n){n=n?-1:1;var r=e.getTimezoneOffset();return t=B(t,r),n*=t-r,e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+n),e}function V(e){e=Wn(e).clone();try{e.empty()}catch(t){}var n=Wn("<div>").append(e).html();try{return e[0].nodeType===mr?Yn(n):n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(e,t){return"<"+Yn(t)})}catch(r){return Yn(n)}}function U(e){try{return decodeURIComponent(e)}catch(t){}}function q(e){var t={};return r((e||"").split("&"),function(e){var n,r,i;e&&(r=e=e.replace(/\+/g,"%20"),n=e.indexOf("="),-1!==n&&(r=e.substring(0,n),i=e.substring(n+1)),r=U(r),v(r)&&(i=v(i)?U(i):!0,Xn.call(t,r)?ar(t[r])?t[r].push(i):t[r]=[t[r],i]:t[r]=i))}),t}function W(e){var t=[];return r(e,function(e,n){ar(e)?r(e,function(e){t.push(z(n,!0)+(!0===e?"":"="+z(e,!0)))}):t.push(z(n,!0)+(!0===e?"":"="+z(e,!0)))}),t.length?t.join("&"):""}function G(e){return z(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function z(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function K(e,t){var n,r,i=dr.length;for(r=0;i>r;++r)if(n=dr[r]+t,b(n=e.getAttribute(n)))return n;return null}function X(e,t){var n,i,o={};r(dr,function(t){t+="app",!n&&e.hasAttribute&&e.hasAttribute(t)&&(n=e,i=e.getAttribute(t))}),r(dr,function(t){t+="app";var r;!n&&(r=e.querySelector("["+t.replace(":","\\:")+"]"))&&(n=r,i=r.getAttribute(t))}),n&&(o.strictDi=null!==K(n,"strict-di"),t(n,i?[i]:[],o))}function Y(t,n,i){y(i)||(i={}),i=l({strictDi:!1},i);var o=function(){if(t=Wn(t),t.injector()){var r=t[0]===e.document?"document":V(t);throw rr("btstrpd",r.replace(/</,"&lt;").replace(/>/,"&gt;"))}return n=n||[],n.unshift(["$provide",function(e){e.value("$rootElement",t)}]),i.debugInfoEnabled&&n.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),n.unshift("ng"),r=He(n,i.strictDi),r.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),r},a=/^NG_ENABLE_DEBUG_INFO!/,s=/^NG_DEFER_BOOTSTRAP!/;return e&&a.test(e.name)&&(i.debugInfoEnabled=!0,e.name=e.name.replace(a,"")),e&&!s.test(e.name)?o():(e.name=e.name.replace(s,""),ir.resumeBootstrap=function(e){return r(e,function(e){n.push(e)}),o()},void(C(ir.resumeDeferredBootstrap)&&ir.resumeDeferredBootstrap()))}function J(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function Q(e){if(e=ir.element(e).injector(),!e)throw rr("test");return e.get("$$testability")}function Z(e,t){return t=t||"_",e.replace(hr,function(e,n){return(n?t:"")+e.toLowerCase()})}function ee(){var t;if(!gr){var n=pr();(Gn=m(n)?e.jQuery:n?e[n]:void 0)&&Gn.fn.on?(Wn=Gn,l(Gn.fn,{scope:Mr.scope,isolateScope:Mr.isolateScope,controller:Mr.controller,injector:Mr.injector,inheritedData:Mr.inheritedData}),t=Gn.cleanData,Gn.cleanData=function(e){for(var n,r,i=0;null!=(r=e[i]);i++)(n=Gn._data(r,"events"))&&n.$destroy&&Gn(r).triggerHandler("$destroy");t(e)}):Wn=he,ir.element=Wn,gr=!0}}function te(e,t,n){if(!e)throw rr("areq",t||"?",n||"required");return e}function ne(e,t,n){return n&&ar(e)&&(e=e[e.length-1]),te(C(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function re(e,t){if("hasOwnProperty"===e)throw rr("badname",t)}function ie(e,t,n){if(!t)return e;t=t.split(".");for(var r,i=e,o=t.length,a=0;o>a;a++)r=t[a],e&&(e=(i=e)[r]);return!n&&C(e)?R(i,e):e}function oe(e){for(var t,n=e[0],r=e[e.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(t||e[i]!==n)&&(t||(t=Wn(Qn.call(e,0,i))),t.push(n));return t||e}function ae(){return Object.create(null)}function se(e){function n(e,t,n){return e[t]||(e[t]=n())}var r=t("$injector"),i=t("ng");return e=n(e,"angular",Object),e.$$minErr=e.$$minErr||t,n(e,"module",function(){var e={};return function(t,o,a){if("hasOwnProperty"===t)throw i("badname","module");return o&&e.hasOwnProperty(t)&&(e[t]=null),n(e,t,function(){function e(e,t,n,r){return r||(r=i),function(){return r[n||"push"]([e,t,arguments]),c}}function n(e,n){return function(r,o){return o&&C(o)&&(o.$$moduleName=t),i.push([e,n,arguments]),c}}if(!o)throw r("nomod",t);var i=[],s=[],l=[],u=e("$injector","invoke","push",s),c={_invokeQueue:i,_configBlocks:s,_runBlocks:l,requires:o,name:t,provider:n("$provide","provider"),factory:n("$provide","factory"),service:n("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:n("$provide","decorator"),animation:n("$animateProvider","register"),filter:n("$filterProvider","register"),controller:n("$controllerProvider","register"),directive:n("$compileProvider","directive"),component:n("$compileProvider","component"),config:u,run:function(e){return l.push(e),this}};return a&&u(a),c})}})}function le(e,t){if(ar(e)){t=t||[];for(var n=0,r=e.length;r>n;n++)t[n]=e[n]}else if(y(e))for(n in t=t||{},e)"$"===n.charAt(0)&&"$"===n.charAt(1)||(t[n]=e[n]);return t||e}function ue(n){l(n,{bootstrap:Y,copy:I,extend:l,merge:u,equals:O,element:Wn,forEach:r,injector:He,noop:f,bind:R,toJson:F,fromJson:H,identity:d,isUndefined:m,isDefined:v,isString:b,isFunction:C,isObject:y,isNumber:x,isElement:k,isArray:ar,version:vr,isDate:w,lowercase:Yn,uppercase:Jn,callbacks:{counter:0},getTestability:Q,$$minErr:t,$$csp:cr,reloadWithDebugInfo:J}),(zn=se(e))("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:Jt}),e.provider("$compile",Ke).directive({a:ji,input:Qi,textarea:Qi,form:Hi,script:Vo,select:Wo,style:zo,option:Go,ngBind:to,ngBindHtml:ro,ngBindTemplate:no,ngClass:oo,ngClassEven:so,ngClassOdd:ao,ngCloak:lo,ngController:uo,ngForm:Bi,ngHide:jo,ngIf:fo,ngInclude:ho,ngInit:mo,ngNonBindable:Ao,ngPluralize:Do,ngRepeat:Io,ngShow:Oo,ngStyle:Ro,ngSwitch:Po,ngSwitchWhen:Fo,ngSwitchDefault:Ho,ngOptions:No,ngTransclude:_o,ngModel:So,ngList:vo,ngChange:io,pattern:Xo,ngPattern:Xo,required:Ko,ngRequired:Ko,minlength:Jo,ngMinlength:Jo,maxlength:Yo,ngMaxlength:Yo,ngValue:eo,ngModelOptions:Lo}).directive({ngInclude:go}).directive(Ri).directive(co),e.provider({$anchorScroll:Be,$animate:qr,$animateCss:zr,$$animateJs:Vr,$$animateQueue:Ur,$$AnimateRunner:Gr,$$animateAsyncRun:Wr,$browser:We,$cacheFactory:Ge,$controller:et,$document:tt,$exceptionHandler:nt,$filter:fn,$$forceReflow:Zr,$interpolate:ht,$interval:gt,$http:ct,$httpParamSerializer:it,$httpParamSerializerJQLike:ot,$httpBackend:ft,$xhrFactory:pt,$location:Lt,$log:At,$parse:Wt,$rootScope:Yt,$q:Gt,$$q:zt,$sce:tn,$sceDelegate:en,$sniffer:nn,$templateCache:ze,$templateRequest:rn,$$testability:on,$timeout:an,$window:un,$$rAF:Xt,$$jqLite:Oe,$$HashMap:Or,$$cookieReader:pn})}])}function ce(e){return e.replace(br,function(e,t,n,r){return r?n.toUpperCase():n}).replace(xr,"Moz$1")}function pe(e){return e=e.nodeType,1===e||!e||9===e}function fe(e,t){var n,i,o=t.createDocumentFragment(),a=[];if(Sr.test(e)){for(n=n||o.appendChild(t.createElement("div")),i=(Tr.exec(e)||["",""])[1].toLowerCase(),i=Ar[i]||Ar._default,n.innerHTML=i[1]+e.replace(Lr,"<$1></$2>")+i[2],i=i[0];i--;)n=n.lastChild;a=j(a,n.childNodes),n=o.firstChild,n.textContent=""}else a.push(t.createTextNode(e));return o.textContent="",o.innerHTML="",r(a,function(e){o.appendChild(e)}),o}function de(e,t){var n=e.parentNode;n&&n.replaceChild(t,e),t.appendChild(e)}function he(t){if(t instanceof he)return t;var n;if(b(t)&&(t=lr(t),n=!0),!(this instanceof he)){if(n&&"<"!=t.charAt(0))throw Cr("nosel");return new he(t)}if(n){n=e.document;var r;t=(r=Er.exec(t))?[n.createElement(r[1])]:(r=fe(t,n))?r.childNodes:[]}Ee(this,t)}function ge(e){return e.cloneNode(!0)}function me(e,t){if(t||ye(e),e.querySelectorAll)for(var n=e.querySelectorAll("*"),r=0,i=n.length;i>r;r++)ye(n[r])}function ve(e,t,n,i){if(v(i))throw Cr("offargs");var o=(i=$e(e))&&i.events,a=i&&i.handle;if(a)if(t){var s=function(t){var r=o[t];v(n)&&D(r||[],n),v(n)&&r&&0<r.length||(e.removeEventListener(t,a,!1),delete o[t])};r(t.split(" "),function(e){s(e),wr[e]&&s(wr[e])})}else for(t in o)"$destroy"!==t&&e.removeEventListener(t,a,!1),delete o[t]}function ye(e,t){var n=e.ng339,r=n&&yr[n];r&&(t?delete r.data[t]:(r.handle&&(r.events.$destroy&&r.handle({},"$destroy"),ve(e)),delete yr[n],e.ng339=void 0))}function $e(e,t){var n=e.ng339,n=n&&yr[n];return t&&!n&&(e.ng339=n=++$r,n=yr[n]={events:{},data:{},handle:void 0}),n}function be(e,t,n){if(pe(e)){var r=v(n),i=!r&&t&&!y(t),o=!t;if(e=(e=$e(e,!i))&&e.data,r)e[t]=n;else{if(o)return e;if(i)return e&&e[t];l(e,t)}}}function xe(e,t){return e.getAttribute?-1<(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" "):!1}function we(e,t){t&&e.setAttribute&&r(t.split(" "),function(t){e.setAttribute("class",lr((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+lr(t)+" "," ")))})}function Ce(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");r(t.split(" "),function(e){e=lr(e),-1===n.indexOf(" "+e+" ")&&(n+=e+" ")}),e.setAttribute("class",lr(n))}}function Ee(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;n>r;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function Se(e,t){return Te(e,"$"+(t||"ngController")+"Controller")}function Te(e,t,n){for(9==e.nodeType&&(e=e.documentElement),t=ar(t)?t:[t];e;){for(var r=0,i=t.length;i>r;r++)if(v(n=Wn.data(e,t[r])))return n;e=e.parentNode||11===e.nodeType&&e.host}}function Le(e){for(me(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function Ae(e,t){t||me(e);var n=e.parentNode;n&&n.removeChild(e)}function ke(t,n){n=n||e,"complete"===n.document.readyState?n.setTimeout(t):Wn(n).on("load",t)}function Me(e,t){var n=Nr[t.toLowerCase()];return n&&Dr[N(e)]&&n}function Ne(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=t[r||n.type],o=i?i.length:0;if(o){if(m(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return!0===n.immediatePropagationStopped};var s=i.specialHandlerWrapper||De;o>1&&(i=le(i));for(var l=0;o>l;l++)n.isImmediatePropagationStopped()||s(e,n,i[l])}};return n.elem=e,n}function De(e,t,n){n.call(e,t)}function Ie(e,t,n){var r=t.relatedTarget;r&&(r===e||kr.call(e,r))||n.call(e,t)}function Oe(){this.$get=function(){return l(he,{hasClass:function(e,t){return e.attr&&(e=e[0]),xe(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),Ce(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),we(e,t)}})}}function je(e,t){var n=e&&e.$$hashKey;return n?("function"==typeof n&&(n=e.$$hashKey()),n):(n=typeof e,n="function"==n||"object"==n&&null!==e?e.$$hashKey=n+":"+(t||a)():n+":"+e)}function Re(e,t){if(t){var n=0;this.nextUid=function(){return++n}}r(e,this.put,this)}function Pe(e){return e=(Function.prototype.toString.call(e)+" ").replace(Hr,""),e.match(jr)||e.match(Rr)}function Fe(e){return(e=Pe(e))?"function("+(e[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function He(e,t){function n(e){return function(t,n){return y(t)?void r(t,o(e)):e(t,n)}}function i(e,t){if(re(e,"service"),(C(t)||ar(t))&&(t=g.instantiate(t)),!t.$get)throw Br("pget",e);return d[e+"Provider"]=t}function a(e,t){return function(){var n=x.invoke(t,this);if(m(n))throw Br("undef",e);return n}}function s(e,t,n){return i(e,{$get:!1!==n?a(e,t):t})}function l(e){te(m(e)||ar(e),"modulesToLoad","not an array");var t,n=[];return r(e,function(e){function r(e){var t,n;for(t=0,n=e.length;n>t;t++){var r=e[t],i=g.get(r[0]);i[r[1]].apply(i,r[2])}}if(!f.get(e)){f.put(e,!0);try{b(e)?(t=zn(e),n=n.concat(l(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):C(e)?n.push(g.invoke(e)):ar(e)?n.push(g.invoke(e)):ne(e,"module")}catch(i){throw ar(e)&&(e=e[e.length-1]),i.message&&i.stack&&-1==i.stack.indexOf(i.message)&&(i=i.message+"\n"+i.stack),Br("modulerr",e,i.stack||i.message||i)}}}),n}function u(e,n){function r(t,r){if(e.hasOwnProperty(t)){if(e[t]===c)throw Br("cdep",t+" <- "+p.join(" <- "));return e[t]}try{return p.unshift(t),e[t]=c,e[t]=n(t,r)}catch(i){throw e[t]===c&&delete e[t],i}finally{p.shift()}}function i(e,n,i){var o=[];e=He.$$annotate(e,t,i);for(var a=0,s=e.length;s>a;a++){var l=e[a];if("string"!=typeof l)throw Br("itkn",l);o.push(n&&n.hasOwnProperty(l)?n[l]:r(l,i))}return o}return{invoke:function(e,t,n,r){return"string"==typeof n&&(r=n,n=null),n=i(e,n,r),ar(e)&&(e=e[e.length-1]),r=11>=qn?!1:"function"==typeof e&&/^(?:class\s|constructor\()/.test(Function.prototype.toString.call(e)+" "),r?(n.unshift(null),new(Function.prototype.bind.apply(e,n))):e.apply(t,n)},instantiate:function(e,t,n){var r=ar(e)?e[e.length-1]:e;return e=i(e,t,n),e.unshift(null),new(Function.prototype.bind.apply(r,e))},get:r,annotate:He.$$annotate,has:function(t){return d.hasOwnProperty(t+"Provider")||e.hasOwnProperty(t)}}}t=!0===t;var c={},p=[],f=new Re([],!0),d={$provide:{provider:n(i),factory:n(s),service:n(function(e,t){return s(e,["$injector",function(e){return e.instantiate(t)}])}),value:n(function(e,t){return s(e,h(t),!1)}),constant:n(function(e,t){re(e,"constant"),d[e]=t,v[e]=t}),decorator:function(e,t){var n=g.get(e+"Provider"),r=n.$get;n.$get=function(){var e=x.invoke(r,n);return x.invoke(t,null,{$delegate:e})}}}},g=d.$injector=u(d,function(e,t){throw ir.isString(t)&&p.push(t),Br("unpr",p.join(" <- "))}),v={},$=u(v,function(e,t){var n=g.get(e+"Provider",t);return x.invoke(n.$get,n,void 0,e)}),x=$;d.$injectorProvider={$get:h($)};var w=l(e),x=$.get("$injector");return x.strictDi=t,r(w,function(e){e&&x.invoke(e)}),x}function Be(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,n,r){function i(e){var t=null;return Array.prototype.some.call(e,function(e){return"a"===N(e)?(t=e,!0):void 0}),t}function o(e){if(e){e.scrollIntoView();var n;n=a.yOffset,C(n)?n=n():k(n)?(n=n[0],n="fixed"!==t.getComputedStyle(n).position?0:n.getBoundingClientRect().bottom):x(n)||(n=0),n&&(e=e.getBoundingClientRect().top,t.scrollBy(0,e-n))}else t.scrollTo(0,0)}function a(e){e=b(e)?e:n.hash();var t;e?(t=s.getElementById(e))?o(t):(t=i(s.getElementsByName(e)))?o(t):"top"===e&&o(null):o(null)}var s=t.document;return e&&r.$watch(function(){return n.hash()},function(e,t){e===t&&""===e||ke(function(){r.$evalAsync(a)})}),a}]}function _e(e,t){return e||t?e?t?(ar(e)&&(e=e.join(" ")),ar(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function Ve(e){b(e)&&(e=e.split(" "));var t=ae();return r(e,function(e){e.length&&(t[e]=!0)}),t}function Ue(e){return y(e)?e:{}}function qe(e,t,n,i){function o(e){try{e.apply(null,Qn.call(arguments,1))}finally{if(v--,0===v)for(;y.length;)try{y.pop()()}catch(t){n.error(t)}}}function a(){C=null,s(),l()}function s(){$=E(),$=m($)?null:$,O($,L)&&($=L),L=$}function l(){x===u.url()&&b===$||(x=u.url(),b=$,r(S,function(e){e(u.url(),$)}))}var u=this,c=e.location,p=e.history,d=e.setTimeout,h=e.clearTimeout,g={};u.isMock=!1;var v=0,y=[];u.$$completeOutstandingRequest=o,u.$$incOutstandingRequestCount=function(){v++},u.notifyWhenNoOutstandingRequests=function(e){0===v?e():y.push(e)};var $,b,x=c.href,w=t.find("base"),C=null,E=i.history?function(){try{return p.state}catch(e){}}:f;s(),b=$,u.url=function(t,n,r){if(m(r)&&(r=null),c!==e.location&&(c=e.location),p!==e.history&&(p=e.history),t){var o=b===r;if(x===t&&(!i.history||o))return u;var a=x&&bt(x)===bt(t);return x=t,b=r,!i.history||a&&o?(a||(C=t),n?c.replace(t):a?(n=c,r=t.indexOf("#"),r=-1===r?"":t.substr(r),n.hash=r):c.href=t,c.href!==t&&(C=t)):(p[n?"replaceState":"pushState"](r,"",t),s(),b=$),C&&(C=t),u}return C||c.href.replace(/%27/g,"'")},u.state=function(){return $};var S=[],T=!1,L=null;u.onUrlChange=function(t){return T||(i.history&&Wn(e).on("popstate",a),Wn(e).on("hashchange",a),T=!0),S.push(t),t},u.$$applicationDestroyed=function(){Wn(e).off("hashchange popstate",a)},u.$$checkUrlChange=l,u.baseHref=function(){var e=w.attr("href");return e?e.replace(/^(https?\:)?\/\/[^\/]*/,""):""},u.defer=function(e,t){var n;return v++,n=d(function(){delete g[n],o(e)},t||0),g[n]=!0,n},u.defer.cancel=function(e){return g[e]?(delete g[e],h(e),o(f),!0):!1}}function We(){this.$get=["$window","$log","$sniffer","$document",function(e,t,n,r){return new qe(e,r,t,n)}]}function Ge(){this.$get=function(){function e(e,r){function i(e){e!=f&&(d?d==e&&(d=e.n):d=e,o(e.n,e.p),o(e,f),f=e,f.n=null)}function o(e,t){e!=t&&(e&&(e.p=t),t&&(t.n=e))}if(e in n)throw t("$cacheFactory")("iid",e);var a=0,s=l({},r,{id:e}),u=ae(),c=r&&r.capacity||Number.MAX_VALUE,p=ae(),f=null,d=null;return n[e]={put:function(e,t){if(!m(t)){if(c<Number.MAX_VALUE){var n=p[e]||(p[e]={key:e});i(n)}return e in u||a++,u[e]=t,a>c&&this.remove(d.key),t}},get:function(e){if(c<Number.MAX_VALUE){var t=p[e];if(!t)return;i(t)}return u[e]},remove:function(e){if(c<Number.MAX_VALUE){var t=p[e];if(!t)return;t==f&&(f=t.p),t==d&&(d=t.n),o(t.n,t.p),delete p[e]}e in u&&(delete u[e],a--)},removeAll:function(){u=ae(),a=0,p=ae(),f=d=null},destroy:function(){p=s=u=null,delete n[e]},info:function(){return l({},s,{size:a})}}}var n={};return e.info=function(){var e={};return r(n,function(t,n){e[n]=t.info()}),e},e.get=function(e){return n[e]},e}}function ze(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function Ke(t,n){function i(e,t,n){var i=/^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/,o=ae();return r(e,function(e,r){if(e in E)o[r]=E[e];else{var a=e.match(i);if(!a)throw Kr("iscp",t,r,e,n?"controller bindings definition":"isolate scope definition");o[r]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||r},a[4]&&(E[e]=o[r])}}),o}function a(e){var t=e.charAt(0);if(!t||t!==Yn(t))throw Kr("baddir",e);if(e!==e.trim())throw Kr("baddir",e)}function s(e){var t=e.require||e.controller&&e.name;return!ar(t)&&y(t)&&r(t,function(e,n){var r=e.match(x);e.substring(r[0].length)||(t[n]=r[0]+n)}),t}var u={},c=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,g=/(([\w\-]+)(?:\:([^;]+))?;?)/,$=M("ngSrc,ngSrcset,src,srcset"),x=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,w=/^(on[a-z]+|formaction)$/,E=ae();this.directive=function k(e,n){return re(e,"directive"),b(e)?(a(e),te(n,"directiveFactory"),u.hasOwnProperty(e)||(u[e]=[],t.factory(e+"Directive",["$injector","$exceptionHandler",function(t,n){var i=[];return r(u[e],function(r,o){try{var a=t.invoke(r);C(a)?a={compile:h(a)}:!a.compile&&a.link&&(a.compile=h(a.link)),a.priority=a.priority||0,a.index=o,a.name=a.name||e,a.require=s(a),a.restrict=a.restrict||"EA",a.$$moduleName=r.$$moduleName,i.push(a)}catch(l){n(l)}}),i}])),u[e].push(n)):r(e,o(k)),this},this.component=function(e,t){function n(e){function n(t){return C(t)||ar(t)?function(n,r){return e.invoke(t,this,{$element:n,$attrs:r})}:t}var o=t.template||t.templateUrl?t.template:"",a={controller:i,controllerAs:Ze(t.controller)||t.controllerAs||"$ctrl",template:n(o),templateUrl:n(t.templateUrl),transclude:t.transclude,scope:{},bindToController:t.bindings||{},restrict:"E",require:t.require};return r(t,function(e,t){"$"===t.charAt(0)&&(a[t]=e)}),a}var i=t.controller||function(){};return r(t,function(e,t){"$"===t.charAt(0)&&(n[t]=e,C(i)&&(i[t]=e))}),n.$inject=["$injector"],this.directive(e,n)},this.aHrefSanitizationWhitelist=function(e){return v(e)?(n.aHrefSanitizationWhitelist(e),this):n.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return v(e)?(n.imgSrcSanitizationWhitelist(e),this):n.imgSrcSanitizationWhitelist()};var S=!0;this.debugInfoEnabled=function(e){return v(e)?(S=e,this):S};var A=10;this.onChangesTtl=function(e){return arguments.length?(A=e,this):A},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(t,n,o,a,s,h,E,k,M,I){function j(){try{if(!--be)throw ve=void 0,Kr("infchng",A);E.$apply(function(){for(var e=[],t=0,n=ve.length;n>t;++t)try{ve[t]()}catch(r){e.push(r)}if(ve=void 0,e.length)throw e})}finally{be++}}function P(e,t){if(t){var n,r,i,o=Object.keys(t);for(n=0,r=o.length;r>n;n++)i=o[n],this[i]=t[i]}else this.$attr={};this.$$element=e}function F(e,t,n){$e.innerHTML="<span "+t+">",t=$e.firstChild.attributes;var r=t[0];t.removeNamedItem(r.name),r.value=n,e.attributes.setNamedItem(r)}function H(e,t){try{e.addClass(t)}catch(n){}}function B(t,n,r,i,o){t instanceof Wn||(t=Wn(t));for(var a=/\S+/,s=0,l=t.length;l>s;s++){var u=t[s];u.nodeType===mr&&u.nodeValue.match(a)&&de(u,t[s]=e.document.createElement("span"))}var c=_(t,n,t,r,i,o);B.$$addScopeClass(t);var p=null;return function(e,n,r){te(e,"scope"),o&&o.needsNewScope&&(e=e.$parent.$new()),r=r||{};var i=r.parentBoundTranscludeFn,a=r.transcludeControllers;if(r=r.futureParentElement,i&&i.$$boundTransclude&&(i=i.$$boundTransclude),p||(p=(r=r&&r[0])&&"foreignobject"!==N(r)&&tr.call(r).match(/SVG/)?"svg":"html"),r="html"!==p?Wn(le(p,Wn("<div>").append(t).html())):n?Mr.clone.call(t):t,a)for(var s in a)r.data("$"+s+"Controller",a[s].instance);return B.$$addScopeInfo(r,e),n&&n(r,e),c&&c(e,r,r,i),r}}function _(e,t,n,r,i,o){function a(e,n,r,i){var o,a,s,l,u,c,d;if(p)for(d=Array(n.length),l=0;l<f.length;l+=3)o=f[l],d[o]=n[o];else d=n;for(l=0,u=f.length;u>l;)a=d[f[l++]],n=f[l++],o=f[l++],n?(n.scope?(s=e.$new(),B.$$addScopeInfo(Wn(a),s)):s=e,c=n.transcludeOnThisElement?U(e,n.transclude,i):!n.templateOnThisElement&&i?i:!i&&t?U(e,t):null,n(o,s,a,r,c)):o&&o(e,a.childNodes,void 0,i)}for(var s,l,u,c,p,f=[],d=0;d<e.length;d++)s=new P,l=q(e[d],[],s,0===d?r:void 0,i),(o=l.length?K(l,e[d],s,t,n,null,[],[],o):null)&&o.scope&&B.$$addScopeClass(s.$$element),s=o&&o.terminal||!(u=e[d].childNodes)||!u.length?null:_(u,o?(o.transcludeOnThisElement||!o.templateOnThisElement)&&o.transclude:t),(o||s)&&(f.push(d,o,s),c=!0,p=p||o),o=null;return c?a:null}function U(e,t,n){function r(r,i,o,a,s){return r||(r=e.$new(!1,s),r.$$transcluded=!0),t(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})}var i,o=r.$$slots=ae();for(i in t.$$slots)o[i]=t.$$slots[i]?U(e,t.$$slots[i],n):null;return r}function q(e,t,n,r,i){var o,a=n.$attr;switch(e.nodeType){case 1:Q(t,Ye(N(e)),"E",r,i);for(var s,l,u,p=e.attributes,f=0,d=p&&p.length;d>f;f++){var h=!1,m=!1;s=p[f],o=s.name,l=lr(s.value),s=Ye(o),(u=Ee.test(s))&&(o=o.replace(Yr,"").substr(8).replace(/_(.)/g,function(e,t){return t.toUpperCase()})),(s=s.match(Se))&&ee(s[1])&&(h=o,m=o.substr(0,o.length-5)+"end",o=o.substr(0,o.length-6)),s=Ye(o.toLowerCase()),a[s]=o,!u&&n.hasOwnProperty(s)||(n[s]=l,Me(e,s)&&(n[s]=!0)),ce(e,t,l,s,u),Q(t,s,"A",r,i,h,m)}if(e=e.className,y(e)&&(e=e.animVal),b(e)&&""!==e)for(;o=g.exec(e);)s=Ye(o[2]),Q(t,s,"C",r,i)&&(n[s]=lr(o[3])),e=e.substr(o.index+o[0].length);break;case mr:if(11===qn)for(;e.parentNode&&e.nextSibling&&e.nextSibling.nodeType===mr;)e.nodeValue+=e.nextSibling.nodeValue,e.parentNode.removeChild(e.nextSibling);se(t,e.nodeValue);break;case 8:try{(o=c.exec(e.nodeValue))&&(s=Ye(o[1]),Q(t,s,"M",r,i)&&(n[s]=lr(o[2])))}catch(v){}}return t.sort(ie),t}function W(e,t,n){var r=[],i=0;if(t&&e.hasAttribute&&e.hasAttribute(t)){do{if(!e)throw Kr("uterdir",t,n);1==e.nodeType&&(e.hasAttribute(t)&&i++,e.hasAttribute(n)&&i--),r.push(e),e=e.nextSibling}while(i>0)}else r.push(e);return Wn(r)}function G(e,t,n){return function(r,i,o,a,s){return i=W(i[0],t,n),e(r,i,o,a,s)}}function z(e,t,n,r,i,o){var a;return e?B(t,n,r,i,o):function(){return a||(a=B(t,n,r,i,o),t=n=o=null),a.apply(this,arguments)}}function K(e,t,n,i,a,s,u,c,p){function f(e,t,n,r){e&&(n&&(e=G(e,n,r)),e.require=h.require,e.directiveName=g,(S===h||h.$$isolateScope)&&(e=fe(e,{isolateScope:!0})),u.push(e)),t&&(n&&(t=G(t,n,r)),t.require=h.require,t.directiveName=g,(S===h||h.$$isolateScope)&&(t=fe(t,{isolateScope:!0})),c.push(t))}function d(e,i,a,s,p){function f(e,t,n,r){var i;if(T(e)||(r=n,n=t,t=e,e=void 0),D&&(i=b),n||(n=D?A.parent():A),!r)return p(e,t,i,n,N);var o=p.$$slots[r];if(o)return o(e,t,i,n,N);if(m(o))throw Kr("noslot",r,V(A))}var d,h,g,v,$,b,x,A;t===a?(s=n,A=n.$$element):(A=Wn(a),s=new P(A,n)),$=i,S?v=i.$new(!0):w&&($=i.$parent),p&&(x=f,x.$$boundTransclude=p,x.isSlotFilled=function(e){return!!p.$$slots[e]}),E&&(b=Y(A,s,x,E,v,i,S)),S&&(B.$$addScopeInfo(A,v,!0,!(L&&(L===S||L===S.$$originalDirective))),B.$$addScopeClass(A,!0),v.$$isolateBindings=S.$$isolateBindings,h=me(i,s,v,v.$$isolateBindings,S),h.removeWatches&&v.$on("$destroy",h.removeWatches));for(d in b){h=E[d],g=b[d];var k=h.$$bindings.bindToController;g.bindingInfo=g.identifier&&k?me($,s,g.instance,k,h):{};var M=g();M!==g.instance&&(g.instance=M,A.data("$"+h.name+"Controller",M),g.bindingInfo.removeWatches&&g.bindingInfo.removeWatches(),g.bindingInfo=me($,s,g.instance,k,h))}for(r(E,function(e,t){var n=e.require;e.bindToController&&!ar(n)&&y(n)&&l(b[t].instance,X(t,n,A,b))}),r(b,function(e){var t=e.instance;if(C(t.$onChanges))try{t.$onChanges(e.bindingInfo.initialChanges)}catch(n){o(n)}if(C(t.$onInit))try{t.$onInit()}catch(r){o(r)}C(t.$onDestroy)&&$.$on("$destroy",function(){t.$onDestroy()})}),d=0,h=u.length;h>d;d++)g=u[d],he(g,g.isolateScope?v:i,A,s,g.require&&X(g.directiveName,g.require,A,b),x);var N=i;for(S&&(S.template||null===S.templateUrl)&&(N=v),e&&e(N,a.childNodes,void 0,p),d=c.length-1;d>=0;d--)g=c[d],he(g,g.isolateScope?v:i,A,s,g.require&&X(g.directiveName,g.require,A,b),x);r(b,function(e){e=e.instance,C(e.$postLink)&&e.$postLink()})}p=p||{};for(var h,g,v,$,b,x=-Number.MAX_VALUE,w=p.newScopeDirective,E=p.controllerDirectives,S=p.newIsolateScopeDirective,L=p.templateDirective,A=p.nonTlbTranscludeDirective,k=!1,M=!1,D=p.hasElementTranscludeDirective,I=n.$$element=Wn(t),O=i,j=!1,F=!1,H=0,_=e.length;_>H;H++){h=e[H];var U=h.$$start,K=h.$$end;if(U&&(I=W(t,U,K)),v=void 0,x>h.priority)break;if((b=h.scope)&&(h.templateUrl||(y(b)?(oe("new/isolated scope",S||w,h,I),S=h):oe("new/isolated scope",S,h,I)),w=w||h),g=h.name,!j&&(h.replace&&(h.templateUrl||h.template)||h.transclude&&!h.$$tlb)){for(b=H+1;j=e[b++];)if(j.transclude&&!j.$$tlb||j.replace&&(j.templateUrl||j.template)){F=!0;break}j=!0}if(!h.templateUrl&&h.controller&&(b=h.controller,E=E||ae(),oe("'"+g+"' controller",E[g],h,I),E[g]=h),b=h.transclude)if(k=!0,h.$$tlb||(oe("transclusion",A,h,I),A=h),"element"==b)D=!0,x=h.priority,v=I,I=n.$$element=Wn(B.$$createComment(g,n[g])),t=I[0],pe(a,Qn.call(v,0),t),v[0].$$parentNode=v[0].parentNode,O=z(F,v,i,x,s&&s.name,{nonTlbTranscludeDirective:A});else{var Q=ae();if(v=Wn(ge(t)).contents(),y(b)){v=[];var Z=ae(),ee=ae();
r(b,function(e,t){var n="?"===e.charAt(0);e=n?e.substring(1):e,Z[e]=t,Q[t]=null,ee[t]=n}),r(I.contents(),function(e){var t=Z[Ye(N(e))];t?(ee[t]=!0,Q[t]=Q[t]||[],Q[t].push(e)):v.push(e)}),r(ee,function(e,t){if(!e)throw Kr("reqslot",t)});for(var te in Q)Q[te]&&(Q[te]=z(F,Q[te],i))}I.empty(),O=z(F,v,i,void 0,void 0,{needsNewScope:h.$$isolateScope||h.$$newScope}),O.$$slots=Q}if(h.template)if(M=!0,oe("template",L,h,I),L=h,b=C(h.template)?h.template(I,n):h.template,b=Ce(b),h.replace){if(s=h,v=Sr.test(b)?Qe(le(h.templateNamespace,lr(b))):[],t=v[0],1!=v.length||1!==t.nodeType)throw Kr("tplrt",g,"");pe(a,I,t),_={$attr:{}},b=q(t,[],_);var ie=e.splice(H+1,e.length-(H+1));(S||w)&&J(b,S,w),e=e.concat(b).concat(ie),ne(n,_),_=e.length}else I.html(b);if(h.templateUrl)M=!0,oe("template",L,h,I),L=h,h.replace&&(s=h),d=re(e.splice(H,e.length-H),I,n,a,k&&O,u,c,{controllerDirectives:E,newScopeDirective:w!==h&&w,newIsolateScopeDirective:S,templateDirective:L,nonTlbTranscludeDirective:A}),_=e.length;else if(h.compile)try{$=h.compile(I,n,O);var se=h.$$originalDirective||h;C($)?f(null,R(se,$),U,K):$&&f(R(se,$.pre),R(se,$.post),U,K)}catch(ue){o(ue,V(I))}h.terminal&&(d.terminal=!0,x=Math.max(x,h.priority))}return d.scope=w&&!0===w.scope,d.transcludeOnThisElement=k,d.templateOnThisElement=M,d.transclude=O,p.hasElementTranscludeDirective=D,d}function X(e,t,n,i){var o;if(b(t)){var a=t.match(x);t=t.substring(a[0].length);var s=a[1]||a[3],a="?"===a[2];if("^^"===s?n=n.parent():o=(o=i&&i[t])&&o.instance,!o){var l="$"+t+"Controller";o=s?n.inheritedData(l):n.data(l)}if(!o&&!a)throw Kr("ctreq",t,e)}else if(ar(t))for(o=[],s=0,a=t.length;a>s;s++)o[s]=X(e,t[s],n,i);else y(t)&&(o={},r(t,function(t,r){o[r]=X(e,t,n,i)}));return o||null}function Y(e,t,n,r,i,o,a){var s,l=ae();for(s in r){var u=r[s],c={$scope:u===a||u.$$isolateScope?i:o,$element:e,$attrs:t,$transclude:n},p=u.controller;"@"==p&&(p=t[u.name]),c=h(p,c,!0,u.controllerAs),l[u.name]=c,e.data("$"+u.name+"Controller",c.instance)}return l}function J(e,t,n){for(var r=0,i=e.length;i>r;r++)e[r]=p(e[r],{$$isolateScope:t,$$newScope:n})}function Q(e,n,r,a,s,l,c){if(n===s)return null;if(s=null,u.hasOwnProperty(n)){var f;n=t.get(n+"Directive");for(var d=0,h=n.length;h>d;d++)try{if(f=n[d],(m(a)||a>f.priority)&&-1!=f.restrict.indexOf(r)){if(l&&(f=p(f,{$$start:l,$$end:c})),!f.$$bindings){var g=f,v=f,$=f.name,b={isolateScope:null,bindToController:null};if(y(v.scope)&&(!0===v.bindToController?(b.bindToController=i(v.scope,$,!0),b.isolateScope={}):b.isolateScope=i(v.scope,$,!1)),y(v.bindToController)&&(b.bindToController=i(v.bindToController,$,!0)),y(b.bindToController)){var x=v.controller,w=v.controllerAs;if(!x)throw Kr("noctrl",$);if(!Ze(x,w))throw Kr("noident",$)}var C=g.$$bindings=b;y(C.isolateScope)&&(f.$$isolateBindings=C.isolateScope)}e.push(f),s=f}}catch(E){o(E)}}return s}function ee(e){if(u.hasOwnProperty(e))for(var n=t.get(e+"Directive"),r=0,i=n.length;i>r;r++)if(e=n[r],e.multiElement)return!0;return!1}function ne(e,t){var n=t.$attr,i=e.$attr;r(e,function(r,i){"$"!=i.charAt(0)&&(t[i]&&t[i]!==r&&(r+=("style"===i?";":" ")+t[i]),e.$set(i,r,!0,n[i]))}),r(t,function(t,r){e.hasOwnProperty(r)||"$"===r.charAt(0)||(e[r]=t,"class"!==r&&"style"!==r&&(i[r]=n[r]))})}function re(e,t,n,i,o,s,l,u){var c,f,d=[],h=t[0],g=e.shift(),m=p(g,{templateUrl:null,transclude:null,replace:null,$$originalDirective:g}),v=C(g.templateUrl)?g.templateUrl(t,n):g.templateUrl,$=g.templateNamespace;return t.empty(),a(v).then(function(a){var p,b;if(a=Ce(a),g.replace){if(a=Sr.test(a)?Qe(le($,lr(a))):[],p=a[0],1!=a.length||1!==p.nodeType)throw Kr("tplrt",g.name,v);a={$attr:{}},pe(i,t,p);var x=q(p,[],a);y(g.scope)&&J(x,!0),e=x.concat(e),ne(n,a)}else p=h,t.html(a);for(e.unshift(m),c=K(e,p,n,o,t,g,s,l,u),r(i,function(e,n){e==p&&(i[n]=t[0])}),f=_(t[0].childNodes,o);d.length;){a=d.shift(),b=d.shift();var w=d.shift(),C=d.shift(),x=t[0];if(!a.$$destroyed){if(b!==h){var E=b.className;u.hasElementTranscludeDirective&&g.replace||(x=ge(p)),pe(w,Wn(b),x),H(Wn(x),E)}b=c.transcludeOnThisElement?U(a,c.transclude,C):C,c(f,a,x,i,b)}}d=null}),function(e,t,n,r,i){e=i,t.$$destroyed||(d?d.push(t,n,r,e):(c.transcludeOnThisElement&&(e=U(t,c.transclude,i)),c(f,t,n,r,e)))}}function ie(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function oe(e,t,n,r){function i(e){return e?" (module: "+e+")":""}if(t)throw Kr("multidir",t.name,i(t.$$moduleName),n.name,i(n.$$moduleName),e,V(r))}function se(e,t){var r=n(t,!0);r&&e.push({priority:0,compile:function(e){e=e.parent();var t=!!e.length;return t&&B.$$addBindingClass(e),function(e,n){var i=n.parent();t||B.$$addBindingClass(i),B.$$addBindingInfo(i,r.expressions),e.$watch(r,function(e){n[0].nodeValue=e})}}})}function le(t,n){switch(t=Yn(t||"html")){case"svg":case"math":var r=e.document.createElement("div");return r.innerHTML="<"+t+">"+n+"</"+t+">",r.childNodes[0].childNodes;default:return n}}function ue(e,t){if("srcdoc"==t)return k.HTML;var n=N(e);return"xlinkHref"==t||"form"==n&&"action"==t||"img"!=n&&("src"==t||"ngSrc"==t)?k.RESOURCE_URL:void 0}function ce(e,t,r,i,o){var a=ue(e,i);o=$[i]||o;var s=n(r,!0,a,o);if(s){if("multiple"===i&&"select"===N(e))throw Kr("selmulti",V(e));t.push({priority:100,compile:function(){return{pre:function(e,t,l){if(t=l.$$observers||(l.$$observers=ae()),w.test(i))throw Kr("nodomevents");var u=l[i];u!==r&&(s=u&&n(u,!0,a,o),r=u),s&&(l[i]=s(e),(t[i]||(t[i]=[])).$$inter=!0,(l.$$observers&&l.$$observers[i].$$scope||e).$watch(s,function(e,t){"class"===i&&e!=t?l.$updateClass(e,t):l.$set(i,e)}))}}}})}}function pe(t,n,r){var i,o,a=n[0],s=n.length,l=a.parentNode;if(t)for(i=0,o=t.length;o>i;i++)if(t[i]==a){t[i++]=r,o=i+s-1;for(var u=t.length;u>i;i++,o++)u>o?t[i]=t[o]:delete t[i];t.length-=s-1,t.context===a&&(t.context=r);break}for(l&&l.replaceChild(r,a),t=e.document.createDocumentFragment(),i=0;s>i;i++)t.appendChild(n[i]);for(Wn.hasData(a)&&(Wn.data(r,Wn.data(a)),Wn(a).off("$destroy")),Wn.cleanData(t.querySelectorAll("*")),i=1;s>i;i++)delete n[i];n[0]=r,n.length=1}function fe(e,t){return l(function(){return e.apply(null,arguments)},e,t)}function he(e,t,n,r,i,a){try{e(t,n,r,i,a)}catch(s){o(s,V(n))}}function me(e,t,i,o,a){function l(t,n,r){C(i.$onChanges)&&n!==r&&(ve||(e.$$postDigest(j),ve=[]),c||(c={},ve.push(u)),c[t]&&(r=c[t].previousValue),c[t]=new Xe(r,n))}function u(){i.$onChanges(c),c=void 0}var c,p=[],d={};return r(o,function(r,o){var u,c,h,g,m=r.attrName,v=r.optional;switch(r.mode){case"@":v||Xn.call(t,m)||(i[o]=t[m]=void 0),t.$observe(m,function(e){(b(e)||L(e))&&(l(o,e,i[o]),i[o]=e)}),t.$$observers[m].$$scope=e,u=t[m],b(u)?i[o]=n(u)(e):L(u)&&(i[o]=u),d[o]=new Xe(Xr,i[o]);break;case"=":if(!Xn.call(t,m)){if(v)break;t[m]=void 0}if(v&&!t[m])break;c=s(t[m]),g=c.literal?O:function(e,t){return e===t||e!==e&&t!==t},h=c.assign||function(){throw u=i[o]=c(e),Kr("nonassign",t[m],m,a.name)},u=i[o]=c(e),v=function(t){return g(t,i[o])||(g(t,u)?h(e,t=i[o]):i[o]=t),u=t},v.$stateful=!0,v=r.collection?e.$watchCollection(t[m],v):e.$watch(s(t[m],v),null,c.literal),p.push(v);break;case"<":if(!Xn.call(t,m)){if(v)break;t[m]=void 0}if(v&&!t[m])break;c=s(t[m]);var y=i[o]=c(e);d[o]=new Xe(Xr,i[o]),v=e.$watch(c,function(e,t){if(t===e){if(t===y)return;t=y}l(o,e,t),i[o]=e},c.literal),p.push(v);break;case"&":if(c=t.hasOwnProperty(m)?s(t[m]):f,c===f&&v)break;i[o]=function(t){return c(e,t)}}}),{initialChanges:d,removeWatches:p.length&&function(){for(var e=0,t=p.length;t>e;++e)p[e]()}}}var ve,ye=/^\w/,$e=e.document.createElement("div"),be=A;P.prototype={$normalize:Ye,$addClass:function(e){e&&0<e.length&&M.addClass(this.$$element,e)},$removeClass:function(e){e&&0<e.length&&M.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=Je(e,t);n&&n.length&&M.addClass(this.$$element,n),(n=Je(t,e))&&n.length&&M.removeClass(this.$$element,n)},$set:function(e,t,n,i){var a=Me(this.$$element[0],e),s=Ir[e],l=e;if(a?(this.$$element.prop(e,t),i=a):s&&(this[s]=t,l=s),this[e]=t,i?this.$attr[e]=i:(i=this.$attr[e])||(this.$attr[e]=i=Z(e,"-")),a=N(this.$$element),"a"===a&&("href"===e||"xlinkHref"===e)||"img"===a&&"src"===e)this[e]=t=I(t,"src"===e);else if("img"===a&&"srcset"===e&&v(t)){for(var a="",s=lr(t),u=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,u=/\s/.test(s)?u:/(,)/,s=s.split(u),u=Math.floor(s.length/2),c=0;u>c;c++)var p=2*c,a=a+I(lr(s[p]),!0),a=a+(" "+lr(s[p+1]));s=lr(s[2*c]).split(/\s/),a+=I(lr(s[0]),!0),2===s.length&&(a+=" "+lr(s[1])),this[e]=t=a}!1!==n&&(null===t||m(t)?this.$$element.removeAttr(i):ye.test(i)?this.$$element.attr(i,t):F(this.$$element[0],i,t)),(e=this.$$observers)&&r(e[l],function(e){try{e(t)}catch(n){o(n)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=ae()),i=r[e]||(r[e]=[]);return i.push(t),E.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(e)||m(n[e])||t(n[e])}),function(){D(i,t)}}};var xe=n.startSymbol(),we=n.endSymbol(),Ce="{{"==xe&&"}}"==we?d:function(e){return e.replace(/\{\{/g,xe).replace(/}}/g,we)},Ee=/^ngAttr[A-Z]/,Se=/^(.+)Start$/;return B.$$addBindingInfo=S?function(e,t){var n=e.data("$binding")||[];ar(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:f,B.$$addBindingClass=S?function(e){H(e,"ng-binding")}:f,B.$$addScopeInfo=S?function(e,t,n,r){e.data(n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope",t)}:f,B.$$addScopeClass=S?function(e,t){H(e,t?"ng-isolate-scope":"ng-scope")}:f,B.$$createComment=function(t,n){var r="";return S&&(r=" "+(t||"")+": ",n&&(r+=n+" ")),e.document.createComment(r)},B}]}function Xe(e,t){this.previousValue=e,this.currentValue=t}function Ye(e){return ce(e.replace(Yr,""))}function Je(e,t){var n="",r=e.split(/\s+/),i=t.split(/\s+/),o=0;e:for(;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a==i[s])continue e;n+=(0<n.length?" ":"")+a}return n}function Qe(e){e=Wn(e);var t=e.length;if(1>=t)return e;for(;t--;)8===e[t].nodeType&&Zn.call(e,t,1);return e}function Ze(e,t){if(t&&b(t))return t;if(b(e)){var n=Qr.exec(e);if(n)return n[3]}}function et(){var e={},n=!1;this.has=function(t){return e.hasOwnProperty(t)},this.register=function(t,n){re(t,"controller"),y(t)?l(e,t):e[t]=n},this.allowGlobals=function(){n=!0},this.$get=["$injector","$window",function(r,i){function o(e,n,r,i){if(!e||!y(e.$scope))throw t("$controller")("noscp",i,n);e.$scope[n]=r}return function(t,a,s,u){var c,p,f;if(s=!0===s,u&&b(u)&&(f=u),b(t)){if(u=t.match(Qr),!u)throw Jr("ctrlfmt",t);p=u[1],f=f||u[3],t=e.hasOwnProperty(p)?e[p]:ie(a.$scope,p,!0)||(n?ie(i,p,!0):void 0),ne(t,p,!0)}return s?(s=(ar(t)?t[t.length-1]:t).prototype,c=Object.create(s||null),f&&o(a,f,c,p||t.name),l(function(){var e=r.invoke(t,c,a,p);return e!==c&&(y(e)||C(e))&&(c=e,f&&o(a,f,c,p||t.name)),c},{instance:c,identifier:f})):(c=r.instantiate(t,a,p),f&&o(a,f,c,p||t.name),c)}}]}function tt(){this.$get=["$window",function(e){return Wn(e.document)}]}function nt(){this.$get=["$log",function(e){return function(t,n){e.error.apply(e,arguments)}}]}function rt(e){return y(e)?w(e)?e.toISOString():F(e):e}function it(){this.$get=function(){return function(e){if(!e)return"";var t=[];return i(e,function(e,n){null===e||m(e)||(ar(e)?r(e,function(e){t.push(z(n)+"="+z(rt(e)))}):t.push(z(n)+"="+z(rt(e))))}),t.join("&")}}}function ot(){this.$get=function(){return function(e){function t(e,o,a){null===e||m(e)||(ar(e)?r(e,function(e,n){t(e,o+"["+(y(e)?n:"")+"]")}):y(e)&&!w(e)?i(e,function(e,n){t(e,o+(a?"":"[")+n+(a?"":"]"))}):n.push(z(o)+"="+z(rt(e))))}if(!e)return"";var n=[];return t(e,"",!0),n.join("&")}}}function at(e,t){if(b(e)){var n=e.replace(ii,"").trim();if(n){var r=t("Content-Type");(r=r&&0===r.indexOf(ei))||(r=(r=n.match(ni))&&ri[r[0]].test(n)),r&&(e=H(n))}}return e}function st(e){var t,n=ae();return b(e)?r(e.split("\n"),function(e){t=e.indexOf(":");var r=Yn(lr(e.substr(0,t)));e=lr(e.substr(t+1)),r&&(n[r]=n[r]?n[r]+", "+e:e)}):y(e)&&r(e,function(e,t){var r=Yn(t),i=lr(e);r&&(n[r]=n[r]?n[r]+", "+i:i)}),n}function lt(e){var t;return function(n){return t||(t=st(e)),n?(n=t[Yn(n)],void 0===n&&(n=null),n):t}}function ut(e,t,n,i){return C(i)?i(e,t,n):(r(i,function(r){e=r(e,t,n)}),e)}function ct(){var e=this.defaults={transformResponse:[at],transformRequest:[function(e){return y(e)&&"[object File]"!==tr.call(e)&&"[object Blob]"!==tr.call(e)&&"[object FormData]"!==tr.call(e)?F(e):e}],headers:{common:{Accept:"application/json, text/plain, */*"},post:le(ti),put:le(ti),patch:le(ti)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},n=!1;this.useApplyAsync=function(e){return v(e)?(n=!!e,this):n};var i=!0;this.useLegacyPromiseExtensions=function(e){return v(e)?(i=!!e,this):i};var o=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(a,s,u,c,p,f){function d(n){function o(e){var t=l({},e);return t.data=ut(e.data,e.headers,e.status,s.transformResponse),e=e.status,e>=200&&300>e?t:p.reject(t)}function a(e,t){var n,i={};return r(e,function(e,r){C(e)?(n=e(t),null!=n&&(i[r]=n)):i[r]=e}),i}if(!y(n))throw t("$http")("badreq",n);if(!b(n.url))throw t("$http")("badreq",n.url);var s=l({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse,paramSerializer:e.paramSerializer},n);s.headers=function(t){var n,r,i,o=e.headers,s=l({},t.headers),o=l({},o.common,o[Yn(t.method)]);e:for(n in o){r=Yn(n);for(i in s)if(Yn(i)===r)continue e;s[n]=o[n]}return a(s,le(t))}(n),s.method=Jn(s.method),s.paramSerializer=b(s.paramSerializer)?f.get(s.paramSerializer):s.paramSerializer;var u=[function(t){var n=t.headers,i=ut(t.data,lt(n),void 0,t.transformRequest);return m(i)&&r(n,function(e,t){"content-type"===Yn(t)&&delete n[t]}),m(t.withCredentials)&&!m(e.withCredentials)&&(t.withCredentials=e.withCredentials),h(t,i).then(o,o)},void 0],c=p.when(s);for(r(x,function(e){(e.request||e.requestError)&&u.unshift(e.request,e.requestError),(e.response||e.responseError)&&u.push(e.response,e.responseError)});u.length;){n=u.shift();var d=u.shift(),c=c.then(n,d)}return i?(c.success=function(e){return ne(e,"fn"),c.then(function(t){e(t.data,t.status,t.headers,s)}),c},c.error=function(e){return ne(e,"fn"),c.then(null,function(t){e(t.data,t.status,t.headers,s)}),c}):(c.success=ai("success"),c.error=ai("error")),c}function h(t,i){function o(e){if(e){var t={};return r(e,function(e,r){t[r]=function(t){function r(){e(t)}n?c.$applyAsync(r):c.$$phase?r():c.$apply(r)}}),t}}function l(e,t,r,i){function o(){u(t,e,r,i)}b&&(e>=200&&300>e?b.put(T,[e,t,st(r),i]):b.remove(T)),n?c.$applyAsync(o):(o(),c.$$phase||c.$apply())}function u(e,n,r,i){n=n>=-1?n:0,(n>=200&&300>n?w.resolve:w.reject)({data:e,status:n,headers:lt(r),config:t,statusText:i})}function f(e){u(e.data,e.status,le(e.headers()),e.statusText)}function h(){var e=d.pendingRequests.indexOf(t);-1!==e&&d.pendingRequests.splice(e,1)}var b,x,w=p.defer(),E=w.promise,S=t.headers,T=g(t.url,t.paramSerializer(t.params));return d.pendingRequests.push(t),E.then(h,h),!t.cache&&!e.cache||!1===t.cache||"GET"!==t.method&&"JSONP"!==t.method||(b=y(t.cache)?t.cache:y(e.cache)?e.cache:$),b&&(x=b.get(T),v(x)?x&&C(x.then)?x.then(f,f):ar(x)?u(x[1],x[0],le(x[2]),x[3]):u(x,200,{},"OK"):b.put(T,E)),m(x)&&((x=ln(t.url)?s()[t.xsrfCookieName||e.xsrfCookieName]:void 0)&&(S[t.xsrfHeaderName||e.xsrfHeaderName]=x),a(t.method,T,i,l,S,t.timeout,t.withCredentials,t.responseType,o(t.eventHandlers),o(t.uploadEventHandlers))),E}function g(e,t){return 0<t.length&&(e+=(-1==e.indexOf("?")?"?":"&")+t),e}var $=u("$http");e.paramSerializer=b(e.paramSerializer)?f.get(e.paramSerializer):e.paramSerializer;var x=[];return r(o,function(e){x.unshift(b(e)?f.get(e):f.invoke(e))}),d.pendingRequests=[],function(e){r(arguments,function(e){d[e]=function(t,n){return d(l({},n||{},{method:e,url:t}))}})}("get","delete","head","jsonp"),function(e){r(arguments,function(e){d[e]=function(t,n,r){return d(l({},r||{},{method:e,url:t,data:n}))}})}("post","put","patch"),d.defaults=e,d}]}function pt(){this.$get=function(){return function(){return new e.XMLHttpRequest}}}function ft(){this.$get=["$browser","$window","$document","$xhrFactory",function(e,t,n,r){return dt(e,r,e.defer,t.angular.callbacks,n[0])}]}function dt(e,t,n,i,o){function a(e,t,n){var r=o.createElement("script"),a=null;return r.type="text/javascript",r.src=e,r.async=!0,a=function(e){r.removeEventListener("load",a,!1),r.removeEventListener("error",a,!1),o.body.removeChild(r),r=null;var s=-1,l="unknown";e&&("load"!==e.type||i[t].called||(e={type:"error"}),l=e.type,s="error"===e.type?404:200),n&&n(s,l)},r.addEventListener("load",a,!1),r.addEventListener("error",a,!1),o.body.appendChild(r),a}return function(o,s,l,u,c,p,d,h,g,y){function $(){w&&w(),E&&E.abort()}function b(t,r,i,o,a){v(T)&&n.cancel(T),w=E=null,t(r,i,o,a),e.$$completeOutstandingRequest(f)}if(e.$$incOutstandingRequestCount(),s=s||e.url(),"jsonp"==Yn(o)){var x="_"+(i.counter++).toString(36);i[x]=function(e){i[x].data=e,i[x].called=!0};var w=a(s.replace("JSON_CALLBACK","angular.callbacks."+x),x,function(e,t){b(u,e,i[x].data,"",t),i[x]=f})}else{var E=t(o,s);if(E.open(o,s,!0),r(c,function(e,t){v(e)&&E.setRequestHeader(t,e)}),E.onload=function(){var e=E.statusText||"",t="response"in E?E.response:E.responseText,n=1223===E.status?204:E.status;0===n&&(n=t?200:"file"==sn(s).protocol?404:0),b(u,n,t,E.getAllResponseHeaders(),e)},o=function(){b(u,-1,null,null,"")},E.onerror=o,E.onabort=o,r(g,function(e,t){E.addEventListener(t,e)}),r(y,function(e,t){E.upload.addEventListener(t,e)}),d&&(E.withCredentials=!0),h)try{E.responseType=h}catch(S){if("json"!==h)throw S}E.send(m(l)?null:l)}if(p>0)var T=n($,p);else p&&C(p.then)&&p.then($)}}function ht(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(e){return"\\\\\\"+e}function a(n){return n.replace(f,e).replace(d,t)}function s(e,t,n,r){var i;return i=e.$watch(function(e){return i(),r(e)},t,n)}function u(o,u,f,d){function g(e){try{var t=e;e=f?i.getTrusted(f,t):i.valueOf(t);var n;if(d&&!v(e))n=e;else if(null==e)n="";else{switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=F(e)}n=e}return n}catch(a){r(si.interr(o,a))}}if(!o.length||-1===o.indexOf(e)){var y;return u||(u=a(o),y=h(u),y.exp=o,y.expressions=[],y.$$watchDelegate=s),y}d=!!d;var $,b,x=0,w=[],E=[];y=o.length;for(var S=[],T=[];y>x;){if(-1==($=o.indexOf(e,x))||-1==(b=o.indexOf(t,$+c))){x!==y&&S.push(a(o.substring(x)));break}x!==$&&S.push(a(o.substring(x,$))),x=o.substring($+c,b),w.push(x),E.push(n(x,g)),x=b+p,T.push(S.length),S.push("")}if(f&&1<S.length&&si.throwNoconcat(o),!u||w.length){var L=function(e){for(var t=0,n=w.length;n>t;t++){if(d&&m(e[t]))return;S[T[t]]=e[t]}return S.join("")};return l(function(e){var t=0,n=w.length,i=Array(n);try{for(;n>t;t++)i[t]=E[t](e);return L(i)}catch(a){r(si.interr(o,a))}},{exp:o,expressions:w,$$watchDelegate:function(e,t){var n;return e.$watchGroup(E,function(r,i){var o=L(r);C(t)&&t.call(this,o,r!==i?n:o,e),n=o})}})}}var c=e.length,p=t.length,f=new RegExp(e.replace(/./g,o),"g"),d=new RegExp(t.replace(/./g,o),"g");return u.startSymbol=function(){return e},u.endSymbol=function(){return t},u}]}function gt(){this.$get=["$rootScope","$window","$q","$$q","$browser",function(e,t,n,r,i){function o(o,s,l,u){function c(){p?o.apply(null,f):o(g)}var p=4<arguments.length,f=p?Qn.call(arguments,4):[],d=t.setInterval,h=t.clearInterval,g=0,m=v(u)&&!u,y=(m?r:n).defer(),$=y.promise;return l=v(l)?l:0,$.$$intervalId=d(function(){m?i.defer(c):e.$evalAsync(c),y.notify(g++),l>0&&g>=l&&(y.resolve(g),h($.$$intervalId),delete a[$.$$intervalId]),m||e.$apply()},s),a[$.$$intervalId]=y,$}var a={};return o.cancel=function(e){return e&&e.$$intervalId in a?(a[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete a[e.$$intervalId],!0):!1},o}]}function mt(e){e=e.split("/");for(var t=e.length;t--;)e[t]=G(e[t]);return e.join("/")}function vt(e,t){var n=sn(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=c(n.port)||ui[n.protocol]||null}function yt(e,t){var n="/"!==e.charAt(0);n&&(e="/"+e);var r=sn(e);t.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),t.$$search=q(r.search),t.$$hash=decodeURIComponent(r.hash),t.$$path&&"/"!=t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function $t(e,t){return 0===t.lastIndexOf(e,0)?t.substr(e.length):void 0}function bt(e){var t=e.indexOf("#");return-1==t?e:e.substr(0,t)}function xt(e){return e.replace(/(#.+)|#$/,"$1")}function wt(e,t,n){this.$$html5=!0,n=n||"",vt(e,this),this.$$parse=function(e){var n=$t(t,e);if(!b(n))throw ci("ipthprfx",e,t);yt(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=W(this.$$search),n=this.$$hash?"#"+G(this.$$hash):"";this.$$url=mt(this.$$path)+(e?"?"+e:"")+n,this.$$absUrl=t+this.$$url.substr(1)},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return v(o=$t(e,r))?(a=o,a=v(o=$t(n,o))?t+($t("/",o)||o):e+a):v(o=$t(t,r))?a=t+o:t==r+"/"&&(a=t),a&&this.$$parse(a),!!a}}function Ct(e,t,n){vt(e,this),this.$$parse=function(r){var i,o=$t(e,r)||$t(t,r);m(o)||"#"!==o.charAt(0)?this.$$html5?i=o:(i="",m(o)&&(e=r,this.replace())):(i=$t(n,o),m(i)&&(i=o)),yt(i,this),r=this.$$path;var o=e,a=/^\/[A-Z]:(\/.*)/;0===i.lastIndexOf(o,0)&&(i=i.replace(o,"")),a.exec(i)||(r=(i=a.exec(r))?i[1]:r),this.$$path=r,this.$$compose()},this.$$compose=function(){var t=W(this.$$search),r=this.$$hash?"#"+G(this.$$hash):"";this.$$url=mt(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+(this.$$url?n+this.$$url:"")},this.$$parseLinkUrl=function(t,n){return bt(e)==bt(t)?(this.$$parse(t),!0):!1}}function Et(e,t,n){this.$$html5=!0,Ct.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return e==bt(r)?o=r:(a=$t(t,r))?o=e+n+a:t===r+"/"&&(o=t),o&&this.$$parse(o),!!o},this.$$compose=function(){var t=W(this.$$search),r=this.$$hash?"#"+G(this.$$hash):"";this.$$url=mt(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+n+this.$$url}}function St(e){return function(){return this[e]}}function Tt(e,t){return function(n){return m(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function Lt(){var e="",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return v(t)?(e=t,this):e},this.html5Mode=function(e){return L(e)?(t.enabled=e,this):y(e)?(L(e.enabled)&&(t.enabled=e.enabled),L(e.requireBase)&&(t.requireBase=e.requireBase),L(e.rewriteLinks)&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(e,t,n){var i=u.url(),o=u.$$state;try{r.url(e,t,n),u.$$state=r.state()}catch(a){throw u.url(i),u.$$state=o,a}}function l(e,t){n.$broadcast("$locationChangeSuccess",u.absUrl(),e,u.$$state,t)}var u,c;c=r.baseHref();var p,f=r.url();if(t.enabled){if(!c&&t.requireBase)throw ci("nobase");p=f.substring(0,f.indexOf("/",f.indexOf("//")+2))+(c||"/"),c=i.history?wt:Et}else p=bt(f),c=Ct;var d=p.substr(0,bt(p).lastIndexOf("/")+1);u=new c(p,d,"#"+e),u.$$parseLinkUrl(f,f),u.$$state=r.state();var h=/^\s*(javascript|mailto):/i;o.on("click",function(e){if(t.rewriteLinks&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!=e.which&&2!=e.button){for(var i=Wn(e.target);"a"!==N(i[0]);)if(i[0]===o[0]||!(i=i.parent())[0])return;var s=i.prop("href"),l=i.attr("href")||i.attr("xlink:href");y(s)&&"[object SVGAnimatedString]"===s.toString()&&(s=sn(s.animVal).href),h.test(s)||!s||i.attr("target")||e.isDefaultPrevented()||!u.$$parseLinkUrl(s,l)||(e.preventDefault(),u.absUrl()!=r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}),xt(u.absUrl())!=xt(f)&&r.url(u.absUrl(),!0);var g=!0;return r.onUrlChange(function(e,t){m($t(d,e))?a.location.href=e:(n.$evalAsync(function(){var r,i=u.absUrl(),o=u.$$state;e=xt(e),u.$$parse(e),u.$$state=t,r=n.$broadcast("$locationChangeStart",e,i,t,o).defaultPrevented,u.absUrl()===e&&(r?(u.$$parse(i),u.$$state=o,s(i,!1,o)):(g=!1,l(i,o)))}),n.$$phase||n.$digest())}),n.$watch(function(){var e=xt(r.url()),t=xt(u.absUrl()),o=r.state(),a=u.$$replace,c=e!==t||u.$$html5&&i.history&&o!==u.$$state;(g||c)&&(g=!1,n.$evalAsync(function(){var t=u.absUrl(),r=n.$broadcast("$locationChangeStart",t,e,u.$$state,o).defaultPrevented;u.absUrl()===t&&(r?(u.$$parse(e),u.$$state=o):(c&&s(t,a,o===u.$$state?null:u.$$state),l(e,o)))})),u.$$replace=!1}),u}]}function At(){var e=!0,t=this;this.debugEnabled=function(t){return v(t)?(e=t,this):e},this.$get=["$window",function(n){function i(e){return e instanceof Error&&(e.stack?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function o(e){var t=n.console||{},o=t[e]||t.log||f;e=!1;try{e=!!o.apply}catch(a){}return e?function(){var e=[];return r(arguments,function(t){e.push(i(t))}),o.apply(t,e)}:function(e,t){o(e,null==t?"":t)}}return{log:o("log"),info:o("info"),warn:o("warn"),error:o("error"),debug:function(){var n=o("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function kt(e,t){if("__defineGetter__"===e||"__defineSetter__"===e||"__lookupGetter__"===e||"__lookupSetter__"===e||"__proto__"===e)throw fi("isecfld",t);return e}function Mt(e){return e+""}function Nt(e,t){if(e){if(e.constructor===e)throw fi("isecfn",t);if(e.window===e)throw fi("isecwindow",t);if(e.children&&(e.nodeName||e.prop&&e.attr&&e.find))throw fi("isecdom",t);if(e===Object)throw fi("isecobj",t)}return e}function Dt(e,t){if(e){if(e.constructor===e)throw fi("isecfn",t);if(e===di||e===hi||e===gi)throw fi("isecff",t)}}function It(e,t){if(e&&(e===0..constructor||e===(!1).constructor||e==="".constructor||e==={}.constructor||e===[].constructor||e===Function.constructor))throw fi("isecaf",t)}function Ot(e,t){return"undefined"!=typeof e?e:t}function jt(e,t){return"undefined"==typeof e?t:"undefined"==typeof t?e:e+t}function Rt(e,t){var n,i;switch(e.type){case $i.Program:n=!0,r(e.body,function(e){Rt(e.expression,t),n=n&&e.expression.constant}),e.constant=n;break;case $i.Literal:e.constant=!0,e.toWatch=[];break;case $i.UnaryExpression:Rt(e.argument,t),e.constant=e.argument.constant,e.toWatch=e.argument.toWatch;break;case $i.BinaryExpression:Rt(e.left,t),Rt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.left.toWatch.concat(e.right.toWatch);break;case $i.LogicalExpression:Rt(e.left,t),Rt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.constant?[]:[e];break;case $i.ConditionalExpression:Rt(e.test,t),Rt(e.alternate,t),Rt(e.consequent,t),e.constant=e.test.constant&&e.alternate.constant&&e.consequent.constant,e.toWatch=e.constant?[]:[e];break;case $i.Identifier:e.constant=!1,e.toWatch=[e];break;case $i.MemberExpression:Rt(e.object,t),e.computed&&Rt(e.property,t),e.constant=e.object.constant&&(!e.computed||e.property.constant),e.toWatch=[e];break;case $i.CallExpression:n=e.filter?!t(e.callee.name).$stateful:!1,i=[],r(e.arguments,function(e){Rt(e,t),n=n&&e.constant,e.constant||i.push.apply(i,e.toWatch)}),e.constant=n,e.toWatch=e.filter&&!t(e.callee.name).$stateful?i:[e];break;case $i.AssignmentExpression:Rt(e.left,t),Rt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=[e];break;case $i.ArrayExpression:n=!0,i=[],r(e.elements,function(e){Rt(e,t),n=n&&e.constant,e.constant||i.push.apply(i,e.toWatch)}),e.constant=n,e.toWatch=i;break;case $i.ObjectExpression:n=!0,i=[],r(e.properties,function(e){Rt(e.value,t),n=n&&e.value.constant&&!e.computed,e.value.constant||i.push.apply(i,e.value.toWatch)}),e.constant=n,e.toWatch=i;break;case $i.ThisExpression:e.constant=!1,e.toWatch=[];break;case $i.LocalsExpression:e.constant=!1,e.toWatch=[]}}function Pt(e){if(1==e.length){e=e[0].expression;var t=e.toWatch;return 1!==t.length?t:t[0]!==e?t:void 0}}function Ft(e){return e.type===$i.Identifier||e.type===$i.MemberExpression}function Ht(e){return 1===e.body.length&&Ft(e.body[0].expression)?{type:$i.AssignmentExpression,left:e.body[0].expression,right:{type:$i.NGValueParameter},operator:"="}:void 0}function Bt(e){return 0===e.body.length||1===e.body.length&&(e.body[0].expression.type===$i.Literal||e.body[0].expression.type===$i.ArrayExpression||e.body[0].expression.type===$i.ObjectExpression)}function _t(e,t){this.astBuilder=e,this.$filter=t}function Vt(e,t){this.astBuilder=e,this.$filter=t}function Ut(e){return"constructor"==e}function qt(e){return C(e.valueOf)?e.valueOf():xi.call(e)}function Wt(){var e,t,n=ae(),i=ae(),o={"true":!0,"false":!1,"null":null,undefined:void 0};this.addLiteral=function(e,t){o[e]=t},this.setIdentifierFns=function(n,r){return e=n,t=r,this},this.$get=["$filter",function(a){function s(e,t,r){var o,s,u;switch(r=r||b,typeof e){case"string":u=e=e.trim();var m=r?i:n;if(o=m[u],!o){":"===e.charAt(0)&&":"===e.charAt(1)&&(s=!0,e=e.substring(2)),o=r?$:y;var v=new yi(o);o=new bi(v,a,o).parse(e),o.constant?o.$$watchDelegate=h:s?o.$$watchDelegate=o.literal?d:p:o.inputs&&(o.$$watchDelegate=c),r&&(o=l(o)),m[u]=o}return g(o,t);case"function":return g(e,t);default:return g(f,t)}}function l(e){function t(t,n,r,i){var o=b;b=!0;try{return e(t,n,r,i)}finally{b=o}}if(!e)return e;t.$$watchDelegate=e.$$watchDelegate,t.assign=l(e.assign),t.constant=e.constant,t.literal=e.literal;for(var n=0;e.inputs&&n<e.inputs.length;++n)e.inputs[n]=l(e.inputs[n]);return t.inputs=e.inputs,t}function u(e,t){return null==e||null==t?e===t:"object"==typeof e&&(e=qt(e),"object"==typeof e)?!1:e===t||e!==e&&t!==t}function c(e,t,n,r,i){var o,a=r.inputs;if(1===a.length){var s=u,a=a[0];return e.$watch(function(e){var t=a(e);return u(t,s)||(o=r(e,void 0,void 0,[t]),s=t&&qt(t)),o},t,n,i)}for(var l=[],c=[],p=0,f=a.length;f>p;p++)l[p]=u,c[p]=null;return e.$watch(function(e){for(var t=!1,n=0,i=a.length;i>n;n++){var s=a[n](e);(t||(t=!u(s,l[n])))&&(c[n]=s,l[n]=s&&qt(s))}return t&&(o=r(e,void 0,void 0,c)),o},t,n,i)}function p(e,t,n,r){var i,o;return i=e.$watch(function(e){return r(e)},function(e,n,r){o=e,C(t)&&t.apply(this,arguments),v(e)&&r.$$postDigest(function(){v(o)&&i()})},n)}function d(e,t,n,i){function o(e){var t=!0;return r(e,function(e){v(e)||(t=!1)}),t}var a,s;return a=e.$watch(function(e){return i(e)},function(e,n,r){s=e,C(t)&&t.call(this,e,n,r),o(e)&&r.$$postDigest(function(){o(s)&&a()})},n)}function h(e,t,n,r){var i;return i=e.$watch(function(e){return i(),r(e)},t,n)}function g(e,t){if(!t)return e;var n=e.$$watchDelegate,r=!1,n=n!==d&&n!==p?function(n,i,o,a){return o=r&&a?a[0]:e(n,i,o,a),t(o,n,i)}:function(n,r,i,o){return i=e(n,r,i,o),n=t(i,n,r),v(i)?n:i};return e.$$watchDelegate&&e.$$watchDelegate!==c?n.$$watchDelegate=e.$$watchDelegate:t.$stateful||(n.$$watchDelegate=c,r=!e.inputs,n.inputs=e.inputs?e.inputs:[e]),n}var m=cr().noUnsafeEval,y={csp:m,expensiveChecks:!1,literals:I(o),isIdentifierStart:C(e)&&e,isIdentifierContinue:C(t)&&t},$={csp:m,expensiveChecks:!0,literals:I(o),isIdentifierStart:C(e)&&e,isIdentifierContinue:C(t)&&t},b=!1;return s.$$runningExpensiveChecks=function(){return b},s}]}function Gt(){this.$get=["$rootScope","$exceptionHandler",function(e,t){return Kt(function(t){e.$evalAsync(t)},t)}]}function zt(){this.$get=["$browser","$exceptionHandler",function(e,t){return Kt(function(t){e.defer(t)},t)}]}function Kt(e,n){function i(){this.$$state={status:0}}function o(e,t){return function(n){t.call(e,n)}}function a(t){!t.processScheduled&&t.pending&&(t.processScheduled=!0,e(function(){var e,r,i;i=t.pending,t.processScheduled=!1,t.pending=void 0;for(var o=0,a=i.length;a>o;++o){r=i[o][0],e=i[o][t.status];try{C(e)?r.resolve(e(t.value)):1===t.status?r.resolve(t.value):r.reject(t.value)}catch(s){r.reject(s),n(s)}}}))}function s(){this.promise=new i}var u=t("$q",TypeError);l(i.prototype,{then:function(e,t,n){if(m(e)&&m(t)&&m(n))return this;var r=new s;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),0<this.$$state.status&&a(this.$$state),r.promise},"catch":function(e){return this.then(null,e)},"finally":function(e,t){return this.then(function(t){return p(t,!0,e)},function(t){return p(t,!1,e)},t)}}),l(s.prototype,{resolve:function(e){
this.promise.$$state.status||(e===this.promise?this.$$reject(u("qcycle",e)):this.$$resolve(e))},$$resolve:function(e){function t(e){l||(l=!0,s.$$resolve(e))}function r(e){l||(l=!0,s.$$reject(e))}var i,s=this,l=!1;try{(y(e)||C(e))&&(i=e&&e.then),C(i)?(this.promise.$$state.status=-1,i.call(e,t,r,o(this,this.notify))):(this.promise.$$state.value=e,this.promise.$$state.status=1,a(this.promise.$$state))}catch(u){r(u),n(u)}},reject:function(e){this.promise.$$state.status||this.$$reject(e)},$$reject:function(e){this.promise.$$state.value=e,this.promise.$$state.status=2,a(this.promise.$$state)},notify:function(t){var r=this.promise.$$state.pending;0>=this.promise.$$state.status&&r&&r.length&&e(function(){for(var e,i,o=0,a=r.length;a>o;o++){i=r[o][0],e=r[o][3];try{i.notify(C(e)?e(t):t)}catch(s){n(s)}}})}});var c=function(e,t){var n=new s;return t?n.resolve(e):n.reject(e),n.promise},p=function(e,t,n){var r=null;try{C(n)&&(r=n())}catch(i){return c(i,!1)}return r&&C(r.then)?r.then(function(){return c(e,t)},function(e){return c(e,!1)}):c(e,t)},f=function(e,t,n,r){var i=new s;return i.resolve(e),i.promise.then(t,n,r)},d=function(e){if(!C(e))throw u("norslvr",e);var t=new s;return e(function(e){t.resolve(e)},function(e){t.reject(e)}),t.promise};return d.prototype=i.prototype,d.defer=function(){var e=new s;return e.resolve=o(e,e.resolve),e.reject=o(e,e.reject),e.notify=o(e,e.notify),e},d.reject=function(e){var t=new s;return t.reject(e),t.promise},d.when=f,d.resolve=f,d.all=function(e){var t=new s,n=0,i=ar(e)?[]:{};return r(e,function(e,r){n++,f(e).then(function(e){i.hasOwnProperty(r)||(i[r]=e,--n||t.resolve(i))},function(e){i.hasOwnProperty(r)||t.reject(e)})}),0===n&&t.resolve(i),t.promise},d}function Xt(){this.$get=["$window","$timeout",function(e,t){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame,r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(e){var t=n(e);return function(){r(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};return o.supported=i,o}]}function Yt(){function e(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=++or,this.$$ChildScope=null}return t.prototype=e,t}var i=10,o=t("$rootScope"),a=null,s=null;this.digestTtl=function(e){return arguments.length&&(i=e),i},this.$get=["$exceptionHandler","$parse","$browser",function(t,l,u){function c(e){e.currentScope.$$destroyed=!0}function p(e){9===qn&&(e.$$childHead&&p(e.$$childHead),e.$$nextSibling&&p(e.$$nextSibling)),e.$parent=e.$$nextSibling=e.$$prevSibling=e.$$childHead=e.$$childTail=e.$root=e.$$watchers=null}function d(){this.$id=++or,this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function h(e){if(w.$$phase)throw o("inprog",w.$$phase);w.$$phase=e}function g(e,t){do e.$$watchersCount+=t;while(e=e.$parent)}function v(e,t,n){do e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n];while(e=e.$parent)}function $(){}function b(){for(;T.length;)try{T.shift()()}catch(e){t(e)}s=null}function x(){null===s&&(s=u.defer(function(){w.$apply(b)}))}d.prototype={constructor:d,$new:function(t,n){var r;return n=n||this,t?(r=new d,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=e(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(t||n!=this)&&r.$on("$destroy",c),r},$watch:function(e,t,n,r){var i=l(e);if(i.$$watchDelegate)return i.$$watchDelegate(this,t,n,i,e);var o=this,s=o.$$watchers,u={fn:t,last:$,get:i,exp:r||e,eq:!!n};return a=null,C(t)||(u.fn=f),s||(s=o.$$watchers=[]),s.unshift(u),g(this,1),function(){0<=D(s,u)&&g(o,-1),a=null}},$watchGroup:function(e,t){function n(){l=!1,u?(u=!1,t(o,o,s)):t(o,i,s)}var i=Array(e.length),o=Array(e.length),a=[],s=this,l=!1,u=!0;if(!e.length){var c=!0;return s.$evalAsync(function(){c&&t(o,o,s)}),function(){c=!1}}return 1===e.length?this.$watch(e[0],function(e,n,r){o[0]=e,i[0]=n,t(o,e===n?o:i,r)}):(r(e,function(e,t){var r=s.$watch(e,function(e,r){o[t]=e,i[t]=r,l||(l=!0,s.$evalAsync(n))});a.push(r)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(e,t){function r(e){i=e;var t,r,a,s;if(!m(i)){if(y(i))if(n(i))for(o!==f&&(o=f,g=o.length=0,c++),e=i.length,g!==e&&(c++,o.length=g=e),t=0;e>t;t++)s=o[t],a=i[t],r=s!==s&&a!==a,r||s===a||(c++,o[t]=a);else{o!==d&&(o=d={},g=0,c++),e=0;for(t in i)Xn.call(i,t)&&(e++,a=i[t],s=o[t],t in o?(r=s!==s&&a!==a,r||s===a||(c++,o[t]=a)):(g++,o[t]=a,c++));if(g>e)for(t in c++,o)Xn.call(i,t)||(g--,delete o[t])}else o!==i&&(o=i,c++);return c}}r.$stateful=!0;var i,o,a,s=this,u=1<t.length,c=0,p=l(e,r),f=[],d={},h=!0,g=0;return this.$watch(p,function(){if(h?(h=!1,t(i,i,s)):t(i,a,s),u)if(y(i))if(n(i)){a=Array(i.length);for(var e=0;e<i.length;e++)a[e]=i[e]}else for(e in a={},i)Xn.call(i,e)&&(a[e]=i[e]);else a=i})},$digest:function(){var e,n,r,l,c,p,f,d,g,m,v,y=i,x=[];h("$digest"),u.$$checkUrlChange(),this===w&&null!==s&&(u.defer.cancel(s),b()),a=null;do{for(d=!1,g=this,p=0;p<E.length;p++){try{v=E[p],v.scope.$eval(v.expression,v.locals)}catch(T){t(T)}a=null}E.length=0;e:do{if(p=g.$$watchers)for(f=p.length;f--;)try{if(e=p[f])if(c=e.get,(n=c(g))===(r=e.last)||(e.eq?O(n,r):"number"==typeof n&&"number"==typeof r&&isNaN(n)&&isNaN(r))){if(e===a){d=!1;break e}}else d=!0,a=e,e.last=e.eq?I(n,null):n,l=e.fn,l(n,r===$?n:r,g),5>y&&(m=4-y,x[m]||(x[m]=[]),x[m].push({msg:C(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:n,oldVal:r}))}catch(A){t(A)}if(!(p=g.$$watchersCount&&g.$$childHead||g!==this&&g.$$nextSibling))for(;g!==this&&!(p=g.$$nextSibling);)g=g.$parent}while(g=p);if((d||E.length)&&!y--)throw w.$$phase=null,o("infdig",i,x)}while(d||E.length);for(w.$$phase=null;L<S.length;)try{S[L++]()}catch(k){t(k)}S.length=L=0},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===w&&u.$$applicationDestroyed(),g(this,-this.$$watchersCount);for(var t in this.$$listenerCount)v(this,this.$$listenerCount[t],t);e&&e.$$childHead==this&&(e.$$childHead=this.$$nextSibling),e&&e.$$childTail==this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=f,this.$on=this.$watch=this.$watchGroup=function(){return f},this.$$listeners={},this.$$nextSibling=null,p(this)}},$eval:function(e,t){return l(e)(this,t)},$evalAsync:function(e,t){w.$$phase||E.length||u.defer(function(){E.length&&w.$digest()}),E.push({scope:this,expression:l(e),locals:t})},$$postDigest:function(e){S.push(e)},$apply:function(e){try{h("$apply");try{return this.$eval(e)}finally{w.$$phase=null}}catch(n){t(n)}finally{try{w.$digest()}catch(r){throw t(r),r}}},$applyAsync:function(e){function t(){n.$eval(e)}var n=this;e&&T.push(t),e=l(e),x()},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(t);-1!==r&&(n[r]=null,v(i,1,e))}},$emit:function(e,n){var r,i,o,a=[],s=this,l=!1,u={name:e,targetScope:s,stopPropagation:function(){l=!0},preventDefault:function(){u.defaultPrevented=!0},defaultPrevented:!1},c=j([u],arguments,1);do{for(r=s.$$listeners[e]||a,u.currentScope=s,i=0,o=r.length;o>i;i++)if(r[i])try{r[i].apply(null,c)}catch(p){t(p)}else r.splice(i,1),i--,o--;if(l)return u.currentScope=null,u;s=s.$parent}while(s);return u.currentScope=null,u},$broadcast:function(e,n){var r=this,i=this,o={name:e,targetScope:this,preventDefault:function(){o.defaultPrevented=!0},defaultPrevented:!1};if(!this.$$listenerCount[e])return o;for(var a,s,l=j([o],arguments,1);r=i;){for(o.currentScope=r,i=r.$$listeners[e]||[],a=0,s=i.length;s>a;a++)if(i[a])try{i[a].apply(null,l)}catch(u){t(u)}else i.splice(a,1),a--,s--;if(!(i=r.$$listenerCount[e]&&r.$$childHead||r!==this&&r.$$nextSibling))for(;r!==this&&!(i=r.$$nextSibling);)r=r.$parent}return o.currentScope=null,o}};var w=new d,E=w.$$asyncQueue=[],S=w.$$postDigestQueue=[],T=w.$$applyAsyncQueue=[],L=0;return w}]}function Jt(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return v(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return v(e)?(t=e,this):t},this.$get=function(){return function(n,r){var i,o=r?t:e;return i=sn(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function Qt(e){if("self"===e)return e;if(b(e)){if(-1<e.indexOf("***"))throw wi("iwcard",e);return e=ur(e).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+e+"$")}if(E(e))return new RegExp("^"+e.source+"$");throw wi("imatcher")}function Zt(e){var t=[];return v(e)&&r(e,function(e){t.push(Qt(e))}),t}function en(){this.SCE_CONTEXTS=Ci;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=Zt(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=Zt(e)),t},this.$get=["$injector",function(n){function r(e,t){return"self"===e?ln(t):!!e.exec(t.href)}function i(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}var o=function(e){throw wi("unsafe")};n.has("$sanitize")&&(o=n.get("$sanitize"));var a=i(),s={};return s[Ci.HTML]=i(a),s[Ci.CSS]=i(a),s[Ci.URL]=i(a),s[Ci.JS]=i(a),s[Ci.RESOURCE_URL]=i(s[Ci.URL]),{trustAs:function(e,t){var n=s.hasOwnProperty(e)?s[e]:null;if(!n)throw wi("icontext",e,t);if(null===t||m(t)||""===t)return t;if("string"!=typeof t)throw wi("itype",e);return new n(t)},getTrusted:function(n,i){if(null===i||m(i)||""===i)return i;var a=s.hasOwnProperty(n)?s[n]:null;if(a&&i instanceof a)return i.$$unwrapTrustedValue();if(n===Ci.RESOURCE_URL){var l,u,a=sn(i.toString()),c=!1;for(l=0,u=e.length;u>l;l++)if(r(e[l],a)){c=!0;break}if(c)for(l=0,u=t.length;u>l;l++)if(r(t[l],a)){c=!1;break}if(c)return i;throw wi("insecurl",i.toString())}if(n===Ci.HTML)return o(i);throw wi("unsafe")},valueOf:function(e){return e instanceof a?e.$$unwrapTrustedValue():e}}}]}function tn(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,n){if(e&&8>qn)throw wi("iequirks");var i=le(Ci);i.isEnabled=function(){return e},i.trustAs=n.trustAs,i.getTrusted=n.getTrusted,i.valueOf=n.valueOf,e||(i.trustAs=i.getTrusted=function(e,t){return t},i.valueOf=d),i.parseAs=function(e,n){var r=t(n);return r.literal&&r.constant?r:t(n,function(t){return i.getTrusted(e,t)})};var o=i.parseAs,a=i.getTrusted,s=i.trustAs;return r(Ci,function(e,t){var n=Yn(t);i[ce("parse_as_"+n)]=function(t){return o(e,t)},i[ce("get_trusted_"+n)]=function(t){return a(e,t)},i[ce("trust_as_"+n)]=function(t){return s(e,t)}}),i}]}function nn(){this.$get=["$window","$document",function(e,t){var n,r={},i=!(e.chrome&&e.chrome.app&&e.chrome.app.runtime)&&e.history&&e.history.pushState,o=c((/android (\d+)/.exec(Yn((e.navigator||{}).userAgent))||[])[1]),a=/Boxee/i.test((e.navigator||{}).userAgent),s=t[0]||{},l=/^(Moz|webkit|ms)(?=[A-Z])/,u=s.body&&s.body.style,p=!1,f=!1;if(u){for(var d in u)if(p=l.exec(d)){n=p[0],n=n[0].toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in u&&"webkit"),p=!!("transition"in u||n+"Transition"in u),f=!!("animation"in u||n+"Animation"in u),!o||p&&f||(p=b(u.webkitTransition),f=b(u.webkitAnimation))}return{history:!(!i||4>o||a),hasEvent:function(e){if("input"===e&&11>=qn)return!1;if(m(r[e])){var t=s.createElement("div");r[e]="on"+e in t}return r[e]},csp:cr(),vendorPrefix:n,transitions:p,animations:f,android:o}}]}function rn(){var e;this.httpOptions=function(t){return t?(e=t,this):e},this.$get=["$templateCache","$http","$q","$sce",function(t,n,r,i){function o(a,s){o.totalPendingRequests++,b(a)&&!m(t.get(a))||(a=i.getTrustedResourceUrl(a));var u=n.defaults&&n.defaults.transformResponse;return ar(u)?u=u.filter(function(e){return e!==at}):u===at&&(u=null),n.get(a,l({cache:t,transformResponse:u},e))["finally"](function(){o.totalPendingRequests--}).then(function(e){return t.put(a,e.data),e.data},function(e){if(!s)throw Ei("tpload",a,e.status,e.statusText);return r.reject(e)})}return o.totalPendingRequests=0,o}]}function on(){this.$get=["$rootScope","$browser","$location",function(e,t,n){return{findBindings:function(e,t,n){e=e.getElementsByClassName("ng-binding");var i=[];return r(e,function(e){var o=ir.element(e).data("$binding");o&&r(o,function(r){n?new RegExp("(^|\\s)"+ur(t)+"(\\s|\\||$)").test(r)&&i.push(e):-1!=r.indexOf(t)&&i.push(e)})}),i},findModels:function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=e.querySelectorAll("["+r[i]+"model"+(n?"=":"*=")+'"'+t+'"]');if(o.length)return o}},getLocation:function(){return n.url()},setLocation:function(t){t!==n.url()&&(n.url(t),e.$digest())},whenStable:function(e){t.notifyWhenNoOutstandingRequests(e)}}}]}function an(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,i){function o(o,s,l){C(o)||(l=s,s=o,o=f);var u,c=Qn.call(arguments,3),p=v(l)&&!l,d=(p?r:n).defer(),h=d.promise;return u=t.defer(function(){try{d.resolve(o.apply(null,c))}catch(t){d.reject(t),i(t)}finally{delete a[h.$$timeoutId]}p||e.$apply()},s),h.$$timeoutId=u,a[u]=d,h}var a={};return o.cancel=function(e){return e&&e.$$timeoutId in a?(a[e.$$timeoutId].reject("canceled"),delete a[e.$$timeoutId],t.defer.cancel(e.$$timeoutId)):!1},o}]}function sn(e){return qn&&(Si.setAttribute("href",e),e=Si.href),Si.setAttribute("href",e),{href:Si.href,protocol:Si.protocol?Si.protocol.replace(/:$/,""):"",host:Si.host,search:Si.search?Si.search.replace(/^\?/,""):"",hash:Si.hash?Si.hash.replace(/^#/,""):"",hostname:Si.hostname,port:Si.port,pathname:"/"===Si.pathname.charAt(0)?Si.pathname:"/"+Si.pathname}}function ln(e){return e=b(e)?sn(e):e,e.protocol===Ti.protocol&&e.host===Ti.host}function un(){this.$get=h(e)}function cn(e){function t(e){try{return decodeURIComponent(e)}catch(t){return e}}var n=e[0]||{},r={},i="";return function(){var e,o,a,s,l;if(e=n.cookie||"",e!==i)for(i=e,e=i.split("; "),r={},a=0;a<e.length;a++)o=e[a],s=o.indexOf("="),s>0&&(l=t(o.substring(0,s)),m(r[l])&&(r[l]=t(o.substring(s+1))));return r}}function pn(){this.$get=cn}function fn(e){function t(n,i){if(y(n)){var o={};return r(n,function(e,n){o[n]=t(n,e)}),o}return e.factory(n+"Filter",i)}this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+"Filter")}}],t("currency",vn),t("date",An),t("filter",dn),t("json",kn),t("limitTo",Mn),t("lowercase",Ii),t("number",yn),t("orderBy",Dn),t("uppercase",Oi)}function dn(){return function(e,r,i){if(!n(e)){if(null==e)return e;throw t("filter")("notarray",e)}var o;switch(mn(r)){case"function":break;case"boolean":case"null":case"number":case"string":o=!0;case"object":r=hn(r,i,o);break;default:return e}return Array.prototype.filter.call(e,r)}}function hn(e,t,n){var r=y(e)&&"$"in e;return!0===t?t=O:C(t)||(t=function(e,t){return m(e)?!1:null===e||null===t?e===t:y(t)||y(e)&&!g(e)?!1:(e=Yn(""+e),t=Yn(""+t),-1!==e.indexOf(t))}),function(i){return r&&!y(i)?gn(i,e.$,t,!1):gn(i,e,t,n)}}function gn(e,t,n,r,i){var o=mn(e),a=mn(t);if("string"===a&&"!"===t.charAt(0))return!gn(e,t.substring(1),n,r);if(ar(e))return e.some(function(e){return gn(e,t,n,r)});switch(o){case"object":var s;if(r){for(s in e)if("$"!==s.charAt(0)&&gn(e[s],t,n,!0))return!0;return i?!1:gn(e,t,n,!1)}if("object"===a){for(s in t)if(i=t[s],!C(i)&&!m(i)&&(o="$"===s,!gn(o?e:e[s],i,n,o,o)))return!1;return!0}return n(e,t);case"function":return!1;default:return n(e,t)}}function mn(e){return null===e?"null":typeof e}function vn(e){var t=e.NUMBER_FORMATS;return function(e,n,r){return m(n)&&(n=t.CURRENCY_SYM),m(r)&&(r=t.PATTERNS[1].maxFrac),null==e?e:xn(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function yn(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:xn(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function $n(e){var t,n,r,i,o,a=0;for(-1<(n=e.indexOf(Ai))&&(e=e.replace(Ai,"")),0<(r=e.search(/e/i))?(0>n&&(n=r),n+=+e.slice(r+1),e=e.substring(0,r)):0>n&&(n=e.length),r=0;e.charAt(r)==ki;r++);if(r==(o=e.length))t=[0],n=1;else{for(o--;e.charAt(o)==ki;)o--;for(n-=r,t=[],i=0;o>=r;r++,i++)t[i]=+e.charAt(r)}return n>Li&&(t=t.splice(0,Li-1),a=n-1,n=1),{d:t,e:a,i:n}}function bn(e,t,n,r){var i=e.d,o=i.length-e.i;if(t=m(t)?Math.min(Math.max(n,o),r):+t,n=t+e.i,r=i[n],n>0){i.splice(Math.max(e.i,n));for(var a=n;a<i.length;a++)i[a]=0}else for(o=Math.max(0,o),e.i=1,i.length=Math.max(1,n=t+1),i[0]=0,a=1;n>a;a++)i[a]=0;if(r>=5)if(0>n-1){for(r=0;r>n;r--)i.unshift(0),e.i++;i.unshift(1),e.i++}else i[n-1]++;for(;o<Math.max(0,t);o++)i.push(0);(t=i.reduceRight(function(e,t,n,r){return t+=e,r[n]=t%10,Math.floor(t/10)},0))&&(i.unshift(t),e.i++)}function xn(e,t,n,r,i){if(!b(e)&&!x(e)||isNaN(e))return"";var o=!isFinite(e),a=!1,s=Math.abs(e)+"",l="";if(o)l="∞";else{for(a=$n(s),bn(a,i,t.minFrac,t.maxFrac),l=a.d,s=a.i,i=a.e,o=[],a=l.reduce(function(e,t){return e&&!t},!0);0>s;)l.unshift(0),s++;for(s>0?o=l.splice(s,l.length):(o=l,l=[0]),s=[],l.length>=t.lgSize&&s.unshift(l.splice(-t.lgSize,l.length).join(""));l.length>t.gSize;)s.unshift(l.splice(-t.gSize,l.length).join(""));l.length&&s.unshift(l.join("")),l=s.join(n),o.length&&(l+=r+o.join("")),i&&(l+="e+"+i)}return 0>e&&!a?t.negPre+l+t.negSuf:t.posPre+l+t.posSuf}function wn(e,t,n,r){var i="";for((0>e||r&&0>=e)&&(r?e=-e+1:(e=-e,i="-")),e=""+e;e.length<t;)e=ki+e;return n&&(e=e.substr(e.length-t)),i+e}function Cn(e,t,n,r,i){return n=n||0,function(o){return o=o["get"+e](),(n>0||o>-n)&&(o+=n),0===o&&-12==n&&(o=12),wn(o,t,r,i)}}function En(e,t,n){return function(r,i){var o=r["get"+e](),a=Jn((n?"STANDALONE":"")+(t?"SHORT":"")+e);return i[a][o]}}function Sn(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(4>=t?5:12)-t)}function Tn(e){return function(t){var n=Sn(t.getFullYear());return t=+new Date(t.getFullYear(),t.getMonth(),t.getDate()+(4-t.getDay()))-+n,t=1+Math.round(t/6048e5),wn(t,e)}}function Ln(e,t){return 0>=e.getFullYear()?t.ERAS[0]:t.ERAS[1]}function An(e){function t(e){var t;if(t=e.match(n)){e=new Date(0);var r=0,i=0,o=t[8]?e.setUTCFullYear:e.setFullYear,a=t[8]?e.setUTCHours:e.setHours;t[9]&&(r=c(t[9]+t[10]),i=c(t[9]+t[11])),o.call(e,c(t[1]),c(t[2])-1,c(t[3])),r=c(t[4]||0)-r,i=c(t[5]||0)-i,o=c(t[6]||0),t=Math.round(1e3*parseFloat("0."+(t[7]||0))),a.call(e,r,i,o,t)}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,i,o){var a,s,l="",u=[];if(i=i||"mediumDate",i=e.DATETIME_FORMATS[i]||i,b(n)&&(n=Di.test(n)?c(n):t(n)),x(n)&&(n=new Date(n)),!w(n)||!isFinite(n.getTime()))return n;for(;i;)(s=Ni.exec(i))?(u=j(u,s,1),i=u.pop()):(u.push(i),i=null);var p=n.getTimezoneOffset();return o&&(p=B(o,p),n=_(n,o,!0)),r(u,function(t){a=Mi[t],l+=a?a(n,e.DATETIME_FORMATS,p):"''"===t?"'":t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),l}}function kn(){return function(e,t){return m(t)&&(t=2),F(e,t)}}function Mn(){return function(e,t,r){return t=1/0===Math.abs(Number(t))?Number(t):c(t),isNaN(t)?e:(x(e)&&(e=e.toString()),n(e)?(r=!r||isNaN(r)?0:c(r),r=0>r?Math.max(0,e.length+r):r,t>=0?Nn(e,r,r+t):0===r?Nn(e,t,e.length):Nn(e,Math.max(0,r+t),r)):e)}}function Nn(e,t,n){return b(e)?e.slice(t,n):Qn.call(e,t,n)}function Dn(e){function r(t){return t.map(function(t){var n=1,r=d;if(C(t))r=t;else if(b(t)&&("+"!=t.charAt(0)&&"-"!=t.charAt(0)||(n="-"==t.charAt(0)?-1:1,t=t.substring(1)),""!==t&&(r=e(t),r.constant)))var i=r(),r=function(e){return e[i]};return{get:r,descending:n}})}function i(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}function o(e,t){var n=0,r=e.type,i=t.type;if(r===i){var i=e.value,o=t.value;"string"===r?(i=i.toLowerCase(),o=o.toLowerCase()):"object"===r&&(y(i)&&(i=e.index),y(o)&&(o=t.index)),i!==o&&(n=o>i?-1:1)}else n=i>r?-1:1;return n}return function(e,a,s,l){if(null==e)return e;if(!n(e))throw t("orderBy")("notarray",e);ar(a)||(a=[a]),0===a.length&&(a=["+"]);var u=r(a),c=s?-1:1,p=C(l)?l:o;return e=Array.prototype.map.call(e,function(e,t){return{value:e,tieBreaker:{value:t,type:"number",index:t},predicateValues:u.map(function(n){var r=n.get(e);return n=typeof r,null===r?(n="string",r="null"):"object"===n&&(C(r.valueOf)&&(r=r.valueOf(),i(r))||g(r)&&(r=r.toString(),i(r))),{value:r,type:n,index:t}})}}),e.sort(function(e,t){for(var n=0,r=u.length;r>n;n++){var i=p(e.predicateValues[n],t.predicateValues[n]);if(i)return i*u[n].descending*c}return p(e.tieBreaker,t.tieBreaker)*c}),e=e.map(function(e){return e.value})}}function In(e){return C(e)&&(e={link:e}),e.restrict=e.restrict||"AC",h(e)}function On(e,t,n,i,o){var a=this,s=[];a.$error={},a.$$success={},a.$pending=void 0,a.$name=o(t.name||t.ngForm||"")(n),a.$dirty=!1,a.$pristine=!0,a.$valid=!0,a.$invalid=!1,a.$submitted=!1,a.$$parentForm=Pi,a.$rollbackViewValue=function(){r(s,function(e){e.$rollbackViewValue()})},a.$commitViewValue=function(){r(s,function(e){e.$commitViewValue()})},a.$addControl=function(e){re(e.$name,"input"),s.push(e),e.$name&&(a[e.$name]=e),e.$$parentForm=a},a.$$renameControl=function(e,t){var n=e.$name;a[n]===e&&delete a[n],a[t]=e,e.$name=t},a.$removeControl=function(e){e.$name&&a[e.$name]===e&&delete a[e.$name],r(a.$pending,function(t,n){a.$setValidity(n,null,e)}),r(a.$error,function(t,n){a.$setValidity(n,null,e)}),r(a.$$success,function(t,n){a.$setValidity(n,null,e)}),D(s,e),e.$$parentForm=Pi},Vn({ctrl:this,$element:e,set:function(e,t,n){var r=e[t];r?-1===r.indexOf(n)&&r.push(n):e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(D(r,n),0===r.length&&delete e[t])},$animate:i}),a.$setDirty=function(){i.removeClass(e,bo),i.addClass(e,xo),a.$dirty=!0,a.$pristine=!1,a.$$parentForm.$setDirty()},a.$setPristine=function(){i.setClass(e,bo,xo+" ng-submitted"),a.$dirty=!1,a.$pristine=!0,a.$submitted=!1,r(s,function(e){e.$setPristine()})},a.$setUntouched=function(){r(s,function(e){e.$setUntouched()})},a.$setSubmitted=function(){i.addClass(e,"ng-submitted"),a.$submitted=!0,a.$$parentForm.$setSubmitted()}}function jn(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function Rn(e,t,n,r,i,o){var a=Yn(t[0].type);if(!i.android){var s=!1;t.on("compositionstart",function(){s=!0}),t.on("compositionend",function(){s=!1,u()})}var l,u=function(e){if(l&&(o.defer.cancel(l),l=null),!s){var i=t.val();e=e&&e.type,"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=lr(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,e)}};if(i.hasEvent("input"))t.on("input",u);else{var c=function(e,t,n){l||(l=o.defer(function(){l=null,t&&t.value===n||u(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||t>15&&19>t||t>=37&&40>=t||c(e,this,this.value)}),i.hasEvent("paste")&&t.on("paste cut",c)}t.on("change",u),Yi[a]&&r.$$hasNativeValidators&&a===n.type&&t.on("keydown wheel mousedown",function(e){if(!l){var t=this.validity,n=t.badInput,r=t.typeMismatch;l=o.defer(function(){l=null,t.badInput===n&&t.typeMismatch===r||u(e)})}}),r.$render=function(){var e=r.$isEmpty(r.$viewValue)?"":r.$viewValue;t.val()!==e&&t.val(e)}}function Pn(e,t){return function(n,i){var o,a;if(w(n))return n;if(b(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),_i.test(n))return new Date(n);if(e.lastIndex=0,o=e.exec(n))return o.shift(),a=i?{yyyy:i.getFullYear(),MM:i.getMonth()+1,dd:i.getDate(),HH:i.getHours(),mm:i.getMinutes(),ss:i.getSeconds(),sss:i.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},r(o,function(e,n){n<t.length&&(a[t[n]]=+e)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function Fn(e,t,n,r){return function(i,o,a,s,l,u,c){function p(e){return e&&!(e.getTime&&e.getTime()!==e.getTime())}function f(e){return v(e)&&!w(e)?n(e)||void 0:e}Hn(i,o,a,s),Rn(i,o,a,s,l,u);var d,h=s&&s.$options&&s.$options.timezone;if(s.$$parserName=e,s.$parsers.push(function(e){return s.$isEmpty(e)?null:t.test(e)?(e=n(e,d),h&&(e=_(e,h)),e):void 0}),s.$formatters.push(function(e){if(e&&!w(e))throw Co("datefmt",e);return p(e)?((d=e)&&h&&(d=_(d,h,!0)),c("date")(e,r,h)):(d=null,"")}),v(a.min)||a.ngMin){var g;s.$validators.min=function(e){return!p(e)||m(g)||n(e)>=g},a.$observe("min",function(e){g=f(e),s.$validate()})}if(v(a.max)||a.ngMax){var y;s.$validators.max=function(e){return!p(e)||m(y)||n(e)<=y},a.$observe("max",function(e){y=f(e),s.$validate()})}}}function Hn(e,t,n,r){(r.$$hasNativeValidators=y(t[0].validity))&&r.$parsers.push(function(e){var n=t.prop("validity")||{};return n.badInput||n.typeMismatch?void 0:e})}function Bn(e,t,n,r,i){if(v(r)){if(e=e(r),!e.constant)throw Co("constexpr",n,r);return e(t)}return i}function _n(e,t){return e="ngClass"+e,["$animate",function(n){function i(e,t){var n=[],r=0;e:for(;r<e.length;r++){for(var i=e[r],o=0;o<t.length;o++)if(i==t[o])continue e;n.push(i)}return n}function o(e){var t=[];return ar(e)?(r(e,function(e){t=t.concat(o(e))}),t):b(e)?e.split(" "):y(e)?(r(e,function(e,n){e&&(t=t.concat(n.split(" ")))}),t):e}return{restrict:"AC",link:function(a,s,l){function u(e){e=c(e,1),l.$addClass(e)}function c(e,t){var n=s.data("$classCounts")||ae(),i=[];return r(e,function(e){(t>0||n[e])&&(n[e]=(n[e]||0)+t,n[e]===+(t>0)&&i.push(e))}),s.data("$classCounts",n),i.join(" ")}function p(e,t){var r=i(t,e),o=i(e,t),r=c(r,1),o=c(o,-1);r&&r.length&&n.addClass(s,r),o&&o.length&&n.removeClass(s,o)}function f(e){if(!0===t||(1&a.$index)===t){var n=o(e||[]);if(d){if(!O(e,d)){var r=o(d);p(r,n)}}else u(n)}d=ar(e)?e.map(function(e){return le(e)}):le(e)}var d;a.$watch(l[e],f,!0),l.$observe("class",function(t){f(a.$eval(l[e]))}),"ngClass"!==e&&a.$watch("$index",function(n,r){var i=1&n;if(i!==(1&r)){var s=o(a.$eval(l[e]));i===t?u(s):(i=c(s,-1),l.$removeClass(i))}})}}}]}function Vn(e){function t(e,t){t&&!o[e]?(l.addClass(i,e),o[e]=!0):!t&&o[e]&&(l.removeClass(i,e),o[e]=!1)}function n(e,n){e=e?"-"+Z(e,"-"):"",t(yo+e,!0===n),t($o+e,!1===n)}var r=e.ctrl,i=e.$element,o={},a=e.set,s=e.unset,l=e.$animate;o[$o]=!(o[yo]=i.hasClass(yo)),r.$setValidity=function(e,i,o){m(i)?(r.$pending||(r.$pending={}),a(r.$pending,e,o)):(r.$pending&&s(r.$pending,e,o),Un(r.$pending)&&(r.$pending=void 0)),L(i)?i?(s(r.$error,e,o),a(r.$$success,e,o)):(a(r.$error,e,o),s(r.$$success,e,o)):(s(r.$error,e,o),s(r.$$success,e,o)),r.$pending?(t(wo,!0),r.$valid=r.$invalid=void 0,n("",null)):(t(wo,!1),r.$valid=Un(r.$error),r.$invalid=!r.$valid,n("",r.$valid)),i=r.$pending&&r.$pending[e]?void 0:r.$error[e]?!1:r.$$success[e]?!0:null,n(e,i),r.$$parentForm.$setValidity(e,i,r)}}function Un(e){if(e)for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}var qn,Wn,Gn,zn,Kn=/^\/(.+)\/([a-z]*)$/,Xn=Object.prototype.hasOwnProperty,Yn=function(e){return b(e)?e.toLowerCase():e},Jn=function(e){return b(e)?e.toUpperCase():e},Qn=[].slice,Zn=[].splice,er=[].push,tr=Object.prototype.toString,nr=Object.getPrototypeOf,rr=t("ng"),ir=e.angular||(e.angular={}),or=0;qn=e.document.documentMode,f.$inject=[],d.$inject=[];var ar=Array.isArray,sr=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,lr=function(e){return b(e)?e.trim():e},ur=function(e){return e.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},cr=function(){if(!v(cr.rules)){var t=e.document.querySelector("[ng-csp]")||e.document.querySelector("[data-ng-csp]");if(t){var n=t.getAttribute("ng-csp")||t.getAttribute("data-ng-csp");cr.rules={noUnsafeEval:!n||-1!==n.indexOf("no-unsafe-eval"),noInlineStyle:!n||-1!==n.indexOf("no-inline-style")}}else{t=cr;try{new Function(""),n=!1}catch(r){n=!0}t.rules={noUnsafeEval:n,noInlineStyle:!1}}}return cr.rules},pr=function(){if(v(pr.name_))return pr.name_;var t,n,r,i,o=dr.length;for(n=0;o>n;++n)if(r=dr[n],t=e.document.querySelector("["+r.replace(":","\\:")+"jq]")){i=t.getAttribute(r+"jq");break}return pr.name_=i},fr=/:/g,dr=["ng-","data-ng-","ng:","x-ng-"],hr=/[A-Z]/g,gr=!1,mr=3,vr={full:"1.5.7",major:1,minor:5,dot:7,codeName:"hexagonal-circumvolution"};he.expando="ng339";var yr=he.cache={},$r=1;he._data=function(e){return this.cache[e[this.expando]]||{}};var br=/([\:\-\_]+(.))/g,xr=/^moz([A-Z])/,wr={mouseleave:"mouseout",mouseenter:"mouseover"},Cr=t("jqLite"),Er=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Sr=/<|&#?\w+;/,Tr=/<([\w:-]+)/,Lr=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Ar={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ar.optgroup=Ar.option,Ar.tbody=Ar.tfoot=Ar.colgroup=Ar.caption=Ar.thead,Ar.th=Ar.td;var kr=e.Node.prototype.contains||function(e){return!!(16&this.compareDocumentPosition(e))},Mr=he.prototype={ready:function(t){function n(){r||(r=!0,t())}var r=!1;"complete"===e.document.readyState?e.setTimeout(n):(this.on("DOMContentLoaded",n),he(e).on("load",n))},toString:function(){var e=[];return r(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return Wn(e>=0?this[e]:this[this.length+e])},length:0,push:er,sort:[].sort,splice:[].splice},Nr={};r("multiple selected checked disabled readOnly required open".split(" "),function(e){Nr[Yn(e)]=e});var Dr={};r("input select option textarea button form details".split(" "),function(e){Dr[e]=!0});var Ir={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};r({data:be,removeData:ye,hasData:function(e){for(var t in yr[e.ng339])return!0;return!1},cleanData:function(e){for(var t=0,n=e.length;n>t;t++)ye(e[t])}},function(e,t){he[t]=e}),r({data:be,inheritedData:Te,scope:function(e){return Wn.data(e,"$scope")||Te(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return Wn.data(e,"$isolateScope")||Wn.data(e,"$isolateScopeNoTemplate")},controller:Se,injector:function(e){return Te(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:xe,css:function(e,t,n){return t=ce(t),v(n)?void(e.style[t]=n):e.style[t]},attr:function(e,t,n){var r=e.nodeType;if(r!==mr&&2!==r&&8!==r)if(r=Yn(t),Nr[r]){if(!v(n))return e[t]||(e.attributes.getNamedItem(t)||f).specified?r:void 0;n?(e[t]=!0,e.setAttribute(t,r)):(e[t]=!1,e.removeAttribute(r))}else if(v(n))e.setAttribute(t,n);else if(e.getAttribute)return e=e.getAttribute(t,2),null===e?void 0:e},prop:function(e,t,n){return v(n)?void(e[t]=n):e[t]},text:function(){function e(e,t){if(m(t)){var n=e.nodeType;return 1===n||n===mr?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(m(t)){if(e.multiple&&"select"===N(e)){var n=[];return r(e.options,function(e){e.selected&&n.push(e.value||e.text)}),0===n.length?null:n}return e.value}e.value=t},html:function(e,t){return m(t)?e.innerHTML:(me(e,!0),void(e.innerHTML=t))},empty:Le},function(e,t){he.prototype[t]=function(t,n){var r,i,o=this.length;if(e!==Le&&m(2==e.length&&e!==xe&&e!==Se?t:n)){if(y(t)){for(r=0;o>r;r++)if(e===be)e(this[r],t);else for(i in t)e(this[r],i,t[i]);return this}for(r=e.$dv,o=m(r)?Math.min(o,1):o,i=0;o>i;i++){var a=e(this[i],t,n);r=r?r+a:a}return r}for(r=0;o>r;r++)e(this[r],t,n);return this}}),r({removeData:ye,on:function(e,t,n,r){if(v(r))throw Cr("onargs");if(pe(e)){r=$e(e,!0);var i=r.events,o=r.handle;o||(o=r.handle=Ne(e,i)),r=0<=t.indexOf(" ")?t.split(" "):[t];for(var a=r.length,s=function(t,r,a){var s=i[t];s||(s=i[t]=[],s.specialHandlerWrapper=r,"$destroy"===t||a||e.addEventListener(t,o,!1)),s.push(n)};a--;)t=r[a],wr[t]?(s(wr[t],Ie),s(t,void 0,!0)):s(t)}},off:ve,one:function(e,t,n){
e=Wn(e),e.on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,i=e.parentNode;me(e),r(new he(t),function(t){n?i.insertBefore(t,n.nextSibling):i.replaceChild(t,e),n=t})},children:function(e){var t=[];return r(e.childNodes,function(e){1===e.nodeType&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(1===n||11===n){t=new he(t);for(var n=0,r=t.length;r>n;n++)e.appendChild(t[n])}},prepend:function(e,t){if(1===e.nodeType){var n=e.firstChild;r(new he(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){de(e,Wn(t).eq(0).clone()[0])},remove:Ae,detach:function(e){Ae(e,!0)},after:function(e,t){var n=e,r=e.parentNode;t=new he(t);for(var i=0,o=t.length;o>i;i++){var a=t[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:Ce,removeClass:we,toggleClass:function(e,t,n){t&&r(t.split(" "),function(t){var r=n;m(r)&&(r=!xe(e,t)),(r?Ce:we)(e,t)})},parent:function(e){return(e=e.parentNode)&&11!==e.nodeType?e:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:ge,triggerHandler:function(e,t,n){var i,o,a=t.type||t,s=$e(e);(s=(s=s&&s.events)&&s[a])&&(i={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:f,type:a,target:e},t.type&&(i=l(i,t)),t=le(s),o=n?[i].concat(n):[i],r(t,function(t){i.isImmediatePropagationStopped()||t.apply(e,o)}))}},function(e,t){he.prototype[t]=function(t,n,r){for(var i,o=0,a=this.length;a>o;o++)m(i)?(i=e(this[o],t,n,r),v(i)&&(i=Wn(i))):Ee(i,e(this[o],t,n,r));return v(i)?i:this},he.prototype.bind=he.prototype.on,he.prototype.unbind=he.prototype.off}),Re.prototype={put:function(e,t){this[je(e,this.nextUid)]=t},get:function(e){return this[je(e,this.nextUid)]},remove:function(e){var t=this[e=je(e,this.nextUid)];return delete this[e],t}};var Or=[function(){this.$get=[function(){return Re}]}],jr=/^([^\(]+?)=>/,Rr=/^[^\(]*\(\s*([^\)]*)\)/m,Pr=/,/,Fr=/^\s*(_?)(\S+?)\1\s*$/,Hr=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Br=t("$injector");He.$$annotate=function(e,t,n){var i;if("function"==typeof e){if(!(i=e.$inject)){if(i=[],e.length){if(t)throw b(n)&&n||(n=e.name||Fe(e)),Br("strictdi",n);t=Pe(e),r(t[1].split(Pr),function(e){e.replace(Fr,function(e,t,n){i.push(n)})})}e.$inject=i}}else ar(e)?(t=e.length-1,ne(e[t],"fn"),i=e.slice(0,t)):ne(e,"fn",!0);return i};var _r=t("$animate"),Vr=function(){this.$get=f},Ur=function(){var e=new Re,t=[];this.$get=["$$AnimateRunner","$rootScope",function(n,i){function o(e,t,n){var i=!1;return t&&(t=b(t)?t.split(" "):ar(t)?t:[],r(t,function(t){t&&(i=!0,e[t]=n)})),i}function a(){r(t,function(t){var n=e.get(t);if(n){var i=Ve(t.attr("class")),o="",a="";r(n,function(e,t){e!==!!i[t]&&(e?o+=(o.length?" ":"")+t:a+=(a.length?" ":"")+t)}),r(t,function(e){o&&Ce(e,o),a&&we(e,a)}),e.remove(t)}}),t.length=0}return{enabled:f,on:f,off:f,pin:f,push:function(r,s,l,u){return u&&u(),l=l||{},l.from&&r.css(l.from),l.to&&r.css(l.to),(l.addClass||l.removeClass)&&(s=l.addClass,u=l.removeClass,l=e.get(r)||{},s=o(l,s,!0),u=o(l,u,!1),(s||u)&&(e.put(r,l),t.push(r),1===t.length&&i.$$postDigest(a))),r=new n,r.complete(),r}}}]},qr=["$provide",function(e){var t=this;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw _r("notcsel",n);var i=n+"-animation";t.$$registeredAnimations[n.substr(1)]=i,e.factory(i,r)},this.classNameFilter=function(e){if(1===arguments.length&&(this.$$classNameFilter=e instanceof RegExp?e:null)&&/(\s+|\/)ng-animate(\s+|\/)/.test(this.$$classNameFilter.toString()))throw _r("nongcls","ng-animate");return this.$$classNameFilter},this.$get=["$$animateQueue",function(e){function t(e,t,n){if(n){var r;e:{for(r=0;r<n.length;r++){var i=n[r];if(1===i.nodeType){r=i;break e}}r=void 0}!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(e):t.prepend(e)}return{on:e.on,off:e.off,pin:e.pin,enabled:e.enabled,cancel:function(e){e.end&&e.end()},enter:function(n,r,i,o){return r=r&&Wn(r),i=i&&Wn(i),r=r||i.parent(),t(n,r,i),e.push(n,"enter",Ue(o))},move:function(n,r,i,o){return r=r&&Wn(r),i=i&&Wn(i),r=r||i.parent(),t(n,r,i),e.push(n,"move",Ue(o))},leave:function(t,n){return e.push(t,"leave",Ue(n),function(){t.remove()})},addClass:function(t,n,r){return r=Ue(r),r.addClass=_e(r.addclass,n),e.push(t,"addClass",r)},removeClass:function(t,n,r){return r=Ue(r),r.removeClass=_e(r.removeClass,n),e.push(t,"removeClass",r)},setClass:function(t,n,r,i){return i=Ue(i),i.addClass=_e(i.addClass,n),i.removeClass=_e(i.removeClass,r),e.push(t,"setClass",i)},animate:function(t,n,r,i,o){return o=Ue(o),o.from=o.from?l(o.from,n):n,o.to=o.to?l(o.to,r):r,o.tempClasses=_e(o.tempClasses,i||"ng-inline-animate"),e.push(t,"animate",o)}}}]}],Wr=function(){this.$get=["$$rAF",function(e){function t(t){n.push(t),1<n.length||e(function(){for(var e=0;e<n.length;e++)n[e]();n=[]})}var n=[];return function(){var e=!1;return t(function(){e=!0}),function(n){e?n():t(n)}}}]},Gr=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$document","$timeout",function(e,t,n,i,o){function a(e){this.setHost(e);var t=n();this._doneCallbacks=[],this._tick=function(e){var n=i[0];n&&n.hidden?o(e,0,!1):t(e)},this._state=0}return a.chain=function(e,t){function n(){r===e.length?t(!0):e[r](function(e){!1===e?t(!1):(r++,n())})}var r=0;n()},a.all=function(e,t){function n(n){o=o&&n,++i===e.length&&t(o)}var i=0,o=!0;r(e,function(e){e.done(n)})},a.prototype={setHost:function(e){this.host=e||{}},done:function(e){2===this._state?e():this._doneCallbacks.push(e)},progress:f,getPromise:function(){if(!this.promise){var t=this;this.promise=e(function(e,n){t.done(function(t){!1===t?n():e()})})}return this.promise},then:function(e,t){return this.getPromise().then(e,t)},"catch":function(e){return this.getPromise()["catch"](e)},"finally":function(e){return this.getPromise()["finally"](e)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(e){var t=this;0===t._state&&(t._state=1,t._tick(function(){t._resolve(e)}))},_resolve:function(e){2!==this._state&&(r(this._doneCallbacks,function(t){t(e)}),this._doneCallbacks.length=0,this._state=2)}},a}]},zr=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(e,t,n){return function(t,r){function i(){return e(function(){o.addClass&&(t.addClass(o.addClass),o.addClass=null),o.removeClass&&(t.removeClass(o.removeClass),o.removeClass=null),o.to&&(t.css(o.to),o.to=null),a||s.complete(),a=!0}),s}var o=r||{};o.$$prepared||(o=I(o)),o.cleanupStyles&&(o.from=o.to=null),o.from&&(t.css(o.from),o.from=null);var a,s=new n;return{start:i,end:i}}}]},Kr=t("$compile"),Xr=new function(){};Ke.$inject=["$provide","$$sanitizeUriProvider"],Xe.prototype.isFirstChange=function(){return this.previousValue===Xr};var Yr=/^((?:x|data)[\:\-_])/i,Jr=t("$controller"),Qr=/^(\S+)(\s+as\s+([\w$]+))?$/,Zr=function(){this.$get=["$document",function(e){return function(t){return t?!t.nodeType&&t instanceof Wn&&(t=t[0]):t=e[0].body,t.offsetWidth+1}}]},ei="application/json",ti={"Content-Type":ei+";charset=utf-8"},ni=/^\[|^\{(?!\{)/,ri={"[":/]$/,"{":/}$/},ii=/^\)\]\}',?\n/,oi=t("$http"),ai=function(e){return function(){throw oi("legacy",e)}},si=ir.$interpolateMinErr=t("$interpolate");si.throwNoconcat=function(e){throw si("noconcat",e)},si.interr=function(e,t){return si("interr",e,t.toString())};var li=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,ui={http:80,https:443,ftp:21},ci=t("$location"),pi={$$absUrl:"",$$html5:!1,$$replace:!1,absUrl:St("$$absUrl"),url:function(e){if(m(e))return this.$$url;var t=li.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:St("$$protocol"),host:St("$$host"),port:St("$$port"),path:Tt("$$path",function(e){return e=null!==e?e.toString():"","/"==e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(b(e)||x(e))e=e.toString(),this.$$search=q(e);else{if(!y(e))throw ci("isrcharg");e=I(e,{}),r(e,function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:m(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:Tt("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};r([Et,Ct,wt],function(e){e.prototype=Object.create(pi),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==wt||!this.$$html5)throw ci("nostate");return this.$$state=m(t)?null:t,this}});var fi=t("$parse"),di=Function.prototype.call,hi=Function.prototype.apply,gi=Function.prototype.bind,mi=ae();r("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(e){mi[e]=!0});var vi={n:"\n",f:"\f",r:"\r",t:"	",v:"\x0B","'":"'",'"':'"'},yi=function(e){this.options=e};yi.prototype={constructor:yi,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;)if(e=this.text.charAt(this.index),'"'===e||"'"===e)this.readString(e);else if(this.isNumber(e)||"."===e&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(e,"(){}[].,;:?"))this.tokens.push({index:this.index,text:e}),this.index++;else if(this.isWhitespace(e))this.index++;else{var t=e+this.peek(),n=t+this.peek(2),r=mi[t],i=mi[n];mi[e]||r||i?(e=i?n:r?t:e,this.tokens.push({index:this.index,text:e,operator:!0}),this.index+=e.length):this.throwError("Unexpected next character ",this.index,this.index+1)}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){return e=e||1,this.index+e<this.text.length?this.text.charAt(this.index+e):!1},isNumber:function(e){return e>="0"&&"9">=e&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"	"===e||"\n"===e||"\x0B"===e||" "===e},isIdentifierStart:function(e){return this.options.isIdentifierStart?this.options.isIdentifierStart(e,this.codePointAt(e)):this.isValidIdentifierStart(e)},isValidIdentifierStart:function(e){return e>="a"&&"z">=e||e>="A"&&"Z">=e||"_"===e||"$"===e},isIdentifierContinue:function(e){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(e,this.codePointAt(e)):this.isValidIdentifierContinue(e)},isValidIdentifierContinue:function(e,t){return this.isValidIdentifierStart(e,t)||this.isNumber(e)},codePointAt:function(e){return 1===e.length?e.charCodeAt(0):(e.charCodeAt(0)<<10)+e.charCodeAt(1)-56613888},peekMultichar:function(){var e=this.text.charAt(this.index),t=this.peek();if(!t)return e;var n=e.charCodeAt(0),r=t.charCodeAt(0);return n>=55296&&56319>=n&&r>=56320&&57343>=r?e+t:e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){throw n=n||this.index,t=v(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n,fi("lexerr",e,t,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=Yn(this.text.charAt(this.index));if("."==n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){var e=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var t=this.peekMultichar();if(!this.isIdentifierContinue(t))break;this.index+=t.length}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index),r=r+o;if(i)"u"===o?(i=this.text.substring(this.index+1,this.index+5),i.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+i+"]"),this.index+=4,n+=String.fromCharCode(parseInt(i,16))):n+=vi[o]||o,i=!1;else if("\\"===o)i=!0;else{if(o===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",t)}};var $i=function(e,t){this.lexer=e,this.options=t};$i.Program="Program",$i.ExpressionStatement="ExpressionStatement",$i.AssignmentExpression="AssignmentExpression",$i.ConditionalExpression="ConditionalExpression",$i.LogicalExpression="LogicalExpression",$i.BinaryExpression="BinaryExpression",$i.UnaryExpression="UnaryExpression",$i.CallExpression="CallExpression",$i.MemberExpression="MemberExpression",$i.Identifier="Identifier",$i.Literal="Literal",$i.ArrayExpression="ArrayExpression",$i.Property="Property",$i.ObjectExpression="ObjectExpression",$i.ThisExpression="ThisExpression",$i.LocalsExpression="LocalsExpression",$i.NGValueParameter="NGValueParameter",$i.prototype={ast:function(e){return this.text=e,this.tokens=this.lexer.lex(e),e=this.program(),0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),e},program:function(){for(var e=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&e.push(this.expressionStatement()),!this.expect(";"))return{type:$i.Program,body:e}},expressionStatement:function(){return{type:$i.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var e=this.expression();this.expect("|");)e=this.filter(e);return e},expression:function(){return this.assignment()},assignment:function(){var e=this.ternary();return this.expect("=")&&(e={type:$i.AssignmentExpression,left:e,right:this.assignment(),operator:"="}),e},ternary:function(){var e,t,n=this.logicalOR();return this.expect("?")&&(e=this.expression(),this.consume(":"))?(t=this.expression(),{type:$i.ConditionalExpression,test:n,alternate:e,consequent:t}):n},logicalOR:function(){for(var e=this.logicalAND();this.expect("||");)e={type:$i.LogicalExpression,operator:"||",left:e,right:this.logicalAND()};return e},logicalAND:function(){for(var e=this.equality();this.expect("&&");)e={type:$i.LogicalExpression,operator:"&&",left:e,right:this.equality()};return e},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t={type:$i.BinaryExpression,operator:e.text,left:t,right:this.relational()};return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t={type:$i.BinaryExpression,operator:e.text,left:t,right:this.additive()};return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t={type:$i.BinaryExpression,operator:e.text,left:t,right:this.multiplicative()};return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t={type:$i.BinaryExpression,operator:e.text,left:t,right:this.unary()};return t},unary:function(){var e;return(e=this.expect("+","-","!"))?{type:$i.UnaryExpression,operator:e.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var e;this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?e=I(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?e={type:$i.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());for(var t;t=this.expect("(","[",".");)"("===t.text?(e={type:$i.CallExpression,callee:e,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(e={type:$i.MemberExpression,object:e,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?e={type:$i.MemberExpression,object:e,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return e},filter:function(e){e=[e];for(var t={type:$i.CallExpression,callee:this.identifier(),arguments:e,filter:!0};this.expect(":");)e.push(this.expression());return t},parseArguments:function(){var e=[];if(")"!==this.peekToken().text)do e.push(this.filterChain());while(this.expect(","));return e},identifier:function(){var e=this.consume();return e.identifier||this.throwError("is not a valid identifier",e),{type:$i.Identifier,name:e.text}},constant:function(){return{type:$i.Literal,value:this.consume().value}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:$i.ArrayExpression,elements:e}},object:function(){var e,t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;e={type:$i.Property,kind:"init"},this.peek().constant?(e.key=this.constant(),e.computed=!1,this.consume(":"),e.value=this.expression()):this.peek().identifier?(e.key=this.identifier(),e.computed=!1,this.peek(":")?(this.consume(":"),e.value=this.expression()):e.value=e.key):this.peek("[")?(this.consume("["),e.key=this.expression(),this.consume("]"),e.computed=!0,this.consume(":"),e.value=this.expression()):this.throwError("invalid key",this.peek()),t.push(e)}while(this.expect(","));return this.consume("}"),{type:$i.ObjectExpression,properties:t}},throwError:function(e,t){throw fi("syntax",t.text,e,t.index+1,this.text,this.text.substring(t.index))},consume:function(e){if(0===this.tokens.length)throw fi("ueoe",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},peekToken:function(){if(0===this.tokens.length)throw fi("ueoe",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,i){if(this.tokens.length>e){e=this.tokens[e];var o=e.text;if(o===t||o===n||o===r||o===i||!(t||n||r||i))return e}return!1},expect:function(e,t,n,r){return(e=this.peek(e,t,n,r))?(this.tokens.shift(),e):!1},selfReferential:{"this":{type:$i.ThisExpression},$locals:{type:$i.LocalsExpression}}},_t.prototype={compile:function(e,t){var n=this,i=this.astBuilder.ast(e);this.state={nextId:0,filters:{},expensiveChecks:t,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},Rt(i,n.$filter);var o,a="";return this.stage="assign",(o=Ht(i))&&(this.state.computing="assign",a=this.nextId(),this.recurse(o,a),this.return_(a),a="fn.assign="+this.generateFunction("assign","s,v,l")),o=Pt(i.body),n.stage="inputs",r(o,function(e,t){var r="fn"+t;n.state[r]={vars:[],body:[],own:{}},n.state.computing=r;var i=n.nextId();n.recurse(e,i),n.return_(i),n.state.inputs.push(r),e.watchId=t}),this.state.computing="fn",this.stage="main",this.recurse(i),a='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+a+this.watchFns()+"return fn;",a=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext","ifDefined","plus","text",a)(this.$filter,kt,Nt,Dt,Mt,It,Ot,jt,e),this.state=this.stage=void 0,a.literal=Bt(i),a.constant=i.constant,a},USE:"use",STRICT:"strict",watchFns:function(){var e=[],t=this.state.inputs,n=this;return r(t,function(t){e.push("var "+t+"="+n.generateFunction(t,"s"))}),t.length&&e.push("fn.inputs=["+t.join(",")+"];"),e.join("")},generateFunction:function(e,t){return"function("+t+"){"+this.varsPrefix(e)+this.body(e)+"};"},filterPrefix:function(){var e=[],t=this;return r(this.state.filters,function(n,r){e.push(n+"=$filter("+t.escape(r)+")")}),e.length?"var "+e.join(",")+";":""},varsPrefix:function(e){return this.state[e].vars.length?"var "+this.state[e].vars.join(",")+";":""},body:function(e){return this.state[e].body.join("")},recurse:function(e,t,n,i,o,a){var s,l,u,c,p,d=this;if(i=i||f,!a&&v(e.watchId))t=t||this.nextId(),this.if_("i",this.lazyAssign(t,this.computedMember("i",e.watchId)),this.lazyRecurse(e,t,n,i,o,!0));else switch(e.type){case $i.Program:r(e.body,function(t,n){d.recurse(t.expression,void 0,void 0,function(e){l=e}),n!==e.body.length-1?d.current().body.push(l,";"):d.return_(l)});break;case $i.Literal:c=this.escape(e.value),this.assign(t,c),i(c);break;case $i.UnaryExpression:this.recurse(e.argument,void 0,void 0,function(e){l=e}),c=e.operator+"("+this.ifDefined(l,0)+")",this.assign(t,c),i(c);break;case $i.BinaryExpression:this.recurse(e.left,void 0,void 0,function(e){s=e}),this.recurse(e.right,void 0,void 0,function(e){l=e}),c="+"===e.operator?this.plus(s,l):"-"===e.operator?this.ifDefined(s,0)+e.operator+this.ifDefined(l,0):"("+s+")"+e.operator+"("+l+")",this.assign(t,c),i(c);break;case $i.LogicalExpression:t=t||this.nextId(),d.recurse(e.left,t),d.if_("&&"===e.operator?t:d.not(t),d.lazyRecurse(e.right,t)),i(t);break;case $i.ConditionalExpression:t=t||this.nextId(),d.recurse(e.test,t),d.if_(t,d.lazyRecurse(e.alternate,t),d.lazyRecurse(e.consequent,t)),i(t);break;case $i.Identifier:t=t||this.nextId(),n&&(n.context="inputs"===d.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",e.name)+"?l:s"),n.computed=!1,n.name=e.name),kt(e.name),d.if_("inputs"===d.stage||d.not(d.getHasOwnProperty("l",e.name)),function(){d.if_("inputs"===d.stage||"s",function(){o&&1!==o&&d.if_(d.not(d.nonComputedMember("s",e.name)),d.lazyAssign(d.nonComputedMember("s",e.name),"{}")),d.assign(t,d.nonComputedMember("s",e.name))})},t&&d.lazyAssign(t,d.nonComputedMember("l",e.name))),(d.state.expensiveChecks||Ut(e.name))&&d.addEnsureSafeObject(t),i(t);break;case $i.MemberExpression:s=n&&(n.context=this.nextId())||this.nextId(),t=t||this.nextId(),d.recurse(e.object,s,void 0,function(){d.if_(d.notNull(s),function(){o&&1!==o&&d.addEnsureSafeAssignContext(s),e.computed?(l=d.nextId(),d.recurse(e.property,l),d.getStringValue(l),d.addEnsureSafeMemberName(l),o&&1!==o&&d.if_(d.not(d.computedMember(s,l)),d.lazyAssign(d.computedMember(s,l),"{}")),c=d.ensureSafeObject(d.computedMember(s,l)),d.assign(t,c),n&&(n.computed=!0,n.name=l)):(kt(e.property.name),o&&1!==o&&d.if_(d.not(d.nonComputedMember(s,e.property.name)),d.lazyAssign(d.nonComputedMember(s,e.property.name),"{}")),c=d.nonComputedMember(s,e.property.name),(d.state.expensiveChecks||Ut(e.property.name))&&(c=d.ensureSafeObject(c)),d.assign(t,c),n&&(n.computed=!1,n.name=e.property.name))},function(){d.assign(t,"undefined")}),i(t)},!!o);break;case $i.CallExpression:t=t||this.nextId(),e.filter?(l=d.filter(e.callee.name),u=[],r(e.arguments,function(e){var t=d.nextId();d.recurse(e,t),u.push(t)}),c=l+"("+u.join(",")+")",d.assign(t,c),i(t)):(l=d.nextId(),s={},u=[],d.recurse(e.callee,l,s,function(){d.if_(d.notNull(l),function(){d.addEnsureSafeFunction(l),r(e.arguments,function(e){d.recurse(e,d.nextId(),void 0,function(e){u.push(d.ensureSafeObject(e))})}),s.name?(d.state.expensiveChecks||d.addEnsureSafeObject(s.context),c=d.member(s.context,s.name,s.computed)+"("+u.join(",")+")"):c=l+"("+u.join(",")+")",c=d.ensureSafeObject(c),d.assign(t,c)},function(){d.assign(t,"undefined")}),i(t)}));break;case $i.AssignmentExpression:if(l=this.nextId(),s={},!Ft(e.left))throw fi("lval");this.recurse(e.left,void 0,s,function(){d.if_(d.notNull(s.context),function(){d.recurse(e.right,l),d.addEnsureSafeObject(d.member(s.context,s.name,s.computed)),d.addEnsureSafeAssignContext(s.context),c=d.member(s.context,s.name,s.computed)+e.operator+l,d.assign(t,c),i(t||c)})},1);break;case $i.ArrayExpression:u=[],r(e.elements,function(e){d.recurse(e,d.nextId(),void 0,function(e){u.push(e)})}),c="["+u.join(",")+"]",this.assign(t,c),i(c);break;case $i.ObjectExpression:u=[],p=!1,r(e.properties,function(e){e.computed&&(p=!0)}),p?(t=t||this.nextId(),this.assign(t,"{}"),r(e.properties,function(e){e.computed?(s=d.nextId(),d.recurse(e.key,s)):s=e.key.type===$i.Identifier?e.key.name:""+e.key.value,l=d.nextId(),d.recurse(e.value,l),d.assign(d.member(t,s,e.computed),l)})):(r(e.properties,function(t){d.recurse(t.value,e.constant?void 0:d.nextId(),void 0,function(e){u.push(d.escape(t.key.type===$i.Identifier?t.key.name:""+t.key.value)+":"+e)})}),c="{"+u.join(",")+"}",this.assign(t,c)),i(t||c);break;case $i.ThisExpression:this.assign(t,"s"),i("s");break;case $i.LocalsExpression:this.assign(t,"l"),i("l");break;case $i.NGValueParameter:this.assign(t,"v"),i("v")}},getHasOwnProperty:function(e,t){var n=e+"."+t,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,e+"&&("+this.escape(t)+" in "+e+")")),r[n]},assign:function(e,t){return e?(this.current().body.push(e,"=",t,";"),e):void 0},filter:function(e){return this.state.filters.hasOwnProperty(e)||(this.state.filters[e]=this.nextId(!0)),this.state.filters[e]},ifDefined:function(e,t){return"ifDefined("+e+","+this.escape(t)+")"},plus:function(e,t){return"plus("+e+","+t+")"},return_:function(e){this.current().body.push("return ",e,";")},if_:function(e,t,n){if(!0===e)t();else{var r=this.current().body;r.push("if(",e,"){"),t(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(e){return"!("+e+")"},notNull:function(e){return e+"!=null"},nonComputedMember:function(e,t){var n=/[^$_a-zA-Z0-9]/g;return/[$_a-zA-Z][$_a-zA-Z0-9]*/.test(t)?e+"."+t:e+'["'+t.replace(n,this.stringEscapeFn)+'"]'},computedMember:function(e,t){return e+"["+t+"]"},member:function(e,t,n){return n?this.computedMember(e,t):this.nonComputedMember(e,t)},addEnsureSafeObject:function(e){this.current().body.push(this.ensureSafeObject(e),";")},addEnsureSafeMemberName:function(e){this.current().body.push(this.ensureSafeMemberName(e),";")},addEnsureSafeFunction:function(e){this.current().body.push(this.ensureSafeFunction(e),";")},addEnsureSafeAssignContext:function(e){this.current().body.push(this.ensureSafeAssignContext(e),";")},ensureSafeObject:function(e){return"ensureSafeObject("+e+",text)"},ensureSafeMemberName:function(e){return"ensureSafeMemberName("+e+",text)"},ensureSafeFunction:function(e){return"ensureSafeFunction("+e+",text)"},getStringValue:function(e){this.assign(e,"getStringValue("+e+")")},ensureSafeAssignContext:function(e){return"ensureSafeAssignContext("+e+",text)"},lazyRecurse:function(e,t,n,r,i,o){var a=this;return function(){a.recurse(e,t,n,r,i,o)}},lazyAssign:function(e,t){var n=this;return function(){n.assign(e,t)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)},escape:function(e){if(b(e))return"'"+e.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(x(e))return e.toString();if(!0===e)return"true";if(!1===e)return"false";if(null===e)return"null";if("undefined"==typeof e)return"undefined";throw fi("esc")},nextId:function(e,t){var n="v"+this.state.nextId++;return e||this.current().vars.push(n+(t?"="+t:"")),n},current:function(){return this.state[this.state.computing]}},Vt.prototype={compile:function(e,t){var n=this,i=this.astBuilder.ast(e);this.expression=e,this.expensiveChecks=t,Rt(i,n.$filter);var o,a;(o=Ht(i))&&(a=this.recurse(o)),o=Pt(i.body);var s;o&&(s=[],r(o,function(e,t){var r=n.recurse(e);e.input=r,s.push(r),e.watchId=t}));var l=[];return r(i.body,function(e){l.push(n.recurse(e.expression))}),o=0===i.body.length?f:1===i.body.length?l[0]:function(e,t){var n;return r(l,function(r){n=r(e,t)}),n},a&&(o.assign=function(e,t,n){return a(e,n,t)}),s&&(o.inputs=s),o.literal=Bt(i),o.constant=i.constant,o},recurse:function(e,t,n){var i,o,a,s=this;if(e.input)return this.inputs(e.input,e.watchId);switch(e.type){case $i.Literal:return this.value(e.value,t);case $i.UnaryExpression:return o=this.recurse(e.argument),this["unary"+e.operator](o,t);case $i.BinaryExpression:return i=this.recurse(e.left),o=this.recurse(e.right),this["binary"+e.operator](i,o,t);case $i.LogicalExpression:return i=this.recurse(e.left),o=this.recurse(e.right),this["binary"+e.operator](i,o,t);case $i.ConditionalExpression:return this["ternary?:"](this.recurse(e.test),this.recurse(e.alternate),this.recurse(e.consequent),t);case $i.Identifier:return kt(e.name,s.expression),s.identifier(e.name,s.expensiveChecks||Ut(e.name),t,n,s.expression);case $i.MemberExpression:return i=this.recurse(e.object,!1,!!n),e.computed||(kt(e.property.name,s.expression),o=e.property.name),e.computed&&(o=this.recurse(e.property)),e.computed?this.computedMember(i,o,t,n,s.expression):this.nonComputedMember(i,o,s.expensiveChecks,t,n,s.expression);case $i.CallExpression:return a=[],r(e.arguments,function(e){a.push(s.recurse(e))}),e.filter&&(o=this.$filter(e.callee.name)),e.filter||(o=this.recurse(e.callee,!0)),e.filter?function(e,n,r,i){for(var s=[],l=0;l<a.length;++l)s.push(a[l](e,n,r,i));return e=o.apply(void 0,s,i),t?{context:void 0,name:void 0,value:e}:e}:function(e,n,r,i){var l,u=o(e,n,r,i);if(null!=u.value){Nt(u.context,s.expression),Dt(u.value,s.expression),l=[];for(var c=0;c<a.length;++c)l.push(Nt(a[c](e,n,r,i),s.expression));l=Nt(u.value.apply(u.context,l),s.expression)}return t?{value:l}:l};case $i.AssignmentExpression:return i=this.recurse(e.left,!0,1),o=this.recurse(e.right),function(e,n,r,a){var l=i(e,n,r,a);return e=o(e,n,r,a),Nt(l.value,s.expression),It(l.context),l.context[l.name]=e,t?{value:e}:e};case $i.ArrayExpression:return a=[],r(e.elements,function(e){a.push(s.recurse(e))}),function(e,n,r,i){for(var o=[],s=0;s<a.length;++s)o.push(a[s](e,n,r,i));return t?{value:o}:o};case $i.ObjectExpression:return a=[],r(e.properties,function(e){e.computed?a.push({key:s.recurse(e.key),computed:!0,value:s.recurse(e.value)}):a.push({key:e.key.type===$i.Identifier?e.key.name:""+e.key.value,computed:!1,value:s.recurse(e.value)})}),function(e,n,r,i){for(var o={},s=0;s<a.length;++s)a[s].computed?o[a[s].key(e,n,r,i)]=a[s].value(e,n,r,i):o[a[s].key]=a[s].value(e,n,r,i);return t?{value:o}:o};case $i.ThisExpression:return function(e){return t?{value:e}:e};case $i.LocalsExpression:return function(e,n){return t?{value:n}:n};case $i.NGValueParameter:return function(e,n,r){return t?{value:r}:r}}},"unary+":function(e,t){return function(n,r,i,o){return n=e(n,r,i,o),n=v(n)?+n:0,t?{value:n}:n}},"unary-":function(e,t){return function(n,r,i,o){return n=e(n,r,i,o),n=v(n)?-n:0,t?{value:n}:n}},"unary!":function(e,t){return function(n,r,i,o){return n=!e(n,r,i,o),t?{value:n}:n}},"binary+":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a);return r=t(r,i,o,a),s=jt(s,r),n?{value:s}:s}},"binary-":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a);return r=t(r,i,o,a),s=(v(s)?s:0)-(v(r)?r:0),n?{value:s}:s}},"binary*":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)*t(r,i,o,a),n?{value:r}:r}},"binary/":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)/t(r,i,o,a),n?{value:r}:r}},"binary%":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)%t(r,i,o,a),n?{value:r}:r}},"binary===":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)===t(r,i,o,a),n?{value:r}:r}},"binary!==":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)!==t(r,i,o,a),n?{value:r}:r}},"binary==":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)==t(r,i,o,a),n?{value:r}:r}},"binary!=":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)!=t(r,i,o,a),n?{value:r}:r}},"binary<":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)<t(r,i,o,a),n?{value:r}:r}},"binary>":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)>t(r,i,o,a),n?{value:r}:r}},"binary<=":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)<=t(r,i,o,a),n?{value:r}:r}},"binary>=":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)>=t(r,i,o,a),n?{value:r}:r}},"binary&&":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)&&t(r,i,o,a),n?{value:r}:r}},"binary||":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)||t(r,i,o,a),n?{value:r}:r}},"ternary?:":function(e,t,n,r){return function(i,o,a,s){return i=e(i,o,a,s)?t(i,o,a,s):n(i,o,a,s),r?{value:i}:i}},value:function(e,t){return function(){return t?{context:void 0,
name:void 0,value:e}:e}},identifier:function(e,t,n,r,i){return function(o,a,s,l){return o=a&&e in a?a:o,r&&1!==r&&o&&!o[e]&&(o[e]={}),a=o?o[e]:void 0,t&&Nt(a,i),n?{context:o,name:e,value:a}:a}},computedMember:function(e,t,n,r,i){return function(o,a,s,l){var u,c,p=e(o,a,s,l);return null!=p&&(u=t(o,a,s,l),u+="",kt(u,i),r&&1!==r&&(It(p),p&&!p[u]&&(p[u]={})),c=p[u],Nt(c,i)),n?{context:p,name:u,value:c}:c}},nonComputedMember:function(e,t,n,r,i,o){return function(a,s,l,u){return a=e(a,s,l,u),i&&1!==i&&(It(a),a&&!a[t]&&(a[t]={})),s=null!=a?a[t]:void 0,(n||Ut(t))&&Nt(s,o),r?{context:a,name:t,value:s}:s}},inputs:function(e,t){return function(n,r,i,o){return o?o[t]:e(n,r,i)}}};var bi=function(e,t,n){this.lexer=e,this.$filter=t,this.options=n,this.ast=new $i(e,n),this.astCompiler=n.csp?new Vt(this.ast,t):new _t(this.ast,t)};bi.prototype={constructor:bi,parse:function(e){return this.astCompiler.compile(e,this.options.expensiveChecks)}};var xi=Object.prototype.valueOf,wi=t("$sce"),Ci={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Ei=t("$compile"),Si=e.document.createElement("a"),Ti=sn(e.location.href);cn.$inject=["$document"],fn.$inject=["$provide"];var Li=22,Ai=".",ki="0";vn.$inject=["$locale"],yn.$inject=["$locale"];var Mi={yyyy:Cn("FullYear",4,0,!1,!0),yy:Cn("FullYear",2,0,!0,!0),y:Cn("FullYear",1,0,!1,!0),MMMM:En("Month"),MMM:En("Month",!0),MM:Cn("Month",2,1),M:Cn("Month",1,1),LLLL:En("Month",!1,!0),dd:Cn("Date",2),d:Cn("Date",1),HH:Cn("Hours",2),H:Cn("Hours",1),hh:Cn("Hours",2,-12),h:Cn("Hours",1,-12),mm:Cn("Minutes",2),m:Cn("Minutes",1),ss:Cn("Seconds",2),s:Cn("Seconds",1),sss:Cn("Milliseconds",3),EEEE:En("Day"),EEE:En("Day",!0),a:function(e,t){return 12>e.getHours()?t.AMPMS[0]:t.AMPMS[1]},Z:function(e,t,n){return e=-1*n,e=(e>=0?"+":"")+(wn(Math[e>0?"floor":"ceil"](e/60),2)+wn(Math.abs(e%60),2))},ww:Tn(2),w:Tn(1),G:Ln,GG:Ln,GGG:Ln,GGGG:function(e,t){return 0>=e.getFullYear()?t.ERANAMES[0]:t.ERANAMES[1]}},Ni=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,Di=/^\-?\d+$/;An.$inject=["$locale"];var Ii=h(Yn),Oi=h(Jn);Dn.$inject=["$parse"];var ji=h({restrict:"E",compile:function(e,t){return t.href||t.xlinkHref?void 0:function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===tr.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(n)||e.preventDefault()})}}}}),Ri={};r(Nr,function(e,t){function n(e,n,i){e.$watch(i[r],function(e){i.$set(t,!!e)})}if("multiple"!=e){var r=Ye("ng-"+t),i=n;"checked"===e&&(i=function(e,t,i){i.ngModel!==i[r]&&n(e,t,i)}),Ri[r]=function(){return{restrict:"A",priority:100,link:i}}}}),r(Ir,function(e,t){Ri[t]=function(){return{priority:100,link:function(e,n,r){return"ngPattern"===t&&"/"==r.ngPattern.charAt(0)&&(n=r.ngPattern.match(Kn))?void r.$set("ngPattern",new RegExp(n[1],n[2])):void e.$watch(r[t],function(e){r.$set(t,e)})}}}}),r(["src","srcset","href"],function(e){var t=Ye("ng-"+e);Ri[t]=function(){return{priority:99,link:function(n,r,i){var o=e,a=e;"href"===e&&"[object SVGAnimatedString]"===tr.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(t,function(t){t?(i.$set(a,t),qn&&o&&r.prop(o,i[a])):"href"===e&&i.$set(a,null)})}}}});var Pi={$addControl:f,$$renameControl:function(e,t){e.$name=t},$removeControl:f,$setValidity:f,$setDirty:f,$setPristine:f,$setSubmitted:f};On.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var Fi=function(e){return["$timeout","$parse",function(t,n){function r(e){return""===e?n('this[""]').assign:n(e).assign||f}return{name:"form",restrict:e?"EAC":"E",require:["form","^^?form"],controller:On,compile:function(n,i){n.addClass(bo).addClass(yo);var o=i.name?"name":e&&i.ngForm?"ngForm":!1;return{pre:function(e,n,i,a){var s=a[0];if(!("action"in i)){var u=function(t){e.$apply(function(){s.$commitViewValue(),s.$setSubmitted()}),t.preventDefault()};n[0].addEventListener("submit",u,!1),n.on("$destroy",function(){t(function(){n[0].removeEventListener("submit",u,!1)},0,!1)})}(a[1]||s.$$parentForm).$addControl(s);var c=o?r(s.$name):f;o&&(c(e,s),i.$observe(o,function(t){s.$name!==t&&(c(e,void 0),s.$$parentForm.$$renameControl(s,t),(c=r(s.$name))(e,s))})),n.on("$destroy",function(){s.$$parentForm.$removeControl(s),c(e,void 0),l(s,Pi)})}}}}}]},Hi=Fi(),Bi=Fi(!0),_i=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,Vi=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,Ui=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/,qi=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Wi=/^(\d{4,})-(\d{2})-(\d{2})$/,Gi=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,zi=/^(\d{4,})-W(\d\d)$/,Ki=/^(\d{4,})-(\d\d)$/,Xi=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Yi=ae();r(["date","datetime-local","month","time","week"],function(e){Yi[e]=!0});var Ji={text:function(e,t,n,r,i,o){Rn(e,t,n,r,i,o),jn(r)},date:Fn("date",Wi,Pn(Wi,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":Fn("datetimelocal",Gi,Pn(Gi,"yyyy MM dd HH mm ss sss".split(" ")),"yyyy-MM-ddTHH:mm:ss.sss"),time:Fn("time",Xi,Pn(Xi,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:Fn("week",zi,function(e,t){if(w(e))return e;if(b(e)){zi.lastIndex=0;var n=zi.exec(e);if(n){var r=+n[1],i=+n[2],o=n=0,a=0,s=0,l=Sn(r),i=7*(i-1);return t&&(n=t.getHours(),o=t.getMinutes(),a=t.getSeconds(),s=t.getMilliseconds()),new Date(r,0,l.getDate()+i,n,o,a,s)}}return NaN},"yyyy-Www"),month:Fn("month",Ki,Pn(Ki,["yyyy","MM"]),"yyyy-MM"),number:function(e,t,n,r,i,o){if(Hn(e,t,n,r),Rn(e,t,n,r,i,o),r.$$parserName="number",r.$parsers.push(function(e){return r.$isEmpty(e)?null:qi.test(e)?parseFloat(e):void 0}),r.$formatters.push(function(e){if(!r.$isEmpty(e)){if(!x(e))throw Co("numfmt",e);e=e.toString()}return e}),v(n.min)||n.ngMin){var a;r.$validators.min=function(e){return r.$isEmpty(e)||m(a)||e>=a},n.$observe("min",function(e){v(e)&&!x(e)&&(e=parseFloat(e,10)),a=x(e)&&!isNaN(e)?e:void 0,r.$validate()})}if(v(n.max)||n.ngMax){var s;r.$validators.max=function(e){return r.$isEmpty(e)||m(s)||s>=e},n.$observe("max",function(e){v(e)&&!x(e)&&(e=parseFloat(e,10)),s=x(e)&&!isNaN(e)?e:void 0,r.$validate()})}},url:function(e,t,n,r,i,o){Rn(e,t,n,r,i,o),jn(r),r.$$parserName="url",r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||Vi.test(n)}},email:function(e,t,n,r,i,o){Rn(e,t,n,r,i,o),jn(r),r.$$parserName="email",r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||Ui.test(n)}},radio:function(e,t,n,r){m(n.name)&&t.attr("name",++or),t.on("click",function(e){t[0].checked&&r.$setViewValue(n.value,e&&e.type)}),r.$render=function(){t[0].checked=n.value==r.$viewValue},n.$observe("value",r.$render)},checkbox:function(e,t,n,r,i,o,a,s){var l=Bn(s,e,"ngTrueValue",n.ngTrueValue,!0),u=Bn(s,e,"ngFalseValue",n.ngFalseValue,!1);t.on("click",function(e){r.$setViewValue(t[0].checked,e&&e.type)}),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return!1===e},r.$formatters.push(function(e){return O(e,l)}),r.$parsers.push(function(e){return e?l:u})},hidden:f,button:f,submit:f,reset:f,file:f},Qi=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(Ji[Yn(a.type)]||Ji.text)(i,o,a,s[0],t,e,n,r)}}}}],Zi=/^(true|false|\d+)$/,eo=function(){return{restrict:"A",priority:100,compile:function(e,t){return Zi.test(t.ngValue)?function(e,t,n){n.$set("value",e.$eval(n.ngValue))}:function(e,t,n){e.$watch(n.ngValue,function(e){n.$set("value",e)})}}}},to=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,n,r){e.$$addBindingInfo(n,r.ngBind),n=n[0],t.$watch(r.ngBind,function(e){n.textContent=m(e)?"":e})}}}}],no=["$interpolate","$compile",function(e,t){return{compile:function(n){return t.$$addBindingClass(n),function(n,r,i){n=e(r.attr(i.$attr.ngBindTemplate)),t.$$addBindingInfo(r,n.expressions),r=r[0],i.$observe("ngBindTemplate",function(e){r.textContent=m(e)?"":e})}}}}],ro=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,i){var o=t(i.ngBindHtml),a=t(i.ngBindHtml,function(t){return e.valueOf(t)});return n.$$addBindingClass(r),function(t,r,i){n.$$addBindingInfo(r,i.ngBindHtml),t.$watch(a,function(){var n=o(t);r.html(e.getTrustedHtml(n)||"")})}}}}],io=h({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),oo=_n("",!0),ao=_n("Odd",0),so=_n("Even",1),lo=In({compile:function(e,t){t.$set("ngCloak",void 0),e.removeClass("ng-cloak")}}),uo=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],co={},po={blur:!0,focus:!0};r("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=Ye("ng-"+e);co[t]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[t],null,!0);return function(t,n){n.on(e,function(n){var i=function(){a(t,{$event:n})};po[e]&&r.$$phase?t.$evalAsync(i):t.$apply(i)})}}}}]});var fo=["$animate","$compile",function(e,t){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,l,u;n.$watch(i.ngIf,function(n){n?l||a(function(n,o){l=o,n[n.length++]=t.$$createComment("end ngIf",i.ngIf),s={clone:n},e.enter(n,r.parent(),r)}):(u&&(u.remove(),u=null),l&&(l.$destroy(),l=null),s&&(u=oe(s.clone),e.leave(u).then(function(){u=null}),s=null))})}}}],ho=["$templateRequest","$anchorScroll","$animate",function(e,t,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:ir.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,l,u,c){var p,f,d,h=0,g=function(){f&&(f.remove(),f=null),p&&(p.$destroy(),p=null),d&&(n.leave(d).then(function(){f=null}),f=d,d=null)};r.$watch(o,function(o){var l=function(){!v(s)||s&&!r.$eval(s)||t()},f=++h;o?(e(o,!0).then(function(e){if(!r.$$destroyed&&f===h){var t=r.$new();u.template=e,e=c(t,function(e){g(),n.enter(e,null,i).then(l)}),p=t,d=e,p.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||f!==h||(g(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(g(),u.template=null)})}}}}],go=["$compile",function(t){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){tr.call(r[0]).match(/SVG/)?(r.empty(),t(fe(o.template,e.document).childNodes)(n,function(e){r.append(e)},{futureParentElement:r})):(r.html(o.template),t(r.contents())(n))}}}],mo=In({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),vo=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,n,i){var o=t.attr(n.$attr.ngList)||", ",a="false"!==n.ngTrim,s=a?lr(o):o;i.$parsers.push(function(e){if(!m(e)){var t=[];return e&&r(e.split(s),function(e){e&&t.push(a?lr(e):e)}),t}}),i.$formatters.push(function(e){return ar(e)?e.join(o):void 0}),i.$isEmpty=function(e){return!e||!e.length}}}},yo="ng-valid",$o="ng-invalid",bo="ng-pristine",xo="ng-dirty",wo="ng-pending",Co=t("ngModel"),Eo=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(e,t,n,i,o,a,s,l,u,c){this.$modelValue=this.$viewValue=Number.NaN,this.$$rawModelValue=void 0,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=void 0,this.$name=c(n.name||"",!1)(e),this.$$parentForm=Pi;var p,d=o(n.ngModel),h=d.assign,g=d,y=h,$=null,b=this;this.$$setOptions=function(e){if((b.$options=e)&&e.getterSetter){var t=o(n.ngModel+"()"),r=o(n.ngModel+"($$$p)");g=function(e){var n=d(e);return C(n)&&(n=t(e)),n},y=function(e,t){C(d(e))?r(e,{$$$p:t}):h(e,t)}}else if(!d.assign)throw Co("nonassign",n.ngModel,V(i))},this.$render=f,this.$isEmpty=function(e){return m(e)||""===e||null===e||e!==e},this.$$updateEmptyClasses=function(e){b.$isEmpty(e)?(a.removeClass(i,"ng-not-empty"),a.addClass(i,"ng-empty")):(a.removeClass(i,"ng-empty"),a.addClass(i,"ng-not-empty"))};var w=0;Vn({ctrl:this,$element:i,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]},$animate:a}),this.$setPristine=function(){b.$dirty=!1,b.$pristine=!0,a.removeClass(i,xo),a.addClass(i,bo)},this.$setDirty=function(){b.$dirty=!0,b.$pristine=!1,a.removeClass(i,bo),a.addClass(i,xo),b.$$parentForm.$setDirty()},this.$setUntouched=function(){b.$touched=!1,b.$untouched=!0,a.setClass(i,"ng-untouched","ng-touched")},this.$setTouched=function(){b.$touched=!0,b.$untouched=!1,a.setClass(i,"ng-touched","ng-untouched")},this.$rollbackViewValue=function(){s.cancel($),b.$viewValue=b.$$lastCommittedViewValue,b.$render()},this.$validate=function(){if(!x(b.$modelValue)||!isNaN(b.$modelValue)){var e=b.$$rawModelValue,t=b.$valid,n=b.$modelValue,r=b.$options&&b.$options.allowInvalid;b.$$runValidators(e,b.$$lastCommittedViewValue,function(i){r||t===i||(b.$modelValue=i?e:void 0,b.$modelValue!==n&&b.$$writeModelToScope())})}},this.$$runValidators=function(e,t,n){function i(){var n=!0;return r(b.$validators,function(r,i){var o=r(e,t);n=n&&o,a(i,o)}),n?!0:(r(b.$asyncValidators,function(e,t){a(t,null)}),!1)}function o(){var n=[],i=!0;r(b.$asyncValidators,function(r,o){var s=r(e,t);if(!s||!C(s.then))throw Co("nopromise",s);a(o,void 0),n.push(s.then(function(){a(o,!0)},function(){i=!1,a(o,!1)}))}),n.length?u.all(n).then(function(){s(i)},f):s(!0)}function a(e,t){l===w&&b.$setValidity(e,t)}function s(e){l===w&&n(e)}w++;var l=w;(function(){var e=b.$$parserName||"parse";return m(p)?(a(e,null),!0):(p||(r(b.$validators,function(e,t){a(t,null)}),r(b.$asyncValidators,function(e,t){a(t,null)})),a(e,p),p)})()&&i()?o():s(!1)},this.$commitViewValue=function(){var e=b.$viewValue;s.cancel($),(b.$$lastCommittedViewValue!==e||""===e&&b.$$hasNativeValidators)&&(b.$$updateEmptyClasses(e),b.$$lastCommittedViewValue=e,b.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){var t=b.$$lastCommittedViewValue;if(p=m(t)?void 0:!0)for(var n=0;n<b.$parsers.length;n++)if(t=b.$parsers[n](t),m(t)){p=!1;break}x(b.$modelValue)&&isNaN(b.$modelValue)&&(b.$modelValue=g(e));var r=b.$modelValue,i=b.$options&&b.$options.allowInvalid;b.$$rawModelValue=t,i&&(b.$modelValue=t,b.$modelValue!==r&&b.$$writeModelToScope()),b.$$runValidators(t,b.$$lastCommittedViewValue,function(e){i||(b.$modelValue=e?t:void 0,b.$modelValue!==r&&b.$$writeModelToScope())})},this.$$writeModelToScope=function(){y(e,b.$modelValue),r(b.$viewChangeListeners,function(e){try{e()}catch(n){t(n)}})},this.$setViewValue=function(e,t){b.$viewValue=e,b.$options&&!b.$options.updateOnDefault||b.$$debounceViewValueCommit(t)},this.$$debounceViewValueCommit=function(t){var n=0,r=b.$options;r&&v(r.debounce)&&(r=r.debounce,x(r)?n=r:x(r[t])?n=r[t]:x(r["default"])&&(n=r["default"])),s.cancel($),n?$=s(function(){b.$commitViewValue()},n):l.$$phase?b.$commitViewValue():e.$apply(function(){b.$commitViewValue()})},e.$watch(function(){var t=g(e);if(t!==b.$modelValue&&(b.$modelValue===b.$modelValue||t===t)){b.$modelValue=b.$$rawModelValue=t,p=void 0;for(var n=b.$formatters,r=n.length,i=t;r--;)i=n[r](i);b.$viewValue!==i&&(b.$$updateEmptyClasses(i),b.$viewValue=b.$$lastCommittedViewValue=i,b.$render(),b.$$runValidators(t,i,f))}return t})}],So=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Eo,priority:1,compile:function(t){return t.addClass(bo).addClass("ng-untouched").addClass(yo),{pre:function(e,t,n,r){var i=r[0];t=r[1]||i.$$parentForm,i.$$setOptions(r[2]&&r[2].$options),t.$addControl(i),n.$observe("name",function(e){i.$name!==e&&i.$$parentForm.$$renameControl(i,e)}),e.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(t,n,r,i){var o=i[0];o.$options&&o.$options.updateOn&&n.on(o.$options.updateOn,function(e){o.$$debounceViewValueCommit(e&&e.type)}),n.on("blur",function(){o.$touched||(e.$$phase?t.$evalAsync(o.$setTouched):t.$apply(o.$setTouched))})}}}}}],To=/(\s+|^)default(\s+|$)/,Lo=function(){return{restrict:"A",controller:["$scope","$attrs",function(e,t){var n=this;this.$options=I(e.$eval(t.ngModelOptions)),v(this.$options.updateOn)?(this.$options.updateOnDefault=!1,this.$options.updateOn=lr(this.$options.updateOn.replace(To,function(){return n.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},Ao=In({terminal:!0,priority:1e3}),ko=t("ngOptions"),Mo=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,No=["$compile","$document","$parse",function(t,i,o){function a(e,t,r){function i(e,t,n,r,i){this.selectValue=e,this.viewValue=t,this.label=n,this.group=r,this.disabled=i}function a(e){var t;if(!u&&n(e))t=e;else{t=[];for(var r in e)e.hasOwnProperty(r)&&"$"!==r.charAt(0)&&t.push(r)}return t}var s=e.match(Mo);if(!s)throw ko("iexp",e,V(t));var l=s[5]||s[7],u=s[6];e=/ as /.test(s[0])&&s[1];var c=s[9];t=o(s[2]?s[1]:l);var p=e&&o(e)||t,f=c&&o(c),d=c?function(e,t){return f(r,t)}:function(e){return je(e)},h=function(e,t){return d(e,b(e,t))},g=o(s[2]||s[1]),m=o(s[3]||""),v=o(s[4]||""),y=o(s[8]),$={},b=u?function(e,t){return $[u]=t,$[l]=e,$}:function(e){return $[l]=e,$};return{trackBy:c,getTrackByValue:h,getWatchables:o(y,function(e){var t=[];e=e||[];for(var n=a(e),i=n.length,o=0;i>o;o++){var l=e===n?o:n[o],u=e[l],l=b(u,l),u=d(u,l);t.push(u),(s[2]||s[1])&&(u=g(r,l),t.push(u)),s[4]&&(l=v(r,l),t.push(l))}return t}),getOptions:function(){for(var e=[],t={},n=y(r)||[],o=a(n),s=o.length,l=0;s>l;l++){var u=n===o?l:o[l],f=b(n[u],u),$=p(r,f),u=d($,f),x=g(r,f),w=m(r,f),f=v(r,f),$=new i(u,$,x,w,f);e.push($),t[u]=$}return{items:e,selectValueMap:t,getOptionFromViewValue:function(e){return t[h(e)]},getViewValueFromOption:function(e){return c?ir.copy(e.viewValue):e.viewValue}}}}}var s=e.document.createElement("option"),l=e.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(e,t,n,r){r[0].registerOption=f},post:function(e,n,o,u){function c(e,t){e.element=t,t.disabled=e.disabled,e.label!==t.label&&(t.label=e.label,t.textContent=e.label),e.value!==t.value&&(t.value=e.selectValue)}function p(){var e=x&&d.readValue();if(x)for(var t=x.items.length-1;t>=0;t--){var r=x.items[t];Ae(r.group?r.element.parentNode:r.element)}x=w.getOptions();var i={};$&&n.prepend(f),x.items.forEach(function(e){var t;if(v(e.group)){t=i[e.group],t||(t=l.cloneNode(!1),C.appendChild(t),t.label=e.group,i[e.group]=t);var n=s.cloneNode(!1)}else t=C,n=s.cloneNode(!1);t.appendChild(n),c(e,n)}),n[0].appendChild(C),h.$render(),h.$isEmpty(e)||(t=d.readValue(),(w.trackBy||g?O(e,t):e===t)||(h.$setViewValue(t),h.$render()))}var f,d=u[0],h=u[1],g=o.multiple;u=0;for(var m=n.children(),y=m.length;y>u;u++)if(""===m[u].value){f=m.eq(u);break}var $=!!f,b=Wn(s.cloneNode(!1));b.val("?");var x,w=a(o.ngOptions,n,e),C=i[0].createDocumentFragment();g?(h.$isEmpty=function(e){return!e||0===e.length},d.writeValue=function(e){x.items.forEach(function(e){e.element.selected=!1}),e&&e.forEach(function(e){(e=x.getOptionFromViewValue(e))&&(e.element.selected=!0)})},d.readValue=function(){var e=n.val()||[],t=[];return r(e,function(e){(e=x.selectValueMap[e])&&!e.disabled&&t.push(x.getViewValueFromOption(e))}),t},w.trackBy&&e.$watchCollection(function(){return ar(h.$viewValue)?h.$viewValue.map(function(e){return w.getTrackByValue(e)}):void 0},function(){h.$render()})):(d.writeValue=function(e){var t=x.getOptionFromViewValue(e);t?(n[0].value!==t.selectValue&&(b.remove(),$||f.remove(),n[0].value=t.selectValue,t.element.selected=!0),t.element.setAttribute("selected","selected")):null===e||$?(b.remove(),$||n.prepend(f),n.val(""),f.prop("selected",!0),f.attr("selected",!0)):($||f.remove(),n.prepend(b),n.val("?"),b.prop("selected",!0),b.attr("selected",!0))},d.readValue=function(){var e=x.selectValueMap[n.val()];return e&&!e.disabled?($||f.remove(),b.remove(),x.getViewValueFromOption(e)):null},w.trackBy&&e.$watch(function(){return w.getTrackByValue(h.$viewValue)},function(){h.$render()})),$?(f.remove(),t(f)(e),f.removeClass("ng-scope")):f=Wn(s.cloneNode(!1)),n.empty(),p(),e.$watchCollection(w.getWatchables,p)}}}}],Do=["$locale","$interpolate","$log",function(e,t,n){var i=/{}/g,o=/^when(Minus)?(.+)$/;return{link:function(a,s,l){function u(e){s.text(e||"")}var c,p=l.count,d=l.$attr.when&&s.attr(l.$attr.when),h=l.offset||0,g=a.$eval(d)||{},v={},y=t.startSymbol(),$=t.endSymbol(),b=y+p+"-"+h+$,w=ir.noop;r(l,function(e,t){var n=o.exec(t);n&&(n=(n[1]?"-":"")+Yn(n[2]),g[n]=s.attr(l.$attr[t]))}),r(g,function(e,n){v[n]=t(e.replace(i,b))}),a.$watch(p,function(t){var r=parseFloat(t),i=isNaN(r);i||r in g||(r=e.pluralCat(r-h)),r===c||i&&x(c)&&isNaN(c)||(w(),i=v[r],m(i)?(null!=t&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+d),w=f,u()):w=a.$watch(i,u),c=r)})}}}],Io=["$parse","$animate","$compile",function(e,i,o){var a=t("ngRepeat"),s=function(e,t,n,r,i,o,a){e[n]=r,i&&(e[i]=o),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0===(1&t))};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(t,l){var u=l.ngRepeat,c=o.$$createComment("end ngRepeat",u),p=u.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!p)throw a("iexp",u);var f=p[1],d=p[2],h=p[3],g=p[4],p=f.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);if(!p)throw a("iidexp",f);var m=p[3]||p[1],v=p[2];if(h&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(h)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(h)))throw a("badident",h);var y,$,b,x,w={$id:je};return g?y=e(g):(b=function(e,t){return je(t)},x=function(e){return e}),function(e,t,o,l,p){y&&($=function(t,n,r){return v&&(w[v]=t),w[m]=n,w.$index=r,y(e,w)});var f=ae();e.$watchCollection(d,function(o){var l,d,g,y,w,C,E,S,T,L,A=t[0],k=ae();if(h&&(e[h]=o),n(o))S=o,d=$||b;else for(L in d=$||x,S=[],o)Xn.call(o,L)&&"$"!==L.charAt(0)&&S.push(L);for(y=S.length,L=Array(y),l=0;y>l;l++)if(w=o===S?l:S[l],C=o[w],E=d(w,C,l),f[E])T=f[E],delete f[E],k[E]=T,L[l]=T;else{if(k[E])throw r(L,function(e){e&&e.scope&&(f[e.id]=e)}),a("dupes",u,E,C);L[l]={id:E,scope:void 0,clone:void 0},k[E]=!0}for(g in f){if(T=f[g],E=oe(T.clone),i.leave(E),E[0].parentNode)for(l=0,d=E.length;d>l;l++)E[l].$$NG_REMOVED=!0;T.scope.$destroy()}for(l=0;y>l;l++)if(w=o===S?l:S[l],C=o[w],T=L[l],T.scope){g=A;do g=g.nextSibling;while(g&&g.$$NG_REMOVED);T.clone[0]!=g&&i.move(oe(T.clone),null,A),A=T.clone[T.clone.length-1],s(T.scope,l,m,C,v,w,y)}else p(function(e,t){T.scope=t;var n=c.cloneNode(!1);e[e.length++]=n,i.enter(e,null,A),A=n,T.clone=e,k[T.id]=T,s(T.scope,l,m,C,v,w,y)});f=k})}}}}],Oo=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],jo=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],Ro=In(function(e,t,n){e.$watch(n.ngStyle,function(e,n){n&&e!==n&&r(n,function(e,n){t.css(n,"")}),e&&t.css(e)},!0)}),Po=["$animate","$compile",function(e,t){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,i,o,a){var s=[],l=[],u=[],c=[],p=function(e,t){return function(){e.splice(t,1)}};n.$watch(o.ngSwitch||o.on,function(n){var i,o;for(i=0,o=u.length;o>i;++i)e.cancel(u[i]);for(i=u.length=0,o=c.length;o>i;++i){var f=oe(l[i].clone);c[i].$destroy(),(u[i]=e.leave(f)).then(p(u,i))}l.length=0,c.length=0,(s=a.cases["!"+n]||a.cases["?"])&&r(s,function(n){n.transclude(function(r,i){c.push(i);var o=n.element;r[r.length++]=t.$$createComment("end ngSwitchWhen"),l.push({clone:r}),e.enter(r,o.parent(),o)})})})}}}],Fo=In({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:t})}}),Ho=In({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:t})}}),Bo=t("ngTransclude"),_o=In({restrict:"EAC",link:function(e,t,n,r,i){if(n.ngTransclude===n.$attr.ngTransclude&&(n.ngTransclude=""),!i)throw Bo("orphan",V(t));i(function(e){e.length&&(t.empty(),t.append(e))},null,n.ngTransclude||n.ngTranscludeSlot)}}),Vo=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){"text/ng-template"==n.type&&e.put(n.id,t[0].text)}}}],Uo={$setViewValue:f,$render:f},qo=["$element","$scope",function(t,n){var r=this,i=new Re;r.ngModelCtrl=Uo,r.unknownOption=Wn(e.document.createElement("option")),r.renderUnknownOption=function(e){e="? "+je(e)+" ?",r.unknownOption.val(e),t.prepend(r.unknownOption),t.val(e)},n.$on("$destroy",function(){r.renderUnknownOption=f}),r.removeUnknownOption=function(){r.unknownOption.parent()&&r.unknownOption.remove()},r.readValue=function(){return r.removeUnknownOption(),t.val()},r.writeValue=function(e){r.hasOption(e)?(r.removeUnknownOption(),t.val(e),""===e&&r.emptyOption.prop("selected",!0)):null==e&&r.emptyOption?(r.removeUnknownOption(),t.val("")):r.renderUnknownOption(e)},r.addOption=function(e,t){if(8!==t[0].nodeType){re(e,'"option value"'),""===e&&(r.emptyOption=t);var n=i.get(e)||0;i.put(e,n+1),r.ngModelCtrl.$render(),t[0].hasAttribute("selected")&&(t[0].selected=!0)}},r.removeOption=function(e){var t=i.get(e);t&&(1===t?(i.remove(e),""===e&&(r.emptyOption=void 0)):i.put(e,t-1))},r.hasOption=function(e){return!!i.get(e)},r.registerOption=function(e,t,n,i,o){if(i){var a;n.$observe("value",function(e){v(a)&&r.removeOption(a),a=e,r.addOption(e,t)})}else o?e.$watch(o,function(e,i){n.$set("value",e),i!==e&&r.removeOption(i),r.addOption(e,t)}):r.addOption(n.value,t);t.on("$destroy",function(){r.removeOption(n.value),r.ngModelCtrl.$render()})}}],Wo=function(){return{restrict:"E",require:["select","?ngModel"],controller:qo,priority:1,link:{pre:function(e,t,n,i){var o=i[1];if(o){var a=i[0];if(a.ngModelCtrl=o,t.on("change",function(){e.$apply(function(){o.$setViewValue(a.readValue())})}),n.multiple){a.readValue=function(){var e=[];return r(t.find("option"),function(t){t.selected&&e.push(t.value)}),e},a.writeValue=function(e){var n=new Re(e);r(t.find("option"),function(e){e.selected=v(n.get(e.value))})};var s,l=NaN;e.$watch(function(){l!==o.$viewValue||O(s,o.$viewValue)||(s=le(o.$viewValue),o.$render()),l=o.$viewValue}),o.$isEmpty=function(e){return!e||0===e.length}}}},post:function(e,t,n,r){var i=r[1];if(i){var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}}}},Go=["$interpolate",function(e){return{restrict:"E",priority:100,compile:function(t,n){if(v(n.value))var r=e(n.value,!0);else{var i=e(t.text(),!0);i||n.$set("value",t.text())}return function(e,t,n){var o=t.parent();(o=o.data("$selectController")||o.parent().data("$selectController"))&&o.registerOption(e,t,n,r,i)}}}}],zo=h({restrict:"E",terminal:!1}),Ko=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){r&&(n.required=!0,r.$validators.required=function(e,t){return!n.required||!r.$isEmpty(t)},n.$observe("required",function(){r.$validate()}))}}},Xo=function(){return{restrict:"A",require:"?ngModel",link:function(e,n,r,i){if(i){var o,a=r.ngPattern||r.pattern;r.$observe("pattern",function(e){if(b(e)&&0<e.length&&(e=new RegExp("^"+e+"$")),e&&!e.test)throw t("ngPattern")("noregexp",a,e,V(n));o=e||void 0,i.$validate()}),i.$validators.pattern=function(e,t){return i.$isEmpty(t)||m(o)||o.test(t)}}}}},Yo=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=-1;n.$observe("maxlength",function(e){e=c(e),i=isNaN(e)?-1:e,r.$validate()}),r.$validators.maxlength=function(e,t){return 0>i||r.$isEmpty(t)||t.length<=i}}}}},Jo=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=0;n.$observe("minlength",function(e){i=c(e)||0,r.$validate()}),r.$validators.minlength=function(e,t){return r.$isEmpty(t)||t.length>=i}}}}};e.angular.bootstrap?e.console&&console.log("WARNING: Tried to load angular more than once."):(ee(),ue(ir),ir.module("ngLocale",[],["$provide",function(e){function t(e){e+="";var t=e.indexOf(".");return-1==t?0:e.length-t-1}e.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:"January February March April May June July August September October November December".split(" "),SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),STANDALONEMONTH:"January February March April May June July August September October November December".split(" "),WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(e,n){var r=0|e,i=n;return void 0===i&&(i=Math.min(t(e),3)),Math.pow(10,i),1==r&&0==i?"one":"other"}})}]),Wn(e.document).ready(function(){X(e.document,Y)}))}(window),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'),angular.module("chromeStorage",[]).factory("chromeStorage",function(e){var t=null;try{t=chrome.storage.local}catch(n){console.log("could not initiate chrome local storage: "+n)}var r=null,i={},o=function(n){var r=e.defer();return t.getBytesInUse(n,function(e){chrome.runtime.lasterror?(console.log("error retrieving bytes in use for keys "+n),r.reject(chrome.runtime.lasterror.message)):(console.log("retrieved bytes in use for keys "+n+": "+e),r.resolve(e))}),r.promise};return{getDebuggingTotalBytesInUse:function(){return r},getDebuggingCache:function(){return i},getDebuggingPercentUsed:function(){var e=r/t.QUOTA_BYTES;return e},getDebuggingSizeOf:function(e){return angular.toJson(i[e]).length},updateDebuggingCache:function(){var n=e.defer();t.get(null,function(e){chrome.runtime.lasterror?n.reject(chrome.runtime.lasterror.message):n.resolve(e)}),n.promise.then(function(e){i=e})},updateDebuggingTotalBytes:function(){o(null).then(function(e){console.log("total bytes in use: "+e),r=e})},clearCache:function(){t.clear(function(){chrome.runtime.lastError?console.error("error clearing local cache"+chrome.runtime.lastError):console.log("cache has been cleared")})},drop:function(e){t.remove(e,function(){chrome.runtime.lasterror&&console.error(chrome.runtime.lasterror.message)})},get:function(n){var r=e.defer();return t.get(n,function(e){var t=e[n];r.resolve(t)}),r.promise},getOrElse:function(n,r){var i=e.defer();return t.get(n,function(e){var o=e[n];void 0==o||null==o?r().then(function(e){o=e;var r={};r[n]=o,t.set(r,function(){
chrome.runtime.lasterror&&console.error(chrome.runtime.lasterror.message)}),i.resolve(o)}):i.resolve(o)}),i.promise},set:function(e,n){var r={};r[e]=n,t.set(r,function(){chrome.runtime.lasterror&&console.error(chrome.runtime.lasterror.message)})},forceGet:function(n,r){var i=e.defer();return r().then(function(e){keyValue=e;var r={};r[n]=keyValue,t.set(r,function(){chrome.runtime.lasterror&&console.error(chrome.runtime.lasterror.message)}),i.resolve(keyValue)}),i.promise},getQuota:function(){return t.QUOTA_BYTES}}}),function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=!!e&&"length"in e&&e.length,n=oe.type(e);return"function"===n||oe.isWindow(e)?!1:"array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e}function r(e,t,n){if(oe.isFunction(t))return oe.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return oe.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(ge.test(t))return oe.filter(t,e,n);t=oe.filter(t,e)}return oe.grep(e,function(e){return Z.call(t,e)>-1!==n})}function i(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t={};return oe.each(e.match(xe)||[],function(e,n){t[n]=!0}),t}function a(){X.removeEventListener("DOMContentLoaded",a),e.removeEventListener("load",a),oe.ready()}function s(){this.expando=oe.expando+s.uid++}function l(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Ae,"-$&").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:Le.test(n)?oe.parseJSON(n):n}catch(i){}Te.set(e,t,n)}else n=void 0;return n}function u(e,t,n,r){var i,o=1,a=20,s=r?function(){return r.cur()}:function(){return oe.css(e,t,"")},l=s(),u=n&&n[3]||(oe.cssNumber[t]?"":"px"),c=(oe.cssNumber[t]||"px"!==u&&+l)&&Me.exec(oe.css(e,t));if(c&&c[3]!==u){u=u||c[3],n=n||[],c=+l||1;do o=o||".5",c/=o,oe.style(e,t,c+u);while(o!==(o=s()/l)&&1!==o&&--a)}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}function c(e,t){var n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&oe.nodeName(e,t)?oe.merge([e],n):n}function p(e,t){for(var n=0,r=e.length;r>n;n++)Se.set(e[n],"globalEval",!t||Se.get(t[n],"globalEval"))}function f(e,t,n,r,i){for(var o,a,s,l,u,f,d=t.createDocumentFragment(),h=[],g=0,m=e.length;m>g;g++)if(o=e[g],o||0===o)if("object"===oe.type(o))oe.merge(h,o.nodeType?[o]:o);else if(Pe.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(Oe.exec(o)||["",""])[1].toLowerCase(),l=Re[s]||Re._default,a.innerHTML=l[1]+oe.htmlPrefilter(o)+l[2],f=l[0];f--;)a=a.lastChild;oe.merge(h,a.childNodes),a=d.firstChild,a.textContent=""}else h.push(t.createTextNode(o));for(d.textContent="",g=0;o=h[g++];)if(r&&oe.inArray(o,r)>-1)i&&i.push(o);else if(u=oe.contains(o.ownerDocument,o),a=c(d.appendChild(o),"script"),u&&p(a),n)for(f=0;o=a[f++];)je.test(o.type||"")&&n.push(o);return d}function d(){return!0}function h(){return!1}function g(){try{return X.activeElement}catch(e){}}function m(e,t,n,r,i,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(s in t)m(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),i===!1)i=h;else if(!i)return e;return 1===o&&(a=i,i=function(e){return oe().off(e),a.apply(this,arguments)},i.guid=a.guid||(a.guid=oe.guid++)),e.each(function(){oe.event.add(this,t,i,r,n)})}function v(e,t){return oe.nodeName(e,"table")&&oe.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function y(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function $(e){var t=qe.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function b(e,t){var n,r,i,o,a,s,l,u;if(1===t.nodeType){if(Se.hasData(e)&&(o=Se.access(e),a=Se.set(t,o),u=o.events)){delete a.handle,a.events={};for(i in u)for(n=0,r=u[i].length;r>n;n++)oe.event.add(t,i,u[i][n])}Te.hasData(e)&&(s=Te.access(e),l=oe.extend({},s),Te.set(t,l))}}function x(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ie.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function w(e,t,n,r){t=J.apply([],t);var i,o,a,s,l,u,p=0,d=e.length,h=d-1,g=t[0],m=oe.isFunction(g);if(m||d>1&&"string"==typeof g&&!re.checkClone&&Ue.test(g))return e.each(function(i){var o=e.eq(i);m&&(t[0]=g.call(this,i,o.html())),w(o,t,n,r)});if(d&&(i=f(t,e[0].ownerDocument,!1,e,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(a=oe.map(c(i,"script"),y),s=a.length;d>p;p++)l=i,p!==h&&(l=oe.clone(l,!0,!0),s&&oe.merge(a,c(l,"script"))),n.call(e[p],l,p);if(s)for(u=a[a.length-1].ownerDocument,oe.map(a,$),p=0;s>p;p++)l=a[p],je.test(l.type||"")&&!Se.access(l,"globalEval")&&oe.contains(u,l)&&(l.src?oe._evalUrl&&oe._evalUrl(l.src):oe.globalEval(l.textContent.replace(We,"")))}return e}function C(e,t,n){for(var r,i=t?oe.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||oe.cleanData(c(r)),r.parentNode&&(n&&oe.contains(r.ownerDocument,r)&&p(c(r,"script")),r.parentNode.removeChild(r));return e}function E(e,t){var n=oe(t.createElement(e)).appendTo(t.body),r=oe.css(n[0],"display");return n.detach(),r}function S(e){var t=X,n=ze[e];return n||(n=E(e,t),"none"!==n&&n||(Ge=(Ge||oe("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=Ge[0].contentDocument,t.write(),t.close(),n=E(e,t),Ge.detach()),ze[e]=n),n}function T(e,t,n){var r,i,o,a,s=e.style;return n=n||Ye(e),a=n?n.getPropertyValue(t)||n[t]:void 0,""!==a&&void 0!==a||oe.contains(e.ownerDocument,e)||(a=oe.style(e,t)),n&&!re.pixelMarginRight()&&Xe.test(a)&&Ke.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o),void 0!==a?a+"":a}function L(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function A(e){if(e in rt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=nt.length;n--;)if(e=nt[n]+t,e in rt)return e}function k(e,t,n){var r=Me.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function M(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,a=0;4>o;o+=2)"margin"===n&&(a+=oe.css(e,n+Ne[o],!0,i)),r?("content"===n&&(a-=oe.css(e,"padding"+Ne[o],!0,i)),"margin"!==n&&(a-=oe.css(e,"border"+Ne[o]+"Width",!0,i))):(a+=oe.css(e,"padding"+Ne[o],!0,i),"padding"!==n&&(a+=oe.css(e,"border"+Ne[o]+"Width",!0,i)));return a}function N(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=Ye(e),a="border-box"===oe.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=T(e,t,o),(0>i||null==i)&&(i=e.style[t]),Xe.test(i))return i;r=a&&(re.boxSizingReliable()||i===e.style[t]),i=parseFloat(i)||0}return i+M(e,t,n||(a?"border":"content"),r,o)+"px"}function D(e,t){for(var n,r,i,o=[],a=0,s=e.length;s>a;a++)r=e[a],r.style&&(o[a]=Se.get(r,"olddisplay"),n=r.style.display,t?(o[a]||"none"!==n||(r.style.display=""),""===r.style.display&&De(r)&&(o[a]=Se.access(r,"olddisplay",S(r.nodeName)))):(i=De(r),"none"===n&&i||Se.set(r,"olddisplay",i?n:oe.css(r,"display"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[a]||"":"none"));return e}function I(e,t,n,r,i){return new I.prototype.init(e,t,n,r,i)}function O(){return e.setTimeout(function(){it=void 0}),it=oe.now()}function j(e,t){var n,r=0,i={height:e};for(t=t?1:0;4>r;r+=2-t)n=Ne[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function R(e,t,n){for(var r,i=(H.tweeners[t]||[]).concat(H.tweeners["*"]),o=0,a=i.length;a>o;o++)if(r=i[o].call(n,t,e))return r}function P(e,t,n){var r,i,o,a,s,l,u,c,p=this,f={},d=e.style,h=e.nodeType&&De(e),g=Se.get(e,"fxshow");n.queue||(s=oe._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,l=s.empty.fire,s.empty.fire=function(){s.unqueued||l()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,oe.queue(e,"fx").length||s.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],u=oe.css(e,"display"),c="none"===u?Se.get(e,"olddisplay")||S(e.nodeName):u,"inline"===c&&"none"===oe.css(e,"float")&&(d.display="inline-block")),n.overflow&&(d.overflow="hidden",p.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],at.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;h=!0}f[r]=g&&g[r]||oe.style(e,r)}else u=void 0;if(oe.isEmptyObject(f))"inline"===("none"===u?S(e.nodeName):u)&&(d.display=u);else{g?"hidden"in g&&(h=g.hidden):g=Se.access(e,"fxshow",{}),o&&(g.hidden=!h),h?oe(e).show():p.done(function(){oe(e).hide()}),p.done(function(){var t;Se.remove(e,"fxshow");for(t in f)oe.style(e,t,f[t])});for(r in f)a=R(h?g[r]:0,r,p),r in g||(g[r]=a.start,h&&(a.end=a.start,a.start="width"===r||"height"===r?1:0))}}function F(e,t){var n,r,i,o,a;for(n in e)if(r=oe.camelCase(n),i=t[r],o=e[n],oe.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),a=oe.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function H(e,t,n){var r,i,o=0,a=H.prefilters.length,s=oe.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;for(var t=it||O(),n=Math.max(0,u.startTime+u.duration-t),r=n/u.duration||0,o=1-r,a=0,l=u.tweens.length;l>a;a++)u.tweens[a].run(o);return s.notifyWith(e,[u,o,n]),1>o&&l?n:(s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:oe.extend({},t),opts:oe.extend(!0,{specialEasing:{},easing:oe.easing._default},n),originalProperties:t,originalOptions:n,startTime:it||O(),duration:n.duration,tweens:[],createTween:function(t,n){var r=oe.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),c=u.props;for(F(c,u.opts.specialEasing);a>o;o++)if(r=H.prefilters[o].call(u,e,c,u.opts))return oe.isFunction(r.stop)&&(oe._queueHooks(u.elem,u.opts.queue).stop=oe.proxy(r.stop,r)),r;return oe.map(c,R,u),oe.isFunction(u.opts.start)&&u.opts.start.call(e,u),oe.fx.timer(oe.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function B(e){return e.getAttribute&&e.getAttribute("class")||""}function _(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(xe)||[];if(oe.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function V(e,t,n,r){function i(s){var l;return o[s]=!0,oe.each(e[s]||[],function(e,s){var u=s(t,n,r);return"string"!=typeof u||a||o[u]?a?!(l=u):void 0:(t.dataTypes.unshift(u),i(u),!1)}),l}var o={},a=e===Tt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function U(e,t){var n,r,i=oe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&oe.extend(!0,e,r),e}function q(e,t,n){for(var r,i,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}a||(a=i)}o=o||a}return o?(o!==l[0]&&l.unshift(o),n[o]):void 0}function W(e,t,n,r){var i,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(a=u[l+" "+o]||u["* "+o],!a)for(i in u)if(s=i.split(" "),s[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){a===!0?a=u[i]:u[i]!==!0&&(o=s[0],c.unshift(s[1]));break}if(a!==!0)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(p){return{state:"parsererror",error:a?p:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}function G(e,t,n,r){var i;if(oe.isArray(t))oe.each(t,function(t,i){n||Mt.test(e)?r(e,i):G(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==oe.type(t))r(e,t);else for(i in t)G(e+"["+i+"]",t[i],n,r)}function z(e){return oe.isWindow(e)?e:9===e.nodeType&&e.defaultView}var K=[],X=e.document,Y=K.slice,J=K.concat,Q=K.push,Z=K.indexOf,ee={},te=ee.toString,ne=ee.hasOwnProperty,re={},ie="2.2.4",oe=function(e,t){return new oe.fn.init(e,t)},ae=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,se=/^-ms-/,le=/-([\da-z])/gi,ue=function(e,t){return t.toUpperCase()};oe.fn=oe.prototype={jquery:ie,constructor:oe,selector:"",length:0,toArray:function(){return Y.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:Y.call(this)},pushStack:function(e){var t=oe.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return oe.each(this,e)},map:function(e){return this.pushStack(oe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(Y.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:Q,sort:K.sort,splice:K.splice},oe.extend=oe.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||oe.isFunction(a)||(a={}),s===l&&(a=this,s--);l>s;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],r=e[t],a!==r&&(u&&r&&(oe.isPlainObject(r)||(i=oe.isArray(r)))?(i?(i=!1,o=n&&oe.isArray(n)?n:[]):o=n&&oe.isPlainObject(n)?n:{},a[t]=oe.extend(u,o,r)):void 0!==r&&(a[t]=r));return a},oe.extend({expando:"jQuery"+(ie+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===oe.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=e&&e.toString();return!oe.isArray(e)&&t-parseFloat(t)+1>=0},isPlainObject:function(e){var t;if("object"!==oe.type(e)||e.nodeType||oe.isWindow(e))return!1;if(e.constructor&&!ne.call(e,"constructor")&&!ne.call(e.constructor.prototype||{},"isPrototypeOf"))return!1;for(t in e);return void 0===t||ne.call(e,t)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?ee[te.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;e=oe.trim(e),e&&(1===e.indexOf("use strict")?(t=X.createElement("script"),t.text=e,X.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(se,"ms-").replace(le,ue)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var r,i=0;if(n(e))for(r=e.length;r>i&&t.call(e[i],i,e[i])!==!1;i++);else for(i in e)if(t.call(e[i],i,e[i])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(ae,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?oe.merge(r,"string"==typeof e?[e]:e):Q.call(r,e)),r},inArray:function(e,t,n){return null==t?-1:Z.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;n>r;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;a>o;o++)r=!t(e[o],o),r!==s&&i.push(e[o]);return i},map:function(e,t,r){var i,o,a=0,s=[];if(n(e))for(i=e.length;i>a;a++)o=t(e[a],a,r),null!=o&&s.push(o);else for(a in e)o=t(e[a],a,r),null!=o&&s.push(o);return J.apply([],s)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(n=e[t],t=e,e=n),oe.isFunction(e)?(r=Y.call(arguments,2),i=function(){return e.apply(t||this,r.concat(Y.call(arguments)))},i.guid=e.guid=e.guid||oe.guid++,i):void 0},now:Date.now,support:re}),"function"==typeof Symbol&&(oe.fn[Symbol.iterator]=K[Symbol.iterator]),oe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ee["[object "+t+"]"]=t.toLowerCase()});var ce=function(e){function t(e,t,n,r){var i,o,a,s,l,u,p,d,h=t&&t.ownerDocument,g=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==g&&9!==g&&11!==g)return n;if(!r&&((t?t.ownerDocument||t:B)!==D&&N(t),t=t||D,O)){if(11!==g&&(u=ve.exec(e)))if(i=u[1]){if(9===g){if(!(a=t.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(h&&(a=h.getElementById(i))&&F(t,a)&&a.id===i)return n.push(a),n}else{if(u[2])return Q.apply(n,t.getElementsByTagName(e)),n;if((i=u[3])&&x.getElementsByClassName&&t.getElementsByClassName)return Q.apply(n,t.getElementsByClassName(i)),n}if(x.qsa&&!W[e+" "]&&(!j||!j.test(e))){if(1!==g)h=t,d=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace($e,"\\$&"):t.setAttribute("id",s=H),p=S(e),o=p.length,l=fe.test(s)?"#"+s:"[id='"+s+"']";o--;)p[o]=l+" "+f(p[o]);d=p.join(","),h=ye.test(e)&&c(t.parentNode)||t}if(d)try{return Q.apply(n,h.querySelectorAll(d)),n}catch(m){}finally{s===H&&t.removeAttribute("id")}}}return L(e.replace(se,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>w.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[H]=!0,e}function i(e){var t=D.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)w.attrHandle[n[r]]=t}function a(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||z)-(~e.sourceIndex||z);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function l(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function u(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function c(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function p(){}function f(e){for(var t=0,n=e.length,r="";n>t;t++)r+=e[t].value;return r}function d(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=V++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,a){var s,l,u,c=[_,o];if(a){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,a))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(u=t[H]||(t[H]={}),l=u[t.uniqueID]||(u[t.uniqueID]={}),(s=l[r])&&s[0]===_&&s[1]===o)return c[2]=s[2];if(l[r]=c,c[2]=e(t,n,a))return!0}}}function h(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function g(e,n,r){for(var i=0,o=n.length;o>i;i++)t(e,n[i],r);return r}function m(e,t,n,r,i){for(var o,a=[],s=0,l=e.length,u=null!=t;l>s;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),u&&t.push(s)));return a}function v(e,t,n,i,o,a){return i&&!i[H]&&(i=v(i)),o&&!o[H]&&(o=v(o,a)),r(function(r,a,s,l){var u,c,p,f=[],d=[],h=a.length,v=r||g(t||"*",s.nodeType?[s]:s,[]),y=!e||!r&&t?v:m(v,f,e,s,l),$=n?o||(r?e:h||i)?[]:a:y;if(n&&n(y,$,s,l),i)for(u=m($,d),i(u,[],s,l),c=u.length;c--;)(p=u[c])&&($[d[c]]=!(y[d[c]]=p));if(r){if(o||e){if(o){for(u=[],c=$.length;c--;)(p=$[c])&&u.push(y[c]=p);o(null,$=[],u,l)}for(c=$.length;c--;)(p=$[c])&&(u=o?ee(r,p):f[c])>-1&&(r[u]=!(a[u]=p))}}else $=m($===a?$.splice(h,$.length):$),o?o(null,a,$,l):Q.apply(a,$)})}function y(e){for(var t,n,r,i=e.length,o=w.relative[e[0].type],a=o||w.relative[" "],s=o?1:0,l=d(function(e){return e===t},a,!0),u=d(function(e){return ee(t,e)>-1},a,!0),c=[function(e,n,r){var i=!o&&(r||n!==A)||((t=n).nodeType?l(e,n,r):u(e,n,r));return t=null,i}];i>s;s++)if(n=w.relative[e[s].type])c=[d(h(c),n)];else{if(n=w.filter[e[s].type].apply(null,e[s].matches),n[H]){for(r=++s;i>r&&!w.relative[e[r].type];r++);return v(s>1&&h(c),s>1&&f(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(se,"$1"),n,r>s&&y(e.slice(s,r)),i>r&&y(e=e.slice(r)),i>r&&f(e))}c.push(n)}return h(c)}function $(e,n){var i=n.length>0,o=e.length>0,a=function(r,a,s,l,u){var c,p,f,d=0,h="0",g=r&&[],v=[],y=A,$=r||o&&w.find.TAG("*",u),b=_+=null==y?1:Math.random()||.1,x=$.length;for(u&&(A=a===D||a||u);h!==x&&null!=(c=$[h]);h++){if(o&&c){for(p=0,a||c.ownerDocument===D||(N(c),s=!O);f=e[p++];)if(f(c,a||D,s)){l.push(c);break}u&&(_=b)}i&&((c=!f&&c)&&d--,r&&g.push(c))}if(d+=h,i&&h!==d){for(p=0;f=n[p++];)f(g,v,a,s);if(r){if(d>0)for(;h--;)g[h]||v[h]||(v[h]=Y.call(l));v=m(v)}Q.apply(l,v),u&&!r&&v.length>0&&d+n.length>1&&t.uniqueSort(l)}return u&&(_=b,A=y),g};return i?r(a):a}var b,x,w,C,E,S,T,L,A,k,M,N,D,I,O,j,R,P,F,H="sizzle"+1*new Date,B=e.document,_=0,V=0,U=n(),q=n(),W=n(),G=function(e,t){return e===t&&(M=!0),0},z=1<<31,K={}.hasOwnProperty,X=[],Y=X.pop,J=X.push,Q=X.push,Z=X.slice,ee=function(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ie="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+re+"))|)"+ne+"*\\]",oe=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",ae=new RegExp(ne+"+","g"),se=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),le=new RegExp("^"+ne+"*,"+ne+"*"),ue=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),ce=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),pe=new RegExp(oe),fe=new RegExp("^"+re+"$"),de={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,ge=/^h\d$/i,me=/^[^{]+\{\s*\[native \w/,ve=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,$e=/'|\\/g,be=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),xe=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},we=function(){N()};try{Q.apply(X=Z.call(B.childNodes),B.childNodes),X[B.childNodes.length].nodeType}catch(Ce){Q={apply:X.length?function(e,t){J.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}x=t.support={},E=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},N=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:B;return r!==D&&9===r.nodeType&&r.documentElement?(D=r,I=D.documentElement,O=!E(D),(n=D.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",we,!1):n.attachEvent&&n.attachEvent("onunload",we)),x.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=i(function(e){return e.appendChild(D.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=me.test(D.getElementsByClassName),x.getById=i(function(e){return I.appendChild(e).id=H,!D.getElementsByName||!D.getElementsByName(H).length}),x.getById?(w.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&O){var n=t.getElementById(e);return n?[n]:[]}},w.filter.ID=function(e){var t=e.replace(be,xe);return function(e){return e.getAttribute("id")===t}}):(delete w.find.ID,w.filter.ID=function(e){var t=e.replace(be,xe);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),w.find.TAG=x.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},w.find.CLASS=x.getElementsByClassName&&function(e,t){return"undefined"!=typeof t.getElementsByClassName&&O?t.getElementsByClassName(e):void 0},R=[],j=[],(x.qsa=me.test(D.querySelectorAll))&&(i(function(e){I.appendChild(e).innerHTML="<a id='"+H+"'></a><select id='"+H+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&j.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||j.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+H+"-]").length||j.push("~="),e.querySelectorAll(":checked").length||j.push(":checked"),e.querySelectorAll("a#"+H+"+*").length||j.push(".#.+[+~]")}),i(function(e){var t=D.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&j.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||j.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),j.push(",.*:")})),(x.matchesSelector=me.test(P=I.matches||I.webkitMatchesSelector||I.mozMatchesSelector||I.oMatchesSelector||I.msMatchesSelector))&&i(function(e){x.disconnectedMatch=P.call(e,"div"),P.call(e,"[s!='']:x"),R.push("!=",oe)}),j=j.length&&new RegExp(j.join("|")),R=R.length&&new RegExp(R.join("|")),t=me.test(I.compareDocumentPosition),F=t||me.test(I.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},G=t?function(e,t){if(e===t)return M=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===D||e.ownerDocument===B&&F(B,e)?-1:t===D||t.ownerDocument===B&&F(B,t)?1:k?ee(k,e)-ee(k,t):0:4&n?-1:1)}:function(e,t){if(e===t)return M=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,s=[e],l=[t];if(!i||!o)return e===D?-1:t===D?1:i?-1:o?1:k?ee(k,e)-ee(k,t):0;if(i===o)return a(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;s[r]===l[r];)r++;return r?a(s[r],l[r]):s[r]===B?-1:l[r]===B?1:0},D):D},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==D&&N(e),n=n.replace(ce,"='$1']"),x.matchesSelector&&O&&!W[n+" "]&&(!R||!R.test(n))&&(!j||!j.test(n)))try{var r=P.call(e,n);if(r||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,D,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==D&&N(e),F(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==D&&N(e);var n=w.attrHandle[t.toLowerCase()],r=n&&K.call(w.attrHandle,t.toLowerCase())?n(e,t,!O):void 0;return void 0!==r?r:x.attributes||!O?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(M=!x.detectDuplicates,k=!x.sortStable&&e.slice(0),e.sort(G),M){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return k=null,e},C=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=C(t);return n},w=t.selectors={cacheLength:50,createPseudo:r,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(be,xe),e[3]=(e[3]||e[4]||e[5]||"").replace(be,xe),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&pe.test(n)&&(t=S(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(be,xe).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=U[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&U(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:n?(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(ae," ")+" ").indexOf(r)>-1:"|="===n?o===r||o.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,p,f,d,h,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!l&&!s,$=!1;if(m){if(o){for(;g;){for(f=t;f=f[g];)if(s?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&y){for(f=m,p=f[H]||(f[H]={}),c=p[f.uniqueID]||(p[f.uniqueID]={}),u=c[e]||[],d=u[0]===_&&u[1],$=d&&u[2],f=d&&m.childNodes[d];f=++d&&f&&f[g]||($=d=0)||h.pop();)if(1===f.nodeType&&++$&&f===t){c[e]=[_,d,$];break}}else if(y&&(f=t,p=f[H]||(f[H]={}),c=p[f.uniqueID]||(p[f.uniqueID]={}),u=c[e]||[],d=u[0]===_&&u[1],$=d),$===!1)for(;(f=++d&&f&&f[g]||($=d=0)||h.pop())&&((s?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++$||(y&&(p=f[H]||(f[H]={}),c=p[f.uniqueID]||(p[f.uniqueID]={}),c[e]=[_,$]),f!==t)););return $-=i,$===r||$%r===0&&$/r>=0}}},PSEUDO:function(e,n){var i,o=w.pseudos[e]||w.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[H]?o(n):o.length>1?(i=[e,e,"",n],w.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),a=i.length;a--;)r=ee(e,i[a]),e[r]=!(t[r]=i[a])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=T(e.replace(se,"$1"));return i[H]?r(function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(be,xe),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:r(function(e){return fe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(be,xe).toLowerCase(),function(t){var n;do if(n=O?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===I},focus:function(e){return e===D.activeElement&&(!D.hasFocus||D.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e);
},header:function(e){return ge.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,n){return[0>n?n+t:n]}),even:u(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:u(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:u(function(e,t,n){for(var r=0>n?n+t:n;--r>=0;)e.push(r);return e}),gt:u(function(e,t,n){for(var r=0>n?n+t:n;++r<t;)e.push(r);return e})}},w.pseudos.nth=w.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[b]=s(b);for(b in{submit:!0,reset:!0})w.pseudos[b]=l(b);return p.prototype=w.filters=w.pseudos,w.setFilters=new p,S=t.tokenize=function(e,n){var r,i,o,a,s,l,u,c=q[e+" "];if(c)return n?0:c.slice(0);for(s=e,l=[],u=w.preFilter;s;){r&&!(i=le.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(o=[])),r=!1,(i=ue.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(se," ")}),s=s.slice(r.length));for(a in w.filter)!(i=de[a].exec(s))||u[a]&&!(i=u[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?t.error(e):q(e,l).slice(0)},T=t.compile=function(e,t){var n,r=[],i=[],o=W[e+" "];if(!o){for(t||(t=S(e)),n=t.length;n--;)o=y(t[n]),o[H]?r.push(o):i.push(o);o=W(e,$(i,r)),o.selector=e}return o},L=t.select=function(e,t,n,r){var i,o,a,s,l,u="function"==typeof e&&e,p=!r&&S(e=u.selector||e);if(n=n||[],1===p.length){if(o=p[0]=p[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&x.getById&&9===t.nodeType&&O&&w.relative[o[1].type]){if(t=(w.find.ID(a.matches[0].replace(be,xe),t)||[])[0],!t)return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=de.needsContext.test(e)?0:o.length;i--&&(a=o[i],!w.relative[s=a.type]);)if((l=w.find[s])&&(r=l(a.matches[0].replace(be,xe),ye.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&f(o),!e)return Q.apply(n,r),n;break}}return(u||T(e,p))(r,t,!O,n,!t||ye.test(e)&&c(t.parentNode)||t),n},x.sortStable=H.split("").sort(G).join("")===H,x.detectDuplicates=!!M,N(),x.sortDetached=i(function(e){return 1&e.compareDocumentPosition(D.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;return n?void 0:e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);oe.find=ce,oe.expr=ce.selectors,oe.expr[":"]=oe.expr.pseudos,oe.uniqueSort=oe.unique=ce.uniqueSort,oe.text=ce.getText,oe.isXMLDoc=ce.isXML,oe.contains=ce.contains;var pe=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&oe(e).is(n))break;r.push(e)}return r},fe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},de=oe.expr.match.needsContext,he=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,ge=/^.[^:#\[\.,]*$/;oe.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?oe.find.matchesSelector(r,e)?[r]:[]:oe.find.matches(e,oe.grep(t,function(e){return 1===e.nodeType}))},oe.fn.extend({find:function(e){var t,n=this.length,r=[],i=this;if("string"!=typeof e)return this.pushStack(oe(e).filter(function(){for(t=0;n>t;t++)if(oe.contains(i[t],this))return!0}));for(t=0;n>t;t++)oe.find(e,i[t],r);return r=this.pushStack(n>1?oe.unique(r):r),r.selector=this.selector?this.selector+" "+e:e,r},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&de.test(e)?oe(e):e||[],!1).length}});var me,ve=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ye=oe.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||me,"string"==typeof e){if(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:ve.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof oe?t[0]:t,oe.merge(this,oe.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:X,!0)),he.test(r[1])&&oe.isPlainObject(t))for(r in t)oe.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=X.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=X,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):oe.isFunction(e)?void 0!==n.ready?n.ready(e):e(oe):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),oe.makeArray(e,this))};ye.prototype=oe.fn,me=oe(X);var $e=/^(?:parents|prev(?:Until|All))/,be={children:!0,contents:!0,next:!0,prev:!0};oe.fn.extend({has:function(e){var t=oe(e,this),n=t.length;return this.filter(function(){for(var e=0;n>e;e++)if(oe.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],a=de.test(e)||"string"!=typeof e?oe(e,t||this.context):0;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&oe.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?oe.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?Z.call(oe(e),this[0]):Z.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(oe.uniqueSort(oe.merge(this.get(),oe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),oe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return pe(e,"parentNode")},parentsUntil:function(e,t,n){return pe(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return pe(e,"nextSibling")},prevAll:function(e){return pe(e,"previousSibling")},nextUntil:function(e,t,n){return pe(e,"nextSibling",n)},prevUntil:function(e,t,n){return pe(e,"previousSibling",n)},siblings:function(e){return fe((e.parentNode||{}).firstChild,e)},children:function(e){return fe(e.firstChild)},contents:function(e){return e.contentDocument||oe.merge([],e.childNodes)}},function(e,t){oe.fn[e]=function(n,r){var i=oe.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=oe.filter(r,i)),this.length>1&&(be[e]||oe.uniqueSort(i),$e.test(e)&&i.reverse()),this.pushStack(i)}});var xe=/\S+/g;oe.Callbacks=function(e){e="string"==typeof e?o(e):oe.extend({},e);var t,n,r,i,a=[],s=[],l=-1,u=function(){for(i=e.once,r=t=!0;s.length;l=-1)for(n=s.shift();++l<a.length;)a[l].apply(n[0],n[1])===!1&&e.stopOnFalse&&(l=a.length,n=!1);e.memory||(n=!1),t=!1,i&&(a=n?[]:"")},c={add:function(){return a&&(n&&!t&&(l=a.length-1,s.push(n)),function r(t){oe.each(t,function(t,n){oe.isFunction(n)?e.unique&&c.has(n)||a.push(n):n&&n.length&&"string"!==oe.type(n)&&r(n)})}(arguments),n&&!t&&u()),this},remove:function(){return oe.each(arguments,function(e,t){for(var n;(n=oe.inArray(t,a,n))>-1;)a.splice(n,1),l>=n&&l--}),this},has:function(e){return e?oe.inArray(e,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return i=s=[],a=n="",this},disabled:function(){return!a},lock:function(){return i=s=[],n||(a=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},oe.extend({Deferred:function(e){var t=[["resolve","done",oe.Callbacks("once memory"),"resolved"],["reject","fail",oe.Callbacks("once memory"),"rejected"],["notify","progress",oe.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return oe.Deferred(function(n){oe.each(t,function(t,o){var a=oe.isFunction(e[t])&&e[t];i[o[1]](function(){var e=a&&a.apply(this,arguments);e&&oe.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===r?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?oe.extend(e,r):r}},i={};return r.pipe=r.then,oe.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=Y.call(arguments),a=o.length,s=1!==a||e&&oe.isFunction(e.promise)?a:0,l=1===s?e:oe.Deferred(),u=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?Y.call(arguments):i,r===t?l.notifyWith(n,r):--s||l.resolveWith(n,r)}};if(a>1)for(t=new Array(a),n=new Array(a),r=new Array(a);a>i;i++)o[i]&&oe.isFunction(o[i].promise)?o[i].promise().progress(u(i,n,t)).done(u(i,r,o)).fail(l.reject):--s;return s||l.resolveWith(r,o),l.promise()}});var we;oe.fn.ready=function(e){return oe.ready.promise().done(e),this},oe.extend({isReady:!1,readyWait:1,holdReady:function(e){e?oe.readyWait++:oe.ready(!0)},ready:function(e){(e===!0?--oe.readyWait:oe.isReady)||(oe.isReady=!0,e!==!0&&--oe.readyWait>0||(we.resolveWith(X,[oe]),oe.fn.triggerHandler&&(oe(X).triggerHandler("ready"),oe(X).off("ready"))))}}),oe.ready.promise=function(t){return we||(we=oe.Deferred(),"complete"===X.readyState||"loading"!==X.readyState&&!X.documentElement.doScroll?e.setTimeout(oe.ready):(X.addEventListener("DOMContentLoaded",a),e.addEventListener("load",a))),we.promise(t)},oe.ready.promise();var Ce=function(e,t,n,r,i,o,a){var s=0,l=e.length,u=null==n;if("object"===oe.type(n)){i=!0;for(s in n)Ce(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,oe.isFunction(r)||(a=!0),u&&(a?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(oe(e),n)})),t))for(;l>s;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:u?t.call(e):l?t(e[0],n):o},Ee=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};s.uid=1,s.prototype={register:function(e,t){var n=t||{};return e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,writable:!0,configurable:!0}),e[this.expando]},cache:function(e){if(!Ee(e))return{};var t=e[this.expando];return t||(t={},Ee(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[t]=n;else for(r in t)i[r]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][t]},access:function(e,t,n){var r;return void 0===t||t&&"string"==typeof t&&void 0===n?(r=this.get(e,t),void 0!==r?r:this.get(e,oe.camelCase(t))):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r,i,o=e[this.expando];if(void 0!==o){if(void 0===t)this.register(e);else{oe.isArray(t)?r=t.concat(t.map(oe.camelCase)):(i=oe.camelCase(t),t in o?r=[t,i]:(r=i,r=r in o?[r]:r.match(xe)||[])),n=r.length;for(;n--;)delete o[r[n]]}(void 0===t||oe.isEmptyObject(o))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!oe.isEmptyObject(t)}};var Se=new s,Te=new s,Le=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ae=/[A-Z]/g;oe.extend({hasData:function(e){return Te.hasData(e)||Se.hasData(e)},data:function(e,t,n){return Te.access(e,t,n)},removeData:function(e,t){Te.remove(e,t)},_data:function(e,t,n){return Se.access(e,t,n)},_removeData:function(e,t){Se.remove(e,t)}}),oe.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=Te.get(o),1===o.nodeType&&!Se.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=oe.camelCase(r.slice(5)),l(o,r,i[r])));Se.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Te.set(this,e)}):Ce(this,function(t){var n,r;if(o&&void 0===t){if(n=Te.get(o,e)||Te.get(o,e.replace(Ae,"-$&").toLowerCase()),void 0!==n)return n;if(r=oe.camelCase(e),n=Te.get(o,r),void 0!==n)return n;if(n=l(o,r,void 0),void 0!==n)return n}else r=oe.camelCase(e),this.each(function(){var n=Te.get(this,r);Te.set(this,r,t),e.indexOf("-")>-1&&void 0!==n&&Te.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Te.remove(this,e)})}}),oe.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=Se.get(e,t),n&&(!r||oe.isArray(n)?r=Se.access(e,t,oe.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=oe.queue(e,t),r=n.length,i=n.shift(),o=oe._queueHooks(e,t),a=function(){oe.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Se.get(e,n)||Se.access(e,n,{empty:oe.Callbacks("once memory").add(function(){Se.remove(e,[t+"queue",n])})})}}),oe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?oe.queue(this[0],e):void 0===t?this:this.each(function(){var n=oe.queue(this,e,t);oe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&oe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){oe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=oe.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)n=Se.get(o[a],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ke=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Me=new RegExp("^(?:([+-])=|)("+ke+")([a-z%]*)$","i"),Ne=["Top","Right","Bottom","Left"],De=function(e,t){return e=t||e,"none"===oe.css(e,"display")||!oe.contains(e.ownerDocument,e)},Ie=/^(?:checkbox|radio)$/i,Oe=/<([\w:-]+)/,je=/^$|\/(?:java|ecma)script/i,Re={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Re.optgroup=Re.option,Re.tbody=Re.tfoot=Re.colgroup=Re.caption=Re.thead,Re.th=Re.td;var Pe=/<|&#?\w+;/;!function(){var e=X.createDocumentFragment(),t=e.appendChild(X.createElement("div")),n=X.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),re.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",re.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Fe=/^key/,He=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Be=/^([^.]*)(?:\.(.+)|)/;oe.event={global:{},add:function(e,t,n,r,i){var o,a,s,l,u,c,p,f,d,h,g,m=Se.get(e);if(m)for(n.handler&&(o=n,n=o.handler,i=o.selector),n.guid||(n.guid=oe.guid++),(l=m.events)||(l=m.events={}),(a=m.handle)||(a=m.handle=function(t){return"undefined"!=typeof oe&&oe.event.triggered!==t.type?oe.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(xe)||[""],u=t.length;u--;)s=Be.exec(t[u])||[],d=g=s[1],h=(s[2]||"").split(".").sort(),d&&(p=oe.event.special[d]||{},d=(i?p.delegateType:p.bindType)||d,p=oe.event.special[d]||{},c=oe.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&oe.expr.match.needsContext.test(i),namespace:h.join(".")},o),(f=l[d])||(f=l[d]=[],f.delegateCount=0,p.setup&&p.setup.call(e,r,h,a)!==!1||e.addEventListener&&e.addEventListener(d,a)),p.add&&(p.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?f.splice(f.delegateCount++,0,c):f.push(c),oe.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,a,s,l,u,c,p,f,d,h,g,m=Se.hasData(e)&&Se.get(e);if(m&&(l=m.events)){for(t=(t||"").match(xe)||[""],u=t.length;u--;)if(s=Be.exec(t[u])||[],d=g=s[1],h=(s[2]||"").split(".").sort(),d){for(p=oe.event.special[d]||{},d=(r?p.delegateType:p.bindType)||d,f=l[d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=f.length;o--;)c=f[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,p.remove&&p.remove.call(e,c));a&&!f.length&&(p.teardown&&p.teardown.call(e,h,m.handle)!==!1||oe.removeEvent(e,d,m.handle),delete l[d])}else for(d in l)oe.event.remove(e,d+t[u],n,r,!0);oe.isEmptyObject(l)&&Se.remove(e,"handle events")}},dispatch:function(e){e=oe.event.fix(e);var t,n,r,i,o,a=[],s=Y.call(arguments),l=(Se.get(this,"events")||{})[e.type]||[],u=oe.event.special[e.type]||{};if(s[0]=e,e.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,e)!==!1){for(a=oe.event.handlers.call(this,e,l),t=0;(i=a[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(o.namespace)||(e.handleObj=o,e.data=o.data,r=((oe.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s),void 0!==r&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,a=[],s=t.delegateCount,l=e.target;if(s&&l.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==e.type)){for(r=[],n=0;s>n;n++)o=t[n],i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?oe(i,this).index(l)>-1:oe.find(i,this,null,[l]).length),r[i]&&r.push(o);r.length&&a.push({elem:l,handlers:r})}return s<t.length&&a.push({elem:this,handlers:t.slice(s)}),a},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||X,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},fix:function(e){if(e[oe.expando])return e;var t,n,r,i=e.type,o=e,a=this.fixHooks[i];for(a||(this.fixHooks[i]=a=He.test(i)?this.mouseHooks:Fe.test(i)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,e=new oe.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=X),3===e.target.nodeType&&(e.target=e.target.parentNode),a.filter?a.filter(e,o):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==g()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===g()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&oe.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(e){return oe.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},oe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},oe.Event=function(e,t){return this instanceof oe.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?d:h):this.type=e,t&&oe.extend(this,t),this.timeStamp=e&&e.timeStamp||oe.now(),void(this[oe.expando]=!0)):new oe.Event(e,t)},oe.Event.prototype={constructor:oe.Event,isDefaultPrevented:h,isPropagationStopped:h,isImmediatePropagationStopped:h,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=d,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=d,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=d,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},oe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){oe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||oe.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),oe.fn.extend({on:function(e,t,n,r){return m(this,e,t,n,r)},one:function(e,t,n,r){return m(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,oe(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return t!==!1&&"function"!=typeof t||(n=t,t=void 0),n===!1&&(n=h),this.each(function(){oe.event.remove(this,e,n,t)})}});var _e=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Ve=/<script|<style|<link/i,Ue=/checked\s*(?:[^=]|=\s*.checked.)/i,qe=/^true\/(.*)/,We=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;oe.extend({htmlPrefilter:function(e){return e.replace(_e,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),l=oe.contains(e.ownerDocument,e);if(!(re.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||oe.isXMLDoc(e)))for(a=c(s),o=c(e),r=0,i=o.length;i>r;r++)x(o[r],a[r]);if(t)if(n)for(o=o||c(e),a=a||c(s),r=0,i=o.length;i>r;r++)b(o[r],a[r]);else b(e,s);return a=c(s,"script"),a.length>0&&p(a,!l&&c(e,"script")),s},cleanData:function(e){for(var t,n,r,i=oe.event.special,o=0;void 0!==(n=e[o]);o++)if(Ee(n)){if(t=n[Se.expando]){if(t.events)for(r in t.events)i[r]?oe.event.remove(n,r):oe.removeEvent(n,r,t.handle);n[Se.expando]=void 0}n[Te.expando]&&(n[Te.expando]=void 0)}}}),oe.fn.extend({domManip:w,detach:function(e){return C(this,e,!0)},remove:function(e){return C(this,e)},text:function(e){return Ce(this,function(e){return void 0===e?oe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return w(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=v(this,e);t.appendChild(e)}})},prepend:function(){return w(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=v(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return w(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return w(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(oe.cleanData(c(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return oe.clone(this,e,t)})},html:function(e){return Ce(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ve.test(e)&&!Re[(Oe.exec(e)||["",""])[1].toLowerCase()]){e=oe.htmlPrefilter(e);try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(oe.cleanData(c(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return w(this,arguments,function(t){var n=this.parentNode;oe.inArray(this,e)<0&&(oe.cleanData(c(this)),n&&n.replaceChild(t,this))},e)}}),oe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){oe.fn[e]=function(e){for(var n,r=[],i=oe(e),o=i.length-1,a=0;o>=a;a++)n=a===o?this:this.clone(!0),oe(i[a])[t](n),Q.apply(r,n.get());return this.pushStack(r)}});var Ge,ze={HTML:"block",BODY:"block"},Ke=/^margin/,Xe=new RegExp("^("+ke+")(?!px)[a-z%]+$","i"),Ye=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Je=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i},Qe=X.documentElement;!function(){function t(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Qe.appendChild(a);var t=e.getComputedStyle(s);n="1%"!==t.top,o="2px"===t.marginLeft,r="4px"===t.width,s.style.marginRight="50%",i="4px"===t.marginRight,Qe.removeChild(a)}var n,r,i,o,a=X.createElement("div"),s=X.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",re.clearCloneStyle="content-box"===s.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(s),oe.extend(re,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return null==r&&t(),r},pixelMarginRight:function(){return null==r&&t(),i},reliableMarginLeft:function(){return null==r&&t(),o},reliableMarginRight:function(){var t,n=s.appendChild(X.createElement("div"));return n.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",s.style.width="1px",Qe.appendChild(a),t=!parseFloat(e.getComputedStyle(n).marginRight),Qe.removeChild(a),s.removeChild(n),t}}))}();var Ze=/^(none|table(?!-c[ea]).+)/,et={position:"absolute",visibility:"hidden",display:"block"},tt={letterSpacing:"0",fontWeight:"400"},nt=["Webkit","O","Moz","ms"],rt=X.createElement("div").style;oe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=T(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=oe.camelCase(t),l=e.style;return t=oe.cssProps[s]||(oe.cssProps[s]=A(s)||s),a=oe.cssHooks[t]||oe.cssHooks[s],void 0===n?a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t]:(o=typeof n,"string"===o&&(i=Me.exec(n))&&i[1]&&(n=u(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(oe.cssNumber[s]?"":"px")),re.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(l[t]=n)),void 0)}},css:function(e,t,n,r){var i,o,a,s=oe.camelCase(t);return t=oe.cssProps[s]||(oe.cssProps[s]=A(s)||s),a=oe.cssHooks[t]||oe.cssHooks[s],a&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=T(e,t,r)),"normal"===i&&t in tt&&(i=tt[t]),""===n||n?(o=parseFloat(i),n===!0||isFinite(o)?o||0:i):i}}),oe.each(["height","width"],function(e,t){oe.cssHooks[t]={get:function(e,n,r){return n?Ze.test(oe.css(e,"display"))&&0===e.offsetWidth?Je(e,et,function(){return N(e,t,r)}):N(e,t,r):void 0},set:function(e,n,r){var i,o=r&&Ye(e),a=r&&M(e,t,r,"border-box"===oe.css(e,"boxSizing",!1,o),o);return a&&(i=Me.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=oe.css(e,t)),k(e,n,a)}}}),oe.cssHooks.marginLeft=L(re.reliableMarginLeft,function(e,t){return t?(parseFloat(T(e,"marginLeft"))||e.getBoundingClientRect().left-Je(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px":void 0}),oe.cssHooks.marginRight=L(re.reliableMarginRight,function(e,t){return t?Je(e,{display:"inline-block"},T,[e,"marginRight"]):void 0}),oe.each({margin:"",padding:"",border:"Width"},function(e,t){oe.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];4>r;r++)i[e+Ne[r]+t]=o[r]||o[r-2]||o[0];return i}},Ke.test(e)||(oe.cssHooks[e+t].set=k)}),oe.fn.extend({css:function(e,t){return Ce(this,function(e,t,n){var r,i,o={},a=0;if(oe.isArray(t)){for(r=Ye(e),i=t.length;i>a;a++)o[t[a]]=oe.css(e,t[a],!1,r);return o}return void 0!==n?oe.style(e,t,n):oe.css(e,t)},e,t,arguments.length>1)},show:function(){return D(this,!0)},hide:function(){return D(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){De(this)?oe(this).show():oe(this).hide()})}}),oe.Tween=I,I.prototype={constructor:I,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||oe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(oe.cssNumber[n]?"":"px")},cur:function(){var e=I.propHooks[this.prop];return e&&e.get?e.get(this):I.propHooks._default.get(this)},run:function(e){var t,n=I.propHooks[this.prop];return this.options.duration?this.pos=t=oe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):I.propHooks._default.set(this),this}},I.prototype.init.prototype=I.prototype,I.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=oe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){oe.fx.step[e.prop]?oe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[oe.cssProps[e.prop]]&&!oe.cssHooks[e.prop]?e.elem[e.prop]=e.now:oe.style(e.elem,e.prop,e.now+e.unit)}}},I.propHooks.scrollTop=I.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},oe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},oe.fx=I.prototype.init,oe.fx.step={};var it,ot,at=/^(?:toggle|show|hide)$/,st=/queueHooks$/;oe.Animation=oe.extend(H,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return u(n.elem,e,Me.exec(t),n),n}]},tweener:function(e,t){oe.isFunction(e)?(t=e,e=["*"]):e=e.match(xe);for(var n,r=0,i=e.length;i>r;r++)n=e[r],H.tweeners[n]=H.tweeners[n]||[],H.tweeners[n].unshift(t)},prefilters:[P],prefilter:function(e,t){t?H.prefilters.unshift(e):H.prefilters.push(e)}}),oe.speed=function(e,t,n){var r=e&&"object"==typeof e?oe.extend({},e):{complete:n||!n&&t||oe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!oe.isFunction(t)&&t};return r.duration=oe.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in oe.fx.speeds?oe.fx.speeds[r.duration]:oe.fx.speeds._default,null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){oe.isFunction(r.old)&&r.old.call(this),r.queue&&oe.dequeue(this,r.queue)},r},oe.fn.extend({fadeTo:function(e,t,n,r){return this.filter(De).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=oe.isEmptyObject(e),o=oe.speed(t,n,r),a=function(){var t=H(this,oe.extend({},e),o);(i||Se.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=oe.timers,a=Se.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&st.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||oe.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=Se.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=oe.timers,a=r?r.length:0;for(n.finish=!0,oe.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;a>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);
delete n.finish})}}),oe.each(["toggle","show","hide"],function(e,t){var n=oe.fn[t];oe.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(j(t,!0),e,r,i)}}),oe.each({slideDown:j("show"),slideUp:j("hide"),slideToggle:j("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){oe.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),oe.timers=[],oe.fx.tick=function(){var e,t=0,n=oe.timers;for(it=oe.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||oe.fx.stop(),it=void 0},oe.fx.timer=function(e){oe.timers.push(e),e()?oe.fx.start():oe.timers.pop()},oe.fx.interval=13,oe.fx.start=function(){ot||(ot=e.setInterval(oe.fx.tick,oe.fx.interval))},oe.fx.stop=function(){e.clearInterval(ot),ot=null},oe.fx.speeds={slow:600,fast:200,_default:400},oe.fn.delay=function(t,n){return t=oe.fx?oe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=X.createElement("input"),t=X.createElement("select"),n=t.appendChild(X.createElement("option"));e.type="checkbox",re.checkOn=""!==e.value,re.optSelected=n.selected,t.disabled=!0,re.optDisabled=!n.disabled,e=X.createElement("input"),e.value="t",e.type="radio",re.radioValue="t"===e.value}();var lt,ut=oe.expr.attrHandle;oe.fn.extend({attr:function(e,t){return Ce(this,oe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){oe.removeAttr(this,e)})}}),oe.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?oe.prop(e,t,n):(1===o&&oe.isXMLDoc(e)||(t=t.toLowerCase(),i=oe.attrHooks[t]||(oe.expr.match.bool.test(t)?lt:void 0)),void 0!==n?null===n?void oe.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=oe.find.attr(e,t),null==r?void 0:r))},attrHooks:{type:{set:function(e,t){if(!re.radioValue&&"radio"===t&&oe.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(xe);if(o&&1===e.nodeType)for(;n=o[i++];)r=oe.propFix[n]||n,oe.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)}}),lt={set:function(e,t,n){return t===!1?oe.removeAttr(e,n):e.setAttribute(n,n),n}},oe.each(oe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ut[t]||oe.find.attr;ut[t]=function(e,t,r){var i,o;return r||(o=ut[t],ut[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,ut[t]=o),i}});var ct=/^(?:input|select|textarea|button)$/i,pt=/^(?:a|area)$/i;oe.fn.extend({prop:function(e,t){return Ce(this,oe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[oe.propFix[e]||e]})}}),oe.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&oe.isXMLDoc(e)||(t=oe.propFix[t]||t,i=oe.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=oe.find.attr(e,"tabindex");return t?parseInt(t,10):ct.test(e.nodeName)||pt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),re.optSelected||(oe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),oe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){oe.propFix[this.toLowerCase()]=this});var ft=/[\t\r\n\f]/g;oe.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,l=0;if(oe.isFunction(e))return this.each(function(t){oe(this).addClass(e.call(this,t,B(this)))});if("string"==typeof e&&e)for(t=e.match(xe)||[];n=this[l++];)if(i=B(n),r=1===n.nodeType&&(" "+i+" ").replace(ft," ")){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");s=oe.trim(r),i!==s&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,l=0;if(oe.isFunction(e))return this.each(function(t){oe(this).removeClass(e.call(this,t,B(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(xe)||[];n=this[l++];)if(i=B(n),r=1===n.nodeType&&(" "+i+" ").replace(ft," ")){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");s=oe.trim(r),i!==s&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):oe.isFunction(e)?this.each(function(n){oe(this).toggleClass(e.call(this,n,B(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=oe(this),o=e.match(xe)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||(t=B(this),t&&Se.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":Se.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+B(n)+" ").replace(ft," ").indexOf(t)>-1)return!0;return!1}});var dt=/\r/g,ht=/[\x20\t\r\n\f]+/g;oe.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=oe.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,oe(this).val()):e,null==i?i="":"number"==typeof i?i+="":oe.isArray(i)&&(i=oe.map(i,function(e){return null==e?"":e+""})),t=oe.valHooks[this.type]||oe.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=oe.valHooks[i.type]||oe.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(dt,""):null==n?"":n)}}}),oe.extend({valHooks:{option:{get:function(e){var t=oe.find.attr(e,"value");return null!=t?t:oe.trim(oe.text(e)).replace(ht," ")}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,a=o?null:[],s=o?i+1:r.length,l=0>i?s:o?i:0;s>l;l++)if(n=r[l],(n.selected||l===i)&&(re.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!oe.nodeName(n.parentNode,"optgroup"))){if(t=oe(n).val(),o)return t;a.push(t)}return a},set:function(e,t){for(var n,r,i=e.options,o=oe.makeArray(t),a=i.length;a--;)r=i[a],(r.selected=oe.inArray(oe.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),oe.each(["radio","checkbox"],function(){oe.valHooks[this]={set:function(e,t){return oe.isArray(t)?e.checked=oe.inArray(oe(e).val(),t)>-1:void 0}},re.checkOn||(oe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var gt=/^(?:focusinfocus|focusoutblur)$/;oe.extend(oe.event,{trigger:function(t,n,r,i){var o,a,s,l,u,c,p,f=[r||X],d=ne.call(t,"type")?t.type:t,h=ne.call(t,"namespace")?t.namespace.split("."):[];if(a=s=r=r||X,3!==r.nodeType&&8!==r.nodeType&&!gt.test(d+oe.event.triggered)&&(d.indexOf(".")>-1&&(h=d.split("."),d=h.shift(),h.sort()),u=d.indexOf(":")<0&&"on"+d,t=t[oe.expando]?t:new oe.Event(d,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:oe.makeArray(n,[t]),p=oe.event.special[d]||{},i||!p.trigger||p.trigger.apply(r,n)!==!1)){if(!i&&!p.noBubble&&!oe.isWindow(r)){for(l=p.delegateType||d,gt.test(l+d)||(a=a.parentNode);a;a=a.parentNode)f.push(a),s=a;s===(r.ownerDocument||X)&&f.push(s.defaultView||s.parentWindow||e)}for(o=0;(a=f[o++])&&!t.isPropagationStopped();)t.type=o>1?l:p.bindType||d,c=(Se.get(a,"events")||{})[t.type]&&Se.get(a,"handle"),c&&c.apply(a,n),c=u&&a[u],c&&c.apply&&Ee(a)&&(t.result=c.apply(a,n),t.result===!1&&t.preventDefault());return t.type=d,i||t.isDefaultPrevented()||p._default&&p._default.apply(f.pop(),n)!==!1||!Ee(r)||u&&oe.isFunction(r[d])&&!oe.isWindow(r)&&(s=r[u],s&&(r[u]=null),oe.event.triggered=d,r[d](),oe.event.triggered=void 0,s&&(r[u]=s)),t.result}},simulate:function(e,t,n){var r=oe.extend(new oe.Event,n,{type:e,isSimulated:!0});oe.event.trigger(r,null,t)}}),oe.fn.extend({trigger:function(e,t){return this.each(function(){oe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?oe.event.trigger(e,t,n,!0):void 0}}),oe.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){oe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),oe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),re.focusin="onfocusin"in e,re.focusin||oe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){oe.event.simulate(t,e.target,oe.event.fix(e))};oe.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=Se.access(r,t);i||r.addEventListener(e,n,!0),Se.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Se.access(r,t)-1;i?Se.access(r,t,i):(r.removeEventListener(e,n,!0),Se.remove(r,t))}}});var mt=e.location,vt=oe.now(),yt=/\?/;oe.parseJSON=function(e){return JSON.parse(e+"")},oe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(r){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||oe.error("Invalid XML: "+t),n};var $t=/#.*$/,bt=/([?&])_=[^&]*/,xt=/^(.*?):[ \t]*([^\r\n]*)$/gm,wt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ct=/^(?:GET|HEAD)$/,Et=/^\/\//,St={},Tt={},Lt="*/".concat("*"),At=X.createElement("a");At.href=mt.href,oe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:mt.href,type:"GET",isLocal:wt.test(mt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Lt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":oe.parseJSON,"text xml":oe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?U(U(e,oe.ajaxSettings),t):U(oe.ajaxSettings,e)},ajaxPrefilter:_(St),ajaxTransport:_(Tt),ajax:function(t,n){function r(t,n,r,s){var u,p,y,$,x,C=n;2!==b&&(b=2,l&&e.clearTimeout(l),i=void 0,a=s||"",w.readyState=t>0?4:0,u=t>=200&&300>t||304===t,r&&($=q(f,w,r)),$=W(f,$,w,u),u?(f.ifModified&&(x=w.getResponseHeader("Last-Modified"),x&&(oe.lastModified[o]=x),x=w.getResponseHeader("etag"),x&&(oe.etag[o]=x)),204===t||"HEAD"===f.type?C="nocontent":304===t?C="notmodified":(C=$.state,p=$.data,y=$.error,u=!y)):(y=C,!t&&C||(C="error",0>t&&(t=0))),w.status=t,w.statusText=(n||C)+"",u?g.resolveWith(d,[p,C,w]):g.rejectWith(d,[w,C,y]),w.statusCode(v),v=void 0,c&&h.trigger(u?"ajaxSuccess":"ajaxError",[w,f,u?p:y]),m.fireWith(d,[w,C]),c&&(h.trigger("ajaxComplete",[w,f]),--oe.active||oe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,a,s,l,u,c,p,f=oe.ajaxSetup({},n),d=f.context||f,h=f.context&&(d.nodeType||d.jquery)?oe(d):oe.event,g=oe.Deferred(),m=oe.Callbacks("once memory"),v=f.statusCode||{},y={},$={},b=0,x="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!s)for(s={};t=xt.exec(a);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?a:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=$[n]=$[n]||e,y[e]=t),this},overrideMimeType:function(e){return b||(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>b)for(t in e)v[t]=[v[t],e[t]];else w.always(e[w.status]);return this},abort:function(e){var t=e||x;return i&&i.abort(t),r(0,t),this}};if(g.promise(w).complete=m.add,w.success=w.done,w.error=w.fail,f.url=((t||f.url||mt.href)+"").replace($t,"").replace(Et,mt.protocol+"//"),f.type=n.method||n.type||f.method||f.type,f.dataTypes=oe.trim(f.dataType||"*").toLowerCase().match(xe)||[""],null==f.crossDomain){u=X.createElement("a");try{u.href=f.url,u.href=u.href,f.crossDomain=At.protocol+"//"+At.host!=u.protocol+"//"+u.host}catch(C){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=oe.param(f.data,f.traditional)),V(St,f,n,w),2===b)return w;c=oe.event&&f.global,c&&0===oe.active++&&oe.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Ct.test(f.type),o=f.url,f.hasContent||(f.data&&(o=f.url+=(yt.test(o)?"&":"?")+f.data,delete f.data),f.cache===!1&&(f.url=bt.test(o)?o.replace(bt,"$1_="+vt++):o+(yt.test(o)?"&":"?")+"_="+vt++)),f.ifModified&&(oe.lastModified[o]&&w.setRequestHeader("If-Modified-Since",oe.lastModified[o]),oe.etag[o]&&w.setRequestHeader("If-None-Match",oe.etag[o])),(f.data&&f.hasContent&&f.contentType!==!1||n.contentType)&&w.setRequestHeader("Content-Type",f.contentType),w.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Lt+"; q=0.01":""):f.accepts["*"]);for(p in f.headers)w.setRequestHeader(p,f.headers[p]);if(f.beforeSend&&(f.beforeSend.call(d,w,f)===!1||2===b))return w.abort();x="abort";for(p in{success:1,error:1,complete:1})w[p](f[p]);if(i=V(Tt,f,n,w)){if(w.readyState=1,c&&h.trigger("ajaxSend",[w,f]),2===b)return w;f.async&&f.timeout>0&&(l=e.setTimeout(function(){w.abort("timeout")},f.timeout));try{b=1,i.send(y,r)}catch(C){if(!(2>b))throw C;r(-1,C)}}else r(-1,"No Transport");return w},getJSON:function(e,t,n){return oe.get(e,t,n,"json")},getScript:function(e,t){return oe.get(e,void 0,t,"script")}}),oe.each(["get","post"],function(e,t){oe[t]=function(e,n,r,i){return oe.isFunction(n)&&(i=i||r,r=n,n=void 0),oe.ajax(oe.extend({url:e,type:t,dataType:i,data:n,success:r},oe.isPlainObject(e)&&e))}}),oe._evalUrl=function(e){return oe.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},oe.fn.extend({wrapAll:function(e){var t;return oe.isFunction(e)?this.each(function(t){oe(this).wrapAll(e.call(this,t))}):(this[0]&&(t=oe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return oe.isFunction(e)?this.each(function(t){oe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=oe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=oe.isFunction(e);return this.each(function(n){oe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){oe.nodeName(this,"body")||oe(this).replaceWith(this.childNodes)}).end()}}),oe.expr.filters.hidden=function(e){return!oe.expr.filters.visible(e)},oe.expr.filters.visible=function(e){return e.offsetWidth>0||e.offsetHeight>0||e.getClientRects().length>0};var kt=/%20/g,Mt=/\[\]$/,Nt=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,It=/^(?:input|select|textarea|keygen)/i;oe.param=function(e,t){var n,r=[],i=function(e,t){t=oe.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=oe.ajaxSettings&&oe.ajaxSettings.traditional),oe.isArray(e)||e.jquery&&!oe.isPlainObject(e))oe.each(e,function(){i(this.name,this.value)});else for(n in e)G(n,e[n],t,i);return r.join("&").replace(kt,"+")},oe.fn.extend({serialize:function(){return oe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=oe.prop(this,"elements");return e?oe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!oe(this).is(":disabled")&&It.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!Ie.test(e))}).map(function(e,t){var n=oe(this).val();return null==n?null:oe.isArray(n)?oe.map(n,function(e){return{name:t.name,value:e.replace(Nt,"\r\n")}}):{name:t.name,value:n.replace(Nt,"\r\n")}}).get()}}),oe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(t){}};var Ot={0:200,1223:204},jt=oe.ajaxSettings.xhr();re.cors=!!jt&&"withCredentials"in jt,re.ajax=jt=!!jt,oe.ajaxTransport(function(t){var n,r;return re.cors||jt&&!t.crossDomain?{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)s.setRequestHeader(a,i[a]);n=function(e){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Ot[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(l){if(n)throw l}},abort:function(){n&&n()}}:void 0}),oe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return oe.globalEval(e),e}}}),oe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),oe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=oe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),X.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Rt=[],Pt=/(=)\?(?=&|$)|\?\?/;oe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Rt.pop()||oe.expando+"_"+vt++;return this[e]=!0,e}}),oe.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=t.jsonp!==!1&&(Pt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Pt.test(t.data)&&"data");return s||"jsonp"===t.dataTypes[0]?(i=t.jsonpCallback=oe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Pt,"$1"+i):t.jsonp!==!1&&(t.url+=(yt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||oe.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},r.always(function(){void 0===o?oe(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Rt.push(i)),a&&oe.isFunction(o)&&o(a[0]),a=o=void 0}),"script"):void 0}),oe.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||X;var r=he.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=f([e],t,i),i&&i.length&&oe(i).remove(),oe.merge([],r.childNodes))};var Ft=oe.fn.load;oe.fn.load=function(e,t,n){if("string"!=typeof e&&Ft)return Ft.apply(this,arguments);var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=oe.trim(e.slice(s)),e=e.slice(0,s)),oe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&oe.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?oe("<div>").append(oe.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},oe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){oe.fn[t]=function(e){return this.on(t,e)}}),oe.expr.filters.animated=function(e){return oe.grep(oe.timers,function(t){return e===t.elem}).length},oe.offset={setOffset:function(e,t,n){var r,i,o,a,s,l,u,c=oe.css(e,"position"),p=oe(e),f={};"static"===c&&(e.style.position="relative"),s=p.offset(),o=oe.css(e,"top"),l=oe.css(e,"left"),u=("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1,u?(r=p.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(l)||0),oe.isFunction(t)&&(t=t.call(e,n,oe.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):p.css(f)}},oe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){oe.offset.setOffset(this,e,t)});var t,n,r=this[0],i={top:0,left:0},o=r&&r.ownerDocument;if(o)return t=o.documentElement,oe.contains(t,r)?(i=r.getBoundingClientRect(),n=z(o),{top:i.top+n.pageYOffset-t.clientTop,left:i.left+n.pageXOffset-t.clientLeft}):i},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===oe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),oe.nodeName(e[0],"html")||(r=e.offset()),r.top+=oe.css(e[0],"borderTopWidth",!0),r.left+=oe.css(e[0],"borderLeftWidth",!0)),{top:t.top-r.top-oe.css(n,"marginTop",!0),left:t.left-r.left-oe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===oe.css(e,"position");)e=e.offsetParent;return e||Qe})}}),oe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;oe.fn[e]=function(r){return Ce(this,function(e,r,i){var o=z(e);return void 0===i?o?o[t]:e[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i)},e,r,arguments.length)}}),oe.each(["top","left"],function(e,t){oe.cssHooks[t]=L(re.pixelPosition,function(e,n){return n?(n=T(e,t),Xe.test(n)?oe(e).position()[t]+"px":n):void 0})}),oe.each({Height:"height",Width:"width"},function(e,t){oe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){oe.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),a=n||(r===!0||i===!0?"margin":"border");return Ce(this,function(t,n,r){var i;return oe.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?oe.css(t,n,a):oe.style(t,n,r,a)},t,o?r:void 0,o,null)}})}),oe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},size:function(){return this.length}}),oe.fn.andSelf=oe.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return oe});var Ht=e.jQuery,Bt=e.$;return oe.noConflict=function(t){return e.$===oe&&(e.$=Bt),t&&e.jQuery===oe&&(e.jQuery=Ht),oe},t||(e.jQuery=e.$=oe),oe}),!function(){"use strict";function config($provide){function jsonPath(obj,expr,arg){var P={resultType:arg&&arg.resultType||"VALUE",result:[],normalize:function(e){var t=[];return e.replace(/[\['](\??\(.*?\))[\]']/g,function(e,n){return"[#"+(t.push(n)-1)+"]"}).replace(/'?\.'?|\['?/g,";").replace(/;;;|;;/g,";..;").replace(/;$|'?]|'$/g,"").replace(/#([0-9]+)/g,function(e,n){return t[n]})},asPath:function(e){for(var t=e.split(";"),n="$",r=1,i=t.length;i>r;r++)n+=/^[0-9*]+$/.test(t[r])?"["+t[r]+"]":"['"+t[r]+"']";return n},store:function(e,t){return e&&(P.result[P.result.length]="PATH"==P.resultType?P.asPath(e):t),!!e},trace:function(e,t,n){if(e){var r=e.split(";"),i=r.shift();if(r=r.join(";"),t&&t.hasOwnProperty(i))P.trace(r,t[i],n+";"+i);else if("*"===i)P.walk(i,r,t,n,function(e,t,n,r,i){P.trace(e+";"+n,r,i)});else if(".."===i)P.trace(r,t,n),P.walk(i,r,t,n,function(e,t,n,r,i){"object"==typeof r[e]&&P.trace("..;"+n,r[e],i+";"+e)});else if(/,/.test(i))for(var o=i.split(/'?,'?/),a=0,s=o.length;s>a;a++)P.trace(o[a]+";"+r,t,n);else/^\(.*?\)$/.test(i)?P.trace(P.eval(i,t,n.substr(n.lastIndexOf(";")+1))+";"+r,t,n):/^\?\(.*?\)$/.test(i)?P.walk(i,r,t,n,function(e,t,n,r,i){P.eval(t.replace(/^\?\((.*?)\)$/,"$1"),r[e],e)&&P.trace(e+";"+n,r,i)}):/^(-?[0-9]*):(-?[0-9]*):?([0-9]*)$/.test(i)&&P.slice(i,r,t,n)}else P.store(n,t)},walk:function(e,t,n,r,i){if(n instanceof Array)for(var o=0,a=n.length;a>o;o++)o in n&&i(o,e,t,n,r);else if("object"==typeof n)for(var s in n)n.hasOwnProperty(s)&&i(s,e,t,n,r)},slice:function(e,t,n,r){if(n instanceof Array){var i=n.length,o=0,a=i,s=1;e.replace(/^(-?[0-9]*):(-?[0-9]*):?(-?[0-9]*)$/g,function(e,t,n,r){o=parseInt(t||o),a=parseInt(n||a),s=parseInt(r||s)}),o=0>o?Math.max(0,o+i):Math.min(i,o),a=0>a?Math.max(0,a+i):Math.min(i,a);for(var l=o;a>l;l+=s)P.trace(l+";"+t,n,r)}},eval:function(x,_v){try{return $&&_v&&eval(x.replace(/@/g,"_v"))}catch(e){throw new SyntaxError("jsonPath: "+e.message+": "+x.replace(/@/g,"_v").replace(/\^/g,"_a"))}}},$=obj;return expr&&obj&&("VALUE"==P.resultType||"PATH"==P.resultType)?(P.trace(P.normalize(expr).replace(/^\$;/,""),obj,"$"),P.result.length?P.result:!1):void 0}$provide.constant("jsonPath",jsonPath)}angular.module("ngJSONPath",[]).constant("jsonPath",null).config(config),config.$inject=["$provide"]}(),Array.prototype.push||(Array.prototype.push=function(){for(var e=0,t=arguments.length;t>e;e++)this[this.length]=arguments[e];return this.length}),Array.prototype.shift||(Array.prototype.shift=function(){if(this.length>0){for(var e=this[0],t=0,n=this.length-1;n>t;t++)this[t]=this[t+1];return this.length=this.length-1,e}}),Array.prototype.splice||(Array.prototype.splice=function(e,t){var n=this.slice(e+t),r=this.slice(e,e+t);this.length=e;for(var i=[],o=0,a=arguments.length;a>o;o++)i[o]=arguments[o];var s=i.length>2?n=i.slice(2).concat(n):n;for(o=0,a=s.length;a>o;o++)this.push(s[o]);return r});var log4javascript=function(){function isUndefined(e){return"undefined"==typeof e}function EventSupport(){}function Log4JavaScript(){}function toStr(e){return e&&e.toString?e.toString():String(e)}function getExceptionMessage(e){return e.message?e.message:e.description?e.description:toStr(e)}function getUrlFileName(e){var t=Math.max(e.lastIndexOf("/"),e.lastIndexOf("\\"));return e.substr(t+1)}function getExceptionStringRep(e){if(e){var t="Exception: "+getExceptionMessage(e);try{e.lineNumber&&(t+=" on line number "+e.lineNumber),e.fileName&&(t+=" in file "+getUrlFileName(e.fileName))}catch(n){logLog.warn("Unable to obtain file and line information for error")}return showStackTraces&&e.stack&&(t+=newLine+"Stack trace:"+newLine+e.stack),t}return null}function bool(e){return Boolean(e)}function trim(e){return e.replace(/^\s+/,"").replace(/\s+$/,"")}function splitIntoLines(e){var t=e.replace(/\r\n/g,"\n").replace(/\r/g,"\n");return t.split("\n")}function array_remove(e,t){for(var n=-1,r=0,i=e.length;i>r;r++)if(e[r]===t){n=r;break}return n>=0?(e.splice(n,1),!0):!1}function array_contains(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]==t)return!0;return!1}function extractBooleanFromParam(e,t){return isUndefined(e)?t:bool(e)}function extractStringFromParam(e,t){return isUndefined(e)?t:String(e)}function extractIntFromParam(e,t){if(isUndefined(e))return t;try{var n=parseInt(e,10);return isNaN(n)?t:n}catch(r){return logLog.warn("Invalid int param "+e,r),t}}function extractFunctionFromParam(e,t){return"function"==typeof e?e:t}function isError(e){return e instanceof Error}function getListenersPropertyName(e){return"__log4javascript_listeners__"+e}function addEvent(e,t,n,r,i){if(i=i?i:window,e.addEventListener)e.addEventListener(t,n,r);else if(e.attachEvent)e.attachEvent("on"+t,n);else{var o=getListenersPropertyName(t);e[o]||(e[o]=[],e["on"+t]=function(e){e=getEvent(e,i);for(var n,r=getListenersPropertyName(t),o=this[r].concat([]);n=o.shift();)n.call(this,e)}),e[o].push(n)}}function removeEvent(e,t,n,r){if(e.removeEventListener)e.removeEventListener(t,n,r);else if(e.detachEvent)e.detachEvent("on"+t,n);else{var i=getListenersPropertyName(t);e[i]&&array_remove(e[i],n)}}function getEvent(e,t){return t=t?t:window,e?e:t.event}function stopEventPropagation(e){e.stopPropagation?e.stopPropagation():"undefined"!=typeof e.cancelBubble&&(e.cancelBubble=!0),e.returnValue=!1}function handleError(e,t){logLog.error(e,t),log4javascript.dispatchEvent("error",{message:e,exception:t})}function Timer(e,t){this.name=e,this.level=isUndefined(t)?Level.INFO:t,this.start=new Date}function Logger(e){this.name=e,this.parent=null,this.children=[];var t=[],n=null,r=this.name===rootLoggerName,i=this.name===nullLoggerName,o=null,a=!1;this.addChild=function(e){this.children.push(e),e.parent=this,e.invalidateAppenderCache()};var s=!0;this.getAdditivity=function(){return s},this.setAdditivity=function(e){var t=s!=e;s=e,t&&this.invalidateAppenderCache()},this.addAppender=function(e){i?handleError("Logger.addAppender: you may not add an appender to the null logger"):e instanceof log4javascript.Appender?array_contains(t,e)||(t.push(e),e.setAddedToLogger(this),this.invalidateAppenderCache()):handleError("Logger.addAppender: appender supplied ('"+toStr(e)+"') is not a subclass of Appender")},this.removeAppender=function(e){array_remove(t,e),e.setRemovedFromLogger(this),this.invalidateAppenderCache()},this.removeAllAppenders=function(){var e=t.length;if(e>0){for(var n=0;e>n;n++)t[n].setRemovedFromLogger(this);t.length=0,this.invalidateAppenderCache()}},this.getEffectiveAppenders=function(){if(null===o||a){var e=r||!this.getAdditivity()?[]:this.parent.getEffectiveAppenders();o=e.concat(t),a=!1}return o},this.invalidateAppenderCache=function(){a=!0;for(var e=0,t=this.children.length;t>e;e++)this.children[e].invalidateAppenderCache()},this.log=function(e,t){if(enabled&&e.isGreaterOrEqual(this.getEffectiveLevel())){var n,r=t.length-1,i=t[r];t.length>1&&isError(i)&&(n=i,r--);for(var o=[],a=0;r>=a;a++)o[a]=t[a];var s=new LoggingEvent(this,new Date,e,o,n);this.callAppenders(s)}},this.callAppenders=function(e){for(var t=this.getEffectiveAppenders(),n=0,r=t.length;r>n;n++)t[n].doAppend(e)},this.setLevel=function(e){r&&null===e?handleError("Logger.setLevel: you cannot set the level of the root logger to null"):e instanceof Level?n=e:handleError("Logger.setLevel: level supplied to logger "+this.name+" is not an instance of log4javascript.Level")},this.getLevel=function(){return n},this.getEffectiveLevel=function(){for(var e=this;null!==e;e=e.parent){var t=e.getLevel();if(null!==t)return t}},this.group=function(e,t){if(enabled)for(var n=this.getEffectiveAppenders(),r=0,i=n.length;i>r;r++)n[r].group(e,t)},this.groupEnd=function(){if(enabled)for(var e=this.getEffectiveAppenders(),t=0,n=e.length;n>t;t++)e[t].groupEnd()};var l={};this.time=function(e,t){enabled&&(isUndefined(e)?handleError("Logger.time: a name for the timer must be supplied"):!t||t instanceof Level?l[e]=new Timer(e,t):handleError("Logger.time: level supplied to timer "+e+" is not an instance of log4javascript.Level"))},this.timeEnd=function(e){if(enabled)if(isUndefined(e))handleError("Logger.timeEnd: a name for the timer must be supplied");else if(l[e]){var t=l[e],n=t.getElapsedTime();this.log(t.level,["Timer "+toStr(e)+" completed in "+n+"ms"]),delete l[e]}else logLog.warn("Logger.timeEnd: no timer found with name "+e)},this.assert=function(e){if(enabled&&!e){for(var t=[],n=1,r=arguments.length;r>n;n++)t.push(arguments[n]);t=t.length>0?t:["Assertion Failure"],t.push(newLine),t.push(e),this.log(Level.ERROR,t)}},this.toString=function(){return"Logger["+this.name+"]"}}function SimpleLayout(){this.customFields=[]}function NullLayout(){this.customFields=[]}function XmlLayout(e){this.combineMessages=extractBooleanFromParam(e,!0),this.customFields=[]}function escapeNewLines(e){return e.replace(/\r\n|\r|\n/g,"\\r\\n")}function JsonLayout(e,t){this.readable=extractBooleanFromParam(e,!1),this.combineMessages=extractBooleanFromParam(t,!0),this.batchHeader=this.readable?"["+newLine:"[",this.batchFooter=this.readable?"]"+newLine:"]",this.batchSeparator=this.readable?","+newLine:",",this.setKeys(),this.colon=this.readable?": ":":",this.tab=this.readable?"	":"",this.lineBreak=this.readable?newLine:"",this.customFields=[]}function HttpPostDataLayout(){this.setKeys(),this.customFields=[],this.returnsPostData=!0}function formatObjectExpansion(e,t,n){function r(e,t,n){function o(e){for(var t=splitIntoLines(e),r=1,i=t.length;i>r;r++)t[r]=n+t[r];
return t.join(newLine)}var a,s,l,u,c,p,f;if(n||(n=""),null===e)return"null";if("undefined"==typeof e)return"undefined";if("string"==typeof e)return o(e);if("object"==typeof e&&array_contains(i,e)){try{p=toStr(e)}catch(d){p="Error formatting property. Details: "+getExceptionStringRep(d)}return p+" [already expanded]"}if(e instanceof Array&&t>0){for(i.push(e),p="["+newLine,l=t-1,u=n+"  ",c=[],a=0,s=e.length;s>a;a++)try{f=r(e[a],l,u),c.push(u+f)}catch(d){c.push(u+"Error formatting array member. Details: "+getExceptionStringRep(d))}return p+=c.join(","+newLine)+newLine+n+"]"}if("[object Date]"==Object.prototype.toString.call(e))return e.toString();if("object"==typeof e&&t>0){i.push(e),p="{"+newLine,l=t-1,u=n+"  ",c=[];for(a in e)try{f=r(e[a],l,u),c.push(u+a+": "+f)}catch(d){c.push(u+a+": Error formatting property. Details: "+getExceptionStringRep(d))}return p+=c.join(","+newLine)+newLine+n+"}"}return o(toStr(e))}var i=[];return r(e,t,n)}function PatternLayout(e){e?this.pattern=e:this.pattern=PatternLayout.DEFAULT_CONVERSION_PATTERN,this.customFields=[]}function AlertAppender(){}function BrowserConsoleAppender(){}function isHttpRequestSuccessful(e){return isUndefined(e.status)||0===e.status||e.status>=200&&e.status<300||1223==e.status}function AjaxAppender(e,t){function n(e){return T?(handleError("AjaxAppender: configuration option '"+e+"' may not be set after the appender has been initialized"),!1):!0}function r(){if(p&&enabled){S=!0;var e;if(d)C.length>0?(e=C.shift(),l(o(e),r)):(S=!1,f&&a());else{for(;e=C.shift();)l(o(e));S=!1,f&&a()}}}function i(){var e=!1;if(p&&enabled){for(var t,n=c.getLayout().allowBatching()?h:1,i=[];t=w.shift();)i.push(t),w.length>=n&&(C.push(i),i=[]);i.length>0&&C.push(i),e=C.length>0,d=!1,f=!1,r()}return e}function o(e){for(var t,n=[],r="";t=e.shift();)n.push(c.getLayout().formatWithException(t));return r=1==e.length?n.join(""):c.getLayout().batchHeader+n.join(c.getLayout().batchSeparator)+c.getLayout().batchFooter,b==c.defaults.contentType&&(r=c.getLayout().returnsPostData?r:urlEncode(y)+"="+urlEncode(r),r.length>0&&(r+="&"),r+="layout="+urlEncode(c.getLayout().toString())),r}function a(){window.setTimeout(r,g)}function s(){var e="AjaxAppender: could not create XMLHttpRequest object. AjaxAppender disabled";handleError(e),p=!1,v&&v(e)}function l(n,r){try{var i=getXmlHttp(s);if(p){t&&withCredentialsSupported&&(i.withCredentials=!0),i.onreadystatechange=function(){if(4==i.readyState){if(isHttpRequestSuccessful(i))m&&m(i),r&&r(i);else{var t="AjaxAppender.append: XMLHttpRequest request to URL "+e+" returned status code "+i.status;handleError(t),v&&v(t)}i.onreadystatechange=emptyFunction,i=null}},i.open("POST",e,!0);try{for(var o,a=0;o=E[a++];)i.setRequestHeader(o.name,o.value);i.setRequestHeader("Content-Type",b)}catch(l){var u="AjaxAppender.append: your browser's XMLHttpRequest implementation does not support setRequestHeader, therefore cannot post data. AjaxAppender disabled";return handleError(u),p=!1,void(v&&v(u))}i.send(n)}}catch(c){var f="AjaxAppender.append: error sending log message to "+e;handleError(f,c),p=!1,v&&v(f+". Details: "+getExceptionStringRep(c))}}function u(){if(T=!0,$){var e=window.onbeforeunload;window.onbeforeunload=function(){return e&&e(),i()?"Sending log messages":void 0}}f&&a()}var c=this,p=!0;e||(handleError("AjaxAppender: URL must be specified in constructor"),p=!1);var f=this.defaults.timed,d=this.defaults.waitForResponse,h=this.defaults.batchSize,g=this.defaults.timerInterval,m=this.defaults.requestSuccessCallback,v=this.defaults.failCallback,y=this.defaults.postVarName,$=this.defaults.sendAllOnUnload,b=this.defaults.contentType,x=null,w=[],C=[],E=[],S=!1,T=!1;this.getSessionId=function(){return x},this.setSessionId=function(e){x=extractStringFromParam(e,null),this.layout.setCustomField("sessionid",x)},this.setLayout=function(e){n("layout")&&(this.layout=e,null!==x&&this.setSessionId(x))},this.isTimed=function(){return f},this.setTimed=function(e){n("timed")&&(f=bool(e))},this.getTimerInterval=function(){return g},this.setTimerInterval=function(e){n("timerInterval")&&(g=extractIntFromParam(e,g))},this.isWaitForResponse=function(){return d},this.setWaitForResponse=function(e){n("waitForResponse")&&(d=bool(e))},this.getBatchSize=function(){return h},this.setBatchSize=function(e){n("batchSize")&&(h=extractIntFromParam(e,h))},this.isSendAllOnUnload=function(){return $},this.setSendAllOnUnload=function(e){n("sendAllOnUnload")&&($=extractBooleanFromParam(e,$))},this.setRequestSuccessCallback=function(e){m=extractFunctionFromParam(e,m)},this.setFailCallback=function(e){v=extractFunctionFromParam(e,v)},this.getPostVarName=function(){return y},this.setPostVarName=function(e){n("postVarName")&&(y=extractStringFromParam(e,y))},this.getHeaders=function(){return E},this.addHeader=function(e,t){"content-type"==e.toLowerCase()?b=t:E.push({name:e,value:t})},this.sendAll=r,this.sendAllRemaining=i,this.append=function(e){if(p){T||u(),w.push(e);var t=this.getLayout().allowBatching()?h:1;if(w.length>=t){for(var n,i=[];n=w.shift();)i.push(n);C.push(i),f||d&&(!d||S)||r()}}}}function setCookie(e,t,n,r){var i;if(r=r?"; path="+r:"",n){var o=new Date;o.setTime(o.getTime()+24*n*60*60*1e3),i="; expires="+o.toGMTString()}else i="";document.cookie=escape(e)+"="+escape(t)+i+r}function getCookie(e){for(var t=escape(e)+"=",n=document.cookie.split(";"),r=0,i=n.length;i>r;r++){for(var o=n[r];" "===o.charAt(0);)o=o.substring(1,o.length);if(0===o.indexOf(t))return unescape(o.substring(t.length,o.length))}return null}function getBaseUrl(){for(var e=document.getElementsByTagName("script"),t=0,n=e.length;n>t;++t)if(-1!=e[t].src.indexOf("log4javascript")){var r=e[t].src.lastIndexOf("/");return-1==r?"":e[t].src.substr(0,r+1)}return null}function isLoaded(e){try{return bool(e.loaded)}catch(t){return!1}}function padWithSpaces(e,t){if(e.length<t){for(var n=[],r=Math.max(0,t-e.length),i=0;r>i;i++)n[i]=" ";e+=n.join("")}return e}EventSupport.prototype={eventTypes:[],eventListeners:{},setEventTypes:function(e){if(e instanceof Array){this.eventTypes=e,this.eventListeners={};for(var t=0,n=this.eventTypes.length;n>t;t++)this.eventListeners[this.eventTypes[t]]=[]}else handleError("log4javascript.EventSupport ["+this+"]: setEventTypes: eventTypes parameter must be an Array")},addEventListener:function(e,t){"function"==typeof t?(array_contains(this.eventTypes,e)||handleError("log4javascript.EventSupport ["+this+"]: addEventListener: no event called '"+e+"'"),this.eventListeners[e].push(t)):handleError("log4javascript.EventSupport ["+this+"]: addEventListener: listener must be a function")},removeEventListener:function(e,t){"function"==typeof t?(array_contains(this.eventTypes,e)||handleError("log4javascript.EventSupport ["+this+"]: removeEventListener: no event called '"+e+"'"),array_remove(this.eventListeners[e],t)):handleError("log4javascript.EventSupport ["+this+"]: removeEventListener: listener must be a function")},dispatchEvent:function(e,t){if(array_contains(this.eventTypes,e))for(var n=this.eventListeners[e],r=0,i=n.length;i>r;r++)n[r](this,e,t);else handleError("log4javascript.EventSupport ["+this+"]: dispatchEvent: no event called '"+e+"'")}};var applicationStartDate=new Date,uniqueId="log4javascript_"+applicationStartDate.getTime()+"_"+Math.floor(1e8*Math.random()),emptyFunction=function(){},newLine="\r\n",pageLoaded=!1;Log4JavaScript.prototype=new EventSupport,log4javascript=new Log4JavaScript,log4javascript.version="1.4.9",log4javascript.edition="log4javascript";var urlEncode="undefined"!=typeof window.encodeURIComponent?function(e){return encodeURIComponent(e)}:function(e){return escape(e).replace(/\+/g,"%2B").replace(/"/g,"%22").replace(/'/g,"%27").replace(/\//g,"%2F").replace(/=/g,"%3D")},urlDecode="undefined"!=typeof window.decodeURIComponent?function(e){return decodeURIComponent(e)}:function(e){return unescape(e).replace(/%2B/g,"+").replace(/%22/g,'"').replace(/%27/g,"'").replace(/%2F/g,"/").replace(/%3D/g,"=")};Function.prototype.apply||(Function.prototype.apply=function(obj,args){var methodName="__apply__";"undefined"!=typeof obj[methodName]&&(methodName+=String(Math.random()).substr(2)),obj[methodName]=this;for(var argsStrings=[],i=0,len=args.length;len>i;i++)argsStrings[i]="args["+i+"]";var script="obj."+methodName+"("+argsStrings.join(",")+")",returnValue=eval(script);return delete obj[methodName],returnValue}),Function.prototype.call||(Function.prototype.call=function(e){for(var t=[],n=1,r=arguments.length;r>n;n++)t[n-1]=arguments[n];return this.apply(e,t)});var logLog={quietMode:!1,debugMessages:[],setQuietMode:function(e){this.quietMode=bool(e)},numberOfErrors:0,alertAllErrors:!1,setAlertAllErrors:function(e){this.alertAllErrors=e},debug:function(e){this.debugMessages.push(e)},displayDebug:function(){alert(this.debugMessages.join(newLine))},warn:function(e,t){},error:function(e,t){if((1==++this.numberOfErrors||this.alertAllErrors)&&!this.quietMode){var n="log4javascript error: "+e;t&&(n+=newLine+newLine+"Original error: "+getExceptionStringRep(t)),alert(n)}}};log4javascript.logLog=logLog,log4javascript.setEventTypes(["load","error"]),log4javascript.handleError=handleError;var enabled=!("undefined"!=typeof log4javascript_disabled&&log4javascript_disabled);log4javascript.setEnabled=function(e){enabled=bool(e)},log4javascript.isEnabled=function(){return enabled};var useTimeStampsInMilliseconds=!0;log4javascript.setTimeStampsInMilliseconds=function(e){useTimeStampsInMilliseconds=bool(e)},log4javascript.isTimeStampsInMilliseconds=function(){return useTimeStampsInMilliseconds},log4javascript.evalInScope=function(expr){return eval(expr)};var showStackTraces=!1;log4javascript.setShowStackTraces=function(e){showStackTraces=bool(e)};var Level=function(e,t){this.level=e,this.name=t};Level.prototype={toString:function(){return this.name},equals:function(e){return this.level==e.level},isGreaterOrEqual:function(e){return this.level>=e.level}},Level.ALL=new Level(Number.MIN_VALUE,"ALL"),Level.TRACE=new Level(1e4,"TRACE"),Level.DEBUG=new Level(2e4,"DEBUG"),Level.INFO=new Level(3e4,"INFO"),Level.WARN=new Level(4e4,"WARN"),Level.ERROR=new Level(5e4,"ERROR"),Level.FATAL=new Level(6e4,"FATAL"),Level.OFF=new Level(Number.MAX_VALUE,"OFF"),log4javascript.Level=Level,Timer.prototype.getElapsedTime=function(){return(new Date).getTime()-this.start.getTime()};var anonymousLoggerName="[anonymous]",defaultLoggerName="[default]",nullLoggerName="[null]",rootLoggerName="root";Logger.prototype={trace:function(){this.log(Level.TRACE,arguments)},debug:function(){this.log(Level.DEBUG,arguments)},info:function(){this.log(Level.INFO,arguments)},warn:function(){this.log(Level.WARN,arguments)},error:function(){this.log(Level.ERROR,arguments)},fatal:function(){this.log(Level.FATAL,arguments)},isEnabledFor:function(e){return e.isGreaterOrEqual(this.getEffectiveLevel())},isTraceEnabled:function(){return this.isEnabledFor(Level.TRACE)},isDebugEnabled:function(){return this.isEnabledFor(Level.DEBUG)},isInfoEnabled:function(){return this.isEnabledFor(Level.INFO)},isWarnEnabled:function(){return this.isEnabledFor(Level.WARN)},isErrorEnabled:function(){return this.isEnabledFor(Level.ERROR)},isFatalEnabled:function(){return this.isEnabledFor(Level.FATAL)}},Logger.prototype.trace.isEntryPoint=!0,Logger.prototype.debug.isEntryPoint=!0,Logger.prototype.info.isEntryPoint=!0,Logger.prototype.warn.isEntryPoint=!0,Logger.prototype.error.isEntryPoint=!0,Logger.prototype.fatal.isEntryPoint=!0;var loggers={},loggerNames=[],ROOT_LOGGER_DEFAULT_LEVEL=Level.DEBUG,rootLogger=new Logger(rootLoggerName);rootLogger.setLevel(ROOT_LOGGER_DEFAULT_LEVEL),log4javascript.getRootLogger=function(){return rootLogger},log4javascript.getLogger=function(e){if("string"!=typeof e&&(e=anonymousLoggerName,logLog.warn("log4javascript.getLogger: non-string logger name "+toStr(e)+" supplied, returning anonymous logger")),e==rootLoggerName&&handleError("log4javascript.getLogger: root logger may not be obtained by name"),!loggers[e]){var t=new Logger(e);loggers[e]=t,loggerNames.push(e);var n,r=e.lastIndexOf(".");if(r>-1){var i=e.substring(0,r);n=log4javascript.getLogger(i)}else n=rootLogger;n.addChild(t)}return loggers[e]};var defaultLogger=null;log4javascript.getDefaultLogger=function(){if(!defaultLogger){defaultLogger=log4javascript.getLogger(defaultLoggerName);var e=new log4javascript.PopUpAppender;defaultLogger.addAppender(e)}return defaultLogger};var nullLogger=null;log4javascript.getNullLogger=function(){return nullLogger||(nullLogger=new Logger(nullLoggerName),nullLogger.setLevel(Level.OFF)),nullLogger},log4javascript.resetConfiguration=function(){rootLogger.setLevel(ROOT_LOGGER_DEFAULT_LEVEL),loggers={}};var LoggingEvent=function(e,t,n,r,i){this.logger=e,this.timeStamp=t,this.timeStampInMilliseconds=t.getTime(),this.timeStampInSeconds=Math.floor(this.timeStampInMilliseconds/1e3),this.milliseconds=this.timeStamp.getMilliseconds(),this.level=n,this.messages=r,this.exception=i};LoggingEvent.prototype={getThrowableStrRep:function(){return this.exception?getExceptionStringRep(this.exception):""},getCombinedMessages:function(){return 1==this.messages.length?this.messages[0]:this.messages.join(newLine)},toString:function(){return"LoggingEvent["+this.level+"]"}},log4javascript.LoggingEvent=LoggingEvent;var Layout=function(){};Layout.prototype={defaults:{loggerKey:"logger",timeStampKey:"timestamp",millisecondsKey:"milliseconds",levelKey:"level",messageKey:"message",exceptionKey:"exception",urlKey:"url"},loggerKey:"logger",timeStampKey:"timestamp",millisecondsKey:"milliseconds",levelKey:"level",messageKey:"message",exceptionKey:"exception",urlKey:"url",batchHeader:"",batchFooter:"",batchSeparator:"",returnsPostData:!1,overrideTimeStampsSetting:!1,useTimeStampsInMilliseconds:null,format:function(){handleError("Layout.format: layout supplied has no format() method")},ignoresThrowable:function(){handleError("Layout.ignoresThrowable: layout supplied has no ignoresThrowable() method")},getContentType:function(){return"text/plain"},allowBatching:function(){return!0},setTimeStampsInMilliseconds:function(e){this.overrideTimeStampsSetting=!0,this.useTimeStampsInMilliseconds=bool(e)},isTimeStampsInMilliseconds:function(){return this.overrideTimeStampsSetting?this.useTimeStampsInMilliseconds:useTimeStampsInMilliseconds},getTimeStampValue:function(e){return this.isTimeStampsInMilliseconds()?e.timeStampInMilliseconds:e.timeStampInSeconds},getDataValues:function(e,t){var n=[[this.loggerKey,e.logger.name],[this.timeStampKey,this.getTimeStampValue(e)],[this.levelKey,e.level.name],[this.urlKey,window.location.href],[this.messageKey,t?e.getCombinedMessages():e.messages]];if(this.isTimeStampsInMilliseconds()||n.push([this.millisecondsKey,e.milliseconds]),e.exception&&n.push([this.exceptionKey,getExceptionStringRep(e.exception)]),this.hasCustomFields())for(var r=0,i=this.customFields.length;i>r;r++){var o=this.customFields[r].value;"function"==typeof o&&(o=o(this,e)),n.push([this.customFields[r].name,o])}return n},setKeys:function(e,t,n,r,i,o,a){this.loggerKey=extractStringFromParam(e,this.defaults.loggerKey),this.timeStampKey=extractStringFromParam(t,this.defaults.timeStampKey),this.levelKey=extractStringFromParam(n,this.defaults.levelKey),this.messageKey=extractStringFromParam(r,this.defaults.messageKey),this.exceptionKey=extractStringFromParam(i,this.defaults.exceptionKey),this.urlKey=extractStringFromParam(o,this.defaults.urlKey),this.millisecondsKey=extractStringFromParam(a,this.defaults.millisecondsKey)},setCustomField:function(e,t){for(var n=!1,r=0,i=this.customFields.length;i>r;r++)this.customFields[r].name===e&&(this.customFields[r].value=t,n=!0);n||this.customFields.push({name:e,value:t})},hasCustomFields:function(){return this.customFields.length>0},formatWithException:function(e){var t=this.format(e);return e.exception&&this.ignoresThrowable()&&(t+=e.getThrowableStrRep()),t},toString:function(){handleError("Layout.toString: all layouts must override this method")}},log4javascript.Layout=Layout;var Appender=function(){};Appender.prototype=new EventSupport,Appender.prototype.layout=new PatternLayout,Appender.prototype.threshold=Level.ALL,Appender.prototype.loggers=[],Appender.prototype.doAppend=function(e){enabled&&e.level.level>=this.threshold.level&&this.append(e)},Appender.prototype.append=function(e){},Appender.prototype.setLayout=function(e){e instanceof Layout?this.layout=e:handleError("Appender.setLayout: layout supplied to "+this.toString()+" is not a subclass of Layout")},Appender.prototype.getLayout=function(){return this.layout},Appender.prototype.setThreshold=function(e){e instanceof Level?this.threshold=e:handleError("Appender.setThreshold: threshold supplied to "+this.toString()+" is not a subclass of Level")},Appender.prototype.getThreshold=function(){return this.threshold},Appender.prototype.setAddedToLogger=function(e){this.loggers.push(e)},Appender.prototype.setRemovedFromLogger=function(e){array_remove(this.loggers,e)},Appender.prototype.group=emptyFunction,Appender.prototype.groupEnd=emptyFunction,Appender.prototype.toString=function(){handleError("Appender.toString: all appenders must override this method")},log4javascript.Appender=Appender,SimpleLayout.prototype=new Layout,SimpleLayout.prototype.format=function(e){return e.level.name+" - "+e.getCombinedMessages()},SimpleLayout.prototype.ignoresThrowable=function(){return!0},SimpleLayout.prototype.toString=function(){return"SimpleLayout"},log4javascript.SimpleLayout=SimpleLayout,NullLayout.prototype=new Layout,NullLayout.prototype.format=function(e){return e.messages},NullLayout.prototype.ignoresThrowable=function(){return!0},NullLayout.prototype.formatWithException=function(e){var t=e.messages,n=e.exception;return n?t.concat([n]):t},NullLayout.prototype.toString=function(){return"NullLayout"},log4javascript.NullLayout=NullLayout,XmlLayout.prototype=new Layout,XmlLayout.prototype.isCombinedMessages=function(){return this.combineMessages},XmlLayout.prototype.getContentType=function(){return"text/xml"},XmlLayout.prototype.escapeCdata=function(e){return e.replace(/\]\]>/,"]]>]]&gt;<![CDATA[")},XmlLayout.prototype.format=function(e){function t(e){return e="string"==typeof e?e:toStr(e),"<log4javascript:message><![CDATA["+i.escapeCdata(e)+"]]></log4javascript:message>"}var n,r,i=this,o='<log4javascript:event logger="'+e.logger.name+'" timestamp="'+this.getTimeStampValue(e)+'"';if(this.isTimeStampsInMilliseconds()||(o+=' milliseconds="'+e.milliseconds+'"'),o+=' level="'+e.level.name+'">'+newLine,this.combineMessages)o+=t(e.getCombinedMessages());else{for(o+="<log4javascript:messages>"+newLine,n=0,r=e.messages.length;r>n;n++)o+=t(e.messages[n])+newLine;o+="</log4javascript:messages>"+newLine}if(this.hasCustomFields())for(n=0,r=this.customFields.length;r>n;n++)o+='<log4javascript:customfield name="'+this.customFields[n].name+'"><![CDATA['+this.customFields[n].value.toString()+"]]></log4javascript:customfield>"+newLine;return e.exception&&(o+="<log4javascript:exception><![CDATA["+getExceptionStringRep(e.exception)+"]]></log4javascript:exception>"+newLine),o+="</log4javascript:event>"+newLine+newLine},XmlLayout.prototype.ignoresThrowable=function(){return!1},XmlLayout.prototype.toString=function(){return"XmlLayout"},log4javascript.XmlLayout=XmlLayout,JsonLayout.prototype=new Layout,JsonLayout.prototype.isReadable=function(){return this.readable},JsonLayout.prototype.isCombinedMessages=function(){return this.combineMessages},JsonLayout.prototype.format=function(e){function t(e,n,r){var o,a=typeof e;if(e instanceof Date)o=String(e.getTime());else if(r&&e instanceof Array){o="["+i.lineBreak;for(var s=0,l=e.length;l>s;s++){var u=n+i.tab;o+=u+t(e[s],u,!1),s<e.length-1&&(o+=","),o+=i.lineBreak}o+=n+"]"}else o="number"!==a&&"boolean"!==a?'"'+escapeNewLines(toStr(e).replace(/\"/g,'\\"'))+'"':e;return o}var n,r,i=this,o=this.getDataValues(e,this.combineMessages),a="{"+this.lineBreak;for(n=0,r=o.length-1;r>=n;n++)a+=this.tab+'"'+o[n][0]+'"'+this.colon+t(o[n][1],this.tab,!0),r>n&&(a+=","),a+=this.lineBreak;return a+="}"+this.lineBreak},JsonLayout.prototype.ignoresThrowable=function(){return!1},JsonLayout.prototype.toString=function(){return"JsonLayout"},JsonLayout.prototype.getContentType=function(){return"application/json"},log4javascript.JsonLayout=JsonLayout,HttpPostDataLayout.prototype=new Layout,HttpPostDataLayout.prototype.allowBatching=function(){return!1},HttpPostDataLayout.prototype.format=function(e){for(var t=this.getDataValues(e),n=[],r=0,i=t.length;i>r;r++){var o=t[r][1]instanceof Date?String(t[r][1].getTime()):t[r][1];n.push(urlEncode(t[r][0])+"="+urlEncode(o))}return n.join("&")},HttpPostDataLayout.prototype.ignoresThrowable=function(e){return!1},HttpPostDataLayout.prototype.toString=function(){return"HttpPostDataLayout"},log4javascript.HttpPostDataLayout=HttpPostDataLayout;var SimpleDateFormat;!function(){var e=/('[^']*')|(G+|y+|M+|w+|W+|D+|d+|F+|E+|a+|H+|k+|K+|h+|m+|s+|S+|Z+)|([a-zA-Z]+)|([^a-zA-Z']+)/,t=["January","February","March","April","May","June","July","August","September","October","November","December"],n=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],r=0,i=1,o=2,a=3,s=4,l=5,u={G:r,y:a,M:s,w:o,W:o,D:o,d:o,F:o,E:i,a:r,H:o,k:o,K:o,h:o,m:o,s:o,S:o,Z:l},c=864e5,p=7*c,f=1,d=function(e,t,n){var r=new Date(e,t,n,0,0,0);return r.setMilliseconds(0),r};Date.prototype.getDifference=function(e){return this.getTime()-e.getTime()},Date.prototype.isBefore=function(e){return this.getTime()<e.getTime()},Date.prototype.getUTCTime=function(){return Date.UTC(this.getFullYear(),this.getMonth(),this.getDate(),this.getHours(),this.getMinutes(),this.getSeconds(),this.getMilliseconds())},Date.prototype.getTimeSince=function(e){return this.getUTCTime()-e.getUTCTime()},Date.prototype.getPreviousSunday=function(){var e=new Date(this.getFullYear(),this.getMonth(),this.getDate(),12,0,0),t=new Date(e.getTime()-this.getDay()*c);return d(t.getFullYear(),t.getMonth(),t.getDate())},Date.prototype.getWeekInYear=function(e){isUndefined(this.minimalDaysInFirstWeek)&&(e=f);var t=this.getPreviousSunday(),n=d(this.getFullYear(),0,1),r=t.isBefore(n)?0:1+Math.floor(t.getTimeSince(n)/p),i=7-n.getDay(),o=r;return e>i&&o--,o},Date.prototype.getWeekInMonth=function(e){isUndefined(this.minimalDaysInFirstWeek)&&(e=f);var t=this.getPreviousSunday(),n=d(this.getFullYear(),this.getMonth(),1),r=t.isBefore(n)?0:1+Math.floor(t.getTimeSince(n)/p),i=7-n.getDay(),o=r;return i>=e&&o++,o},Date.prototype.getDayInYear=function(){var e=d(this.getFullYear(),0,1);return 1+Math.floor(this.getTimeSince(e)/c)},SimpleDateFormat=function(e){this.formatString=e},SimpleDateFormat.prototype.setMinimalDaysInFirstWeek=function(e){this.minimalDaysInFirstWeek=e},SimpleDateFormat.prototype.getMinimalDaysInFirstWeek=function(){return isUndefined(this.minimalDaysInFirstWeek)?f:this.minimalDaysInFirstWeek};var h=function(e,t){for(;e.length<t;)e="0"+e;return e},g=function(e,t,n){return t>=4?e:e.substr(0,Math.max(n,t))},m=function(e,t){var n=""+e;return h(n,t)};SimpleDateFormat.prototype.format=function(c){for(var p,f="",d=this.formatString;p=e.exec(d);){var v=p[1],y=p[2],$=p[3],b=p[4];if(v)f+="''"==v?"'":v.substring(1,v.length-1);else if($);else if(b)f+=b;else if(y){var x=y.charAt(0),w=y.length,C="";switch(x){case"G":C="AD";break;case"y":C=c.getFullYear();break;case"M":C=c.getMonth();break;case"w":C=c.getWeekInYear(this.getMinimalDaysInFirstWeek());break;case"W":C=c.getWeekInMonth(this.getMinimalDaysInFirstWeek());break;case"D":C=c.getDayInYear();break;case"d":C=c.getDate();break;case"F":C=1+Math.floor((c.getDate()-1)/7);break;case"E":C=n[c.getDay()];break;case"a":C=c.getHours()>=12?"PM":"AM";break;case"H":C=c.getHours();break;case"k":C=c.getHours()||24;break;case"K":C=c.getHours()%12;break;case"h":C=c.getHours()%12||12;break;case"m":C=c.getMinutes();break;case"s":C=c.getSeconds();break;case"S":C=c.getMilliseconds();break;case"Z":C=c.getTimezoneOffset()}switch(u[x]){case r:f+=g(C,w,2);break;case i:f+=g(C,w,3);break;case o:f+=m(C,w);break;case a:if(3>=w){var E=""+C;f+=E.substr(2,2)}else f+=m(C,w);break;case s:f+=w>=3?g(t[C],w,w):m(C+1,w);break;case l:var S=C>0,T=S?"-":"+",L=Math.abs(C),A=""+Math.floor(L/60);A=h(A,2);var k=""+L%60;k=h(k,2),f+=T+A+k}}d=d.substr(p.index+p[0].length)}return f}}(),log4javascript.SimpleDateFormat=SimpleDateFormat,PatternLayout.TTCC_CONVERSION_PATTERN="%r %p %c - %m%n",PatternLayout.DEFAULT_CONVERSION_PATTERN="%m%n",PatternLayout.ISO8601_DATEFORMAT="yyyy-MM-dd HH:mm:ss,SSS",PatternLayout.DATETIME_DATEFORMAT="dd MMM yyyy HH:mm:ss,SSS",PatternLayout.ABSOLUTETIME_DATEFORMAT="HH:mm:ss,SSS",PatternLayout.prototype=new Layout,PatternLayout.prototype.format=function(e){for(var t,n=/%(-?[0-9]+)?(\.?[0-9]+)?([acdfmMnpr%])(\{([^\}]+)\})?|([^%]+)/,r="",i=this.pattern;t=n.exec(i);){var o=t[0],a=t[1],s=t[2],l=t[3],u=t[5],c=t[6];if(c)r+=""+c;else{var p="";switch(l){case"a":case"m":var f=0;u&&(f=parseInt(u,10),isNaN(f)&&(handleError("PatternLayout.format: invalid specifier '"+u+"' for conversion character '"+l+"' - should be a number"),f=0));for(var d="a"===l?e.messages[0]:e.messages,h=0,g=d.length;g>h;h++)h>0&&" "!==p.charAt(p.length-1)&&(p+=" "),p+=0===f?d[h]:formatObjectExpansion(d[h],f);break;case"c":var m=e.logger.name;if(u){var v=parseInt(u,10),y=e.logger.name.split(".");p=v>=y.length?m:y.slice(y.length-v).join(".")}else p=m;break;case"d":var $=PatternLayout.ISO8601_DATEFORMAT;u&&($=u,"ISO8601"==$?$=PatternLayout.ISO8601_DATEFORMAT:"ABSOLUTE"==$?$=PatternLayout.ABSOLUTETIME_DATEFORMAT:"DATE"==$&&($=PatternLayout.DATETIME_DATEFORMAT)),p=new SimpleDateFormat($).format(e.timeStamp);break;case"f":if(this.hasCustomFields()){var b=0;u&&(b=parseInt(u,10),isNaN(b)?handleError("PatternLayout.format: invalid specifier '"+u+"' for conversion character 'f' - should be a number"):0===b?handleError("PatternLayout.format: invalid specifier '"+u+"' for conversion character 'f' - must be greater than zero"):b>this.customFields.length?handleError("PatternLayout.format: invalid specifier '"+u+"' for conversion character 'f' - there aren't that many custom fields"):b-=1);var x=this.customFields[b].value;"function"==typeof x&&(x=x(this,e)),p=x}break;case"n":p=newLine;break;case"p":p=e.level.name;break;case"r":p=""+e.timeStamp.getDifference(applicationStartDate);break;case"%":p="%";break;default:p=o}var w;if(s){w=parseInt(s.substr(1),10);var C=p.length;C>w&&(p=p.substring(C-w,C))}if(a)if("-"==a.charAt(0))for(w=parseInt(a.substr(1),10);p.length<w;)p+=" ";else for(w=parseInt(a,10);p.length<w;)p=" "+p;r+=p}i=i.substr(t.index+t[0].length)}return r},PatternLayout.prototype.ignoresThrowable=function(){return!0},PatternLayout.prototype.toString=function(){return"PatternLayout"},log4javascript.PatternLayout=PatternLayout,AlertAppender.prototype=new Appender,AlertAppender.prototype.layout=new SimpleLayout,AlertAppender.prototype.append=function(e){alert(this.getLayout().formatWithException(e))},AlertAppender.prototype.toString=function(){return"AlertAppender"},log4javascript.AlertAppender=AlertAppender,BrowserConsoleAppender.prototype=new log4javascript.Appender,BrowserConsoleAppender.prototype.layout=new NullLayout,BrowserConsoleAppender.prototype.threshold=Level.DEBUG,BrowserConsoleAppender.prototype.append=function(e){var t,n=this,r=function(){var t=n.getLayout().formatWithException(e);return"string"==typeof t?[t]:t};if((t=window.console)&&t.log){var i,o=r();i=t.debug&&Level.DEBUG.isGreaterOrEqual(e.level)?"debug":t.info&&Level.INFO.equals(e.level)?"info":t.warn&&Level.WARN.equals(e.level)?"warn":t.error&&e.level.isGreaterOrEqual(Level.ERROR)?"error":"log",t[i].apply?t[i].apply(t,o):t[i](o)}else"undefined"!=typeof opera&&opera.postError&&opera.postError(r())},BrowserConsoleAppender.prototype.group=function(e){window.console&&window.console.group&&window.console.group(e)},BrowserConsoleAppender.prototype.groupEnd=function(){window.console&&window.console.groupEnd&&window.console.groupEnd()},BrowserConsoleAppender.prototype.toString=function(){return"BrowserConsoleAppender"},log4javascript.BrowserConsoleAppender=BrowserConsoleAppender;var xhrFactory=function(){return new XMLHttpRequest},xmlHttpFactories=[xhrFactory,function(){return new ActiveXObject("Msxml2.XMLHTTP")},function(){return new ActiveXObject("Microsoft.XMLHTTP")}],withCredentialsSupported=!1,getXmlHttp=function(e){for(var t,n=null,r=0,i=xmlHttpFactories.length;i>r;r++){t=xmlHttpFactories[r];try{return n=t(),withCredentialsSupported=t==xhrFactory&&"withCredentials"in n,getXmlHttp=t,n}catch(o){}}e?e():handleError("getXmlHttp: unable to obtain XMLHttpRequest object")};AjaxAppender.prototype=new Appender,AjaxAppender.prototype.defaults={waitForResponse:!1,timed:!1,timerInterval:1e3,batchSize:1,sendAllOnUnload:!1,requestSuccessCallback:null,failCallback:null,postVarName:"data",contentType:"application/x-www-form-urlencoded"},AjaxAppender.prototype.layout=new HttpPostDataLayout,AjaxAppender.prototype.toString=function(){return"AjaxAppender"},log4javascript.AjaxAppender=AjaxAppender;var ConsoleAppender;if(function(){function e(e,t,n,r,i){this.create(!1,null,e,t,n,r,i,this.defaults.focusPopUp)}function t(e,t,n,r,i,o){this.create(!0,e,t,n,r,i,o,!1)}var n=function(){return['<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">','<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">',"<head>","<title>log4javascript</title>",'<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />',"<!-- Make IE8 behave like IE7, having gone to all the trouble of making IE work -->",'<meta http-equiv="X-UA-Compatible" content="IE=7" />','<script type="text/javascript">var isIe = false, isIePre7 = false;</script>','<!--[if IE]><script type="text/javascript">isIe = true</script><![endif]-->','<!--[if lt IE 7]><script type="text/javascript">isIePre7 = true</script><![endif]-->','<script type="text/javascript">',"//<![CDATA[","var loggingEnabled=true;var logQueuedEventsTimer=null;var logEntries=[];var logEntriesAndSeparators=[];var logItems=[];var renderDelay=100;var unrenderedLogItemsExist=false;var rootGroup,currentGroup=null;var loaded=false;var currentLogItem=null;var logMainContainer;function copyProperties(obj,props){for(var i in props){obj[i]=props[i];}}","function LogItem(){}","LogItem.prototype={mainContainer:null,wrappedContainer:null,unwrappedContainer:null,group:null,appendToLog:function(){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].appendToLog();}","this.group.update();},doRemove:function(doUpdate,removeFromGroup){if(this.rendered){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].remove();}","this.unwrappedElementContainer=null;this.wrappedElementContainer=null;this.mainElementContainer=null;}","if(this.group&&removeFromGroup){this.group.removeChild(this,doUpdate);}","if(this===currentLogItem){currentLogItem=null;}},remove:function(doUpdate,removeFromGroup){this.doRemove(doUpdate,removeFromGroup);},render:function(){},accept:function(visitor){visitor.visit(this);},getUnwrappedDomContainer:function(){return this.group.unwrappedElementContainer.contentDiv;},getWrappedDomContainer:function(){return this.group.wrappedElementContainer.contentDiv;},getMainDomContainer:function(){return this.group.mainElementContainer.contentDiv;}};LogItem.serializedItemKeys={LOG_ENTRY:0,GROUP_START:1,GROUP_END:2};function LogItemContainerElement(){}",'LogItemContainerElement.prototype={appendToLog:function(){var insertBeforeFirst=(newestAtTop&&this.containerDomNode.hasChildNodes());if(insertBeforeFirst){this.containerDomNode.insertBefore(this.mainDiv,this.containerDomNode.firstChild);}else{this.containerDomNode.appendChild(this.mainDiv);}}};function SeparatorElementContainer(containerDomNode){this.containerDomNode=containerDomNode;this.mainDiv=document.createElement("div");this.mainDiv.className="separator";this.mainDiv.innerHTML="&nbsp;";}',"SeparatorElementContainer.prototype=new LogItemContainerElement();SeparatorElementContainer.prototype.remove=function(){this.mainDiv.parentNode.removeChild(this.mainDiv);this.mainDiv=null;};function Separator(){this.rendered=false;}","Separator.prototype=new LogItem();copyProperties(Separator.prototype,{render:function(){var containerDomNode=this.group.contentDiv;if(isIe){this.unwrappedElementContainer=new SeparatorElementContainer(this.getUnwrappedDomContainer());this.wrappedElementContainer=new SeparatorElementContainer(this.getWrappedDomContainer());this.elementContainers=[this.unwrappedElementContainer,this.wrappedElementContainer];}else{this.mainElementContainer=new SeparatorElementContainer(this.getMainDomContainer());this.elementContainers=[this.mainElementContainer];}",'this.content=this.formattedMessage;this.rendered=true;}});function GroupElementContainer(group,containerDomNode,isRoot,isWrapped){this.group=group;this.containerDomNode=containerDomNode;this.isRoot=isRoot;this.isWrapped=isWrapped;this.expandable=false;if(this.isRoot){if(isIe){this.contentDiv=logMainContainer.appendChild(document.createElement("div"));this.contentDiv.id=this.isWrapped?"log_wrapped":"log_unwrapped";}else{this.contentDiv=logMainContainer;}}else{var groupElementContainer=this;this.mainDiv=document.createElement("div");this.mainDiv.className="group";this.headingDiv=this.mainDiv.appendChild(document.createElement("div"));this.headingDiv.className="groupheading";this.expander=this.headingDiv.appendChild(document.createElement("span"));this.expander.className="expander unselectable greyedout";this.expander.unselectable=true;var expanderText=this.group.expanded?"-":"+";this.expanderTextNode=this.expander.appendChild(document.createTextNode(expanderText));this.headingDiv.appendChild(document.createTextNode(" "+this.group.name));this.contentDiv=this.mainDiv.appendChild(document.createElement("div"));var contentCssClass=this.group.expanded?"expanded":"collapsed";this.contentDiv.className="groupcontent "+contentCssClass;this.expander.onclick=function(){if(groupElementContainer.group.expandable){groupElementContainer.group.toggleExpanded();}};}}','GroupElementContainer.prototype=new LogItemContainerElement();copyProperties(GroupElementContainer.prototype,{toggleExpanded:function(){if(!this.isRoot){var oldCssClass,newCssClass,expanderText;if(this.group.expanded){newCssClass="expanded";oldCssClass="collapsed";expanderText="-";}else{newCssClass="collapsed";oldCssClass="expanded";expanderText="+";}',"replaceClass(this.contentDiv,newCssClass,oldCssClass);this.expanderTextNode.nodeValue=expanderText;}},remove:function(){if(!this.isRoot){this.headingDiv=null;this.expander.onclick=null;this.expander=null;this.expanderTextNode=null;this.contentDiv=null;this.containerDomNode=null;this.mainDiv.parentNode.removeChild(this.mainDiv);this.mainDiv=null;}},reverseChildren:function(){var node=null;var childDomNodes=[];while((node=this.contentDiv.firstChild)){this.contentDiv.removeChild(node);childDomNodes.push(node);}",'while((node=childDomNodes.pop())){this.contentDiv.appendChild(node);}},update:function(){if(!this.isRoot){if(this.group.expandable){removeClass(this.expander,"greyedout");}else{addClass(this.expander,"greyedout");}}},clear:function(){if(this.isRoot){this.contentDiv.innerHTML="";}}});function Group(name,isRoot,initiallyExpanded){this.name=name;this.group=null;this.isRoot=isRoot;this.initiallyExpanded=initiallyExpanded;this.elementContainers=[];this.children=[];this.expanded=initiallyExpanded;this.rendered=false;this.expandable=false;}',"Group.prototype=new LogItem();copyProperties(Group.prototype,{addChild:function(logItem){this.children.push(logItem);logItem.group=this;},render:function(){if(isIe){var unwrappedDomContainer,wrappedDomContainer;if(this.isRoot){unwrappedDomContainer=logMainContainer;wrappedDomContainer=logMainContainer;}else{unwrappedDomContainer=this.getUnwrappedDomContainer();wrappedDomContainer=this.getWrappedDomContainer();}","this.unwrappedElementContainer=new GroupElementContainer(this,unwrappedDomContainer,this.isRoot,false);this.wrappedElementContainer=new GroupElementContainer(this,wrappedDomContainer,this.isRoot,true);this.elementContainers=[this.unwrappedElementContainer,this.wrappedElementContainer];}else{var mainDomContainer=this.isRoot?logMainContainer:this.getMainDomContainer();this.mainElementContainer=new GroupElementContainer(this,mainDomContainer,this.isRoot,false);this.elementContainers=[this.mainElementContainer];}","this.rendered=true;},toggleExpanded:function(){this.expanded=!this.expanded;for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].toggleExpanded();}},expand:function(){if(!this.expanded){this.toggleExpanded();}},accept:function(visitor){visitor.visitGroup(this);},reverseChildren:function(){if(this.rendered){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].reverseChildren();}}},update:function(){var previouslyExpandable=this.expandable;this.expandable=(this.children.length!==0);if(this.expandable!==previouslyExpandable){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].update();}}},flatten:function(){var visitor=new GroupFlattener();this.accept(visitor);return visitor.logEntriesAndSeparators;},removeChild:function(child,doUpdate){array_remove(this.children,child);child.group=null;if(doUpdate){this.update();}},remove:function(doUpdate,removeFromGroup){for(var i=0,len=this.children.length;i<len;i++){this.children[i].remove(false,false);}","this.children=[];this.update();if(this===currentGroup){currentGroup=this.group;}","this.doRemove(doUpdate,removeFromGroup);},serialize:function(items){items.push([LogItem.serializedItemKeys.GROUP_START,this.name]);for(var i=0,len=this.children.length;i<len;i++){this.children[i].serialize(items);}","if(this!==currentGroup){items.push([LogItem.serializedItemKeys.GROUP_END]);}},clear:function(){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].clear();}}});function LogEntryElementContainer(){}",'LogEntryElementContainer.prototype=new LogItemContainerElement();copyProperties(LogEntryElementContainer.prototype,{remove:function(){this.doRemove();},doRemove:function(){this.mainDiv.parentNode.removeChild(this.mainDiv);this.mainDiv=null;this.contentElement=null;this.containerDomNode=null;},setContent:function(content,wrappedContent){if(content===this.formattedMessage){this.contentElement.innerHTML="";this.contentElement.appendChild(document.createTextNode(this.formattedMessage));}else{this.contentElement.innerHTML=content;}},setSearchMatch:function(isMatch){var oldCssClass=isMatch?"searchnonmatch":"searchmatch";var newCssClass=isMatch?"searchmatch":"searchnonmatch";replaceClass(this.mainDiv,newCssClass,oldCssClass);},clearSearch:function(){removeClass(this.mainDiv,"searchmatch");removeClass(this.mainDiv,"searchnonmatch");}});function LogEntryWrappedElementContainer(logEntry,containerDomNode){this.logEntry=logEntry;this.containerDomNode=containerDomNode;this.mainDiv=document.createElement("div");this.mainDiv.appendChild(document.createTextNode(this.logEntry.formattedMessage));this.mainDiv.className="logentry wrapped "+this.logEntry.level;this.contentElement=this.mainDiv;}','LogEntryWrappedElementContainer.prototype=new LogEntryElementContainer();LogEntryWrappedElementContainer.prototype.setContent=function(content,wrappedContent){if(content===this.formattedMessage){this.contentElement.innerHTML="";this.contentElement.appendChild(document.createTextNode(this.formattedMessage));}else{this.contentElement.innerHTML=wrappedContent;}};function LogEntryUnwrappedElementContainer(logEntry,containerDomNode){this.logEntry=logEntry;this.containerDomNode=containerDomNode;this.mainDiv=document.createElement("div");this.mainDiv.className="logentry unwrapped "+this.logEntry.level;this.pre=this.mainDiv.appendChild(document.createElement("pre"));this.pre.appendChild(document.createTextNode(this.logEntry.formattedMessage));this.pre.className="unwrapped";this.contentElement=this.pre;}','LogEntryUnwrappedElementContainer.prototype=new LogEntryElementContainer();LogEntryUnwrappedElementContainer.prototype.remove=function(){this.doRemove();this.pre=null;};function LogEntryMainElementContainer(logEntry,containerDomNode){this.logEntry=logEntry;this.containerDomNode=containerDomNode;this.mainDiv=document.createElement("div");this.mainDiv.className="logentry nonielogentry "+this.logEntry.level;this.contentElement=this.mainDiv.appendChild(document.createElement("span"));this.contentElement.appendChild(document.createTextNode(this.logEntry.formattedMessage));}',"LogEntryMainElementContainer.prototype=new LogEntryElementContainer();function LogEntry(level,formattedMessage){this.level=level;this.formattedMessage=formattedMessage;this.rendered=false;}",'LogEntry.prototype=new LogItem();copyProperties(LogEntry.prototype,{render:function(){var logEntry=this;var containerDomNode=this.group.contentDiv;if(isIe){this.formattedMessage=this.formattedMessage.replace(/\\r\\n/g,"\\r");this.unwrappedElementContainer=new LogEntryUnwrappedElementContainer(this,this.getUnwrappedDomContainer());this.wrappedElementContainer=new LogEntryWrappedElementContainer(this,this.getWrappedDomContainer());this.elementContainers=[this.unwrappedElementContainer,this.wrappedElementContainer];}else{this.mainElementContainer=new LogEntryMainElementContainer(this,this.getMainDomContainer());this.elementContainers=[this.mainElementContainer];}','this.content=this.formattedMessage;this.rendered=true;},setContent:function(content,wrappedContent){if(content!=this.content){if(isIe&&(content!==this.formattedMessage)){content=content.replace(/\\r\\n/g,"\\r");}',"for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].setContent(content,wrappedContent);}",'this.content=content;}},getSearchMatches:function(){var matches=[];var i,len;if(isIe){var unwrappedEls=getElementsByClass(this.unwrappedElementContainer.mainDiv,"searchterm","span");var wrappedEls=getElementsByClass(this.wrappedElementContainer.mainDiv,"searchterm","span");for(i=0,len=unwrappedEls.length;i<len;i++){matches[i]=new Match(this.level,null,unwrappedEls[i],wrappedEls[i]);}}else{var els=getElementsByClass(this.mainElementContainer.mainDiv,"searchterm","span");for(i=0,len=els.length;i<len;i++){matches[i]=new Match(this.level,els[i]);}}',"return matches;},setSearchMatch:function(isMatch){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].setSearchMatch(isMatch);}},clearSearch:function(){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].clearSearch();}},accept:function(visitor){visitor.visitLogEntry(this);},serialize:function(items){items.push([LogItem.serializedItemKeys.LOG_ENTRY,this.level,this.formattedMessage]);}});function LogItemVisitor(){}","LogItemVisitor.prototype={visit:function(logItem){},visitParent:function(logItem){if(logItem.group){logItem.group.accept(this);}},visitChildren:function(logItem){for(var i=0,len=logItem.children.length;i<len;i++){logItem.children[i].accept(this);}},visitLogEntry:function(logEntry){this.visit(logEntry);},visitSeparator:function(separator){this.visit(separator);},visitGroup:function(group){this.visit(group);}};function GroupFlattener(){this.logEntriesAndSeparators=[];}",'GroupFlattener.prototype=new LogItemVisitor();GroupFlattener.prototype.visitGroup=function(group){this.visitChildren(group);};GroupFlattener.prototype.visitLogEntry=function(logEntry){this.logEntriesAndSeparators.push(logEntry);};GroupFlattener.prototype.visitSeparator=function(separator){this.logEntriesAndSeparators.push(separator);};window.onload=function(){if(location.search){var queryBits=unescape(location.search).substr(1).split("&"),nameValueBits;for(var i=0,len=queryBits.length;i<len;i++){nameValueBits=queryBits[i].split("=");if(nameValueBits[0]=="log4javascript_domain"){document.domain=nameValueBits[1];break;}}}','logMainContainer=$("log");if(isIePre7){addClass(logMainContainer,"oldIe");}','rootGroup=new Group("root",true);rootGroup.render();currentGroup=rootGroup;setCommandInputWidth();setLogContainerHeight();toggleLoggingEnabled();toggleSearchEnabled();toggleSearchFilter();toggleSearchHighlight();applyFilters();checkAllLevels();toggleWrap();toggleNewestAtTop();toggleScrollToLatest();renderQueuedLogItems();loaded=true;$("command").value="";$("command").autocomplete="off";$("command").onkeydown=function(evt){evt=getEvent(evt);if(evt.keyCode==10||evt.keyCode==13){evalCommandLine();stopPropagation(evt);}else if(evt.keyCode==27){this.value="";this.focus();}else if(evt.keyCode==38&&commandHistory.length>0){currentCommandIndex=Math.max(0,currentCommandIndex-1);this.value=commandHistory[currentCommandIndex];moveCaretToEnd(this);}else if(evt.keyCode==40&&commandHistory.length>0){currentCommandIndex=Math.min(commandHistory.length-1,currentCommandIndex+1);this.value=commandHistory[currentCommandIndex];moveCaretToEnd(this);}};$("command").onkeypress=function(evt){evt=getEvent(evt);if(evt.keyCode==38&&commandHistory.length>0&&evt.preventDefault){evt.preventDefault();}};$("command").onkeyup=function(evt){evt=getEvent(evt);if(evt.keyCode==27&&evt.preventDefault){evt.preventDefault();this.focus();}};document.onkeydown=function keyEventHandler(evt){evt=getEvent(evt);switch(evt.keyCode){case 69:if(evt.shiftKey&&(evt.ctrlKey||evt.metaKey)){evalLastCommand();cancelKeyEvent(evt);return false;}',"break;case 75:if(evt.shiftKey&&(evt.ctrlKey||evt.metaKey)){focusSearch();cancelKeyEvent(evt);return false;}","break;case 40:case 76:if(evt.shiftKey&&(evt.ctrlKey||evt.metaKey)){focusCommandLine();cancelKeyEvent(evt);return false;}","break;}};setTimeout(setLogContainerHeight,20);setShowCommandLine(showCommandLine);doSearch();};window.onunload=function(){if(mainWindowExists()){appender.unload();}",'appender=null;};function toggleLoggingEnabled(){setLoggingEnabled($("enableLogging").checked);}',"function setLoggingEnabled(enable){loggingEnabled=enable;}","var appender=null;function setAppender(appenderParam){appender=appenderParam;}",'function setShowCloseButton(showCloseButton){$("closeButton").style.display=showCloseButton?"inline":"none";}','function setShowHideButton(showHideButton){$("hideButton").style.display=showHideButton?"inline":"none";}',"var newestAtTop=false;function LogItemContentReverser(){}","LogItemContentReverser.prototype=new LogItemVisitor();LogItemContentReverser.prototype.visitGroup=function(group){group.reverseChildren();this.visitChildren(group);};function setNewestAtTop(isNewestAtTop){var oldNewestAtTop=newestAtTop;var i,iLen,j,jLen;newestAtTop=Boolean(isNewestAtTop);if(oldNewestAtTop!=newestAtTop){var visitor=new LogItemContentReverser();rootGroup.accept(visitor);if(currentSearch){var currentMatch=currentSearch.matches[currentMatchIndex];var matchIndex=0;var matches=[];var actOnLogEntry=function(logEntry){var logEntryMatches=logEntry.getSearchMatches();for(j=0,jLen=logEntryMatches.length;j<jLen;j++){matches[matchIndex]=logEntryMatches[j];if(currentMatch&&logEntryMatches[j].equals(currentMatch)){currentMatchIndex=matchIndex;}","matchIndex++;}};if(newestAtTop){for(i=logEntries.length-1;i>=0;i--){actOnLogEntry(logEntries[i]);}}else{for(i=0,iLen=logEntries.length;i<iLen;i++){actOnLogEntry(logEntries[i]);}}","currentSearch.matches=matches;if(currentMatch){currentMatch.setCurrent();}}else if(scrollToLatest){doScrollToLatest();}}",'$("newestAtTop").checked=isNewestAtTop;}','function toggleNewestAtTop(){var isNewestAtTop=$("newestAtTop").checked;setNewestAtTop(isNewestAtTop);}',"var scrollToLatest=true;function setScrollToLatest(isScrollToLatest){scrollToLatest=isScrollToLatest;if(scrollToLatest){doScrollToLatest();}",'$("scrollToLatest").checked=isScrollToLatest;}','function toggleScrollToLatest(){var isScrollToLatest=$("scrollToLatest").checked;setScrollToLatest(isScrollToLatest);}','function doScrollToLatest(){var l=logMainContainer;if(typeof l.scrollTop!="undefined"){if(newestAtTop){l.scrollTop=0;}else{var latestLogEntry=l.lastChild;if(latestLogEntry){l.scrollTop=l.scrollHeight;}}}}',"var closeIfOpenerCloses=true;function setCloseIfOpenerCloses(isCloseIfOpenerCloses){closeIfOpenerCloses=isCloseIfOpenerCloses;}","var maxMessages=null;function setMaxMessages(max){maxMessages=max;pruneLogEntries();}",'var showCommandLine=false;function setShowCommandLine(isShowCommandLine){showCommandLine=isShowCommandLine;if(loaded){$("commandLine").style.display=showCommandLine?"block":"none";setCommandInputWidth();setLogContainerHeight();}}','function focusCommandLine(){if(loaded){$("command").focus();}}','function focusSearch(){if(loaded){$("searchBox").focus();}}',"function getLogItems(){var items=[];for(var i=0,len=logItems.length;i<len;i++){logItems[i].serialize(items);}","return items;}","function setLogItems(items){var loggingReallyEnabled=loggingEnabled;loggingEnabled=true;for(var i=0,len=items.length;i<len;i++){switch(items[i][0]){case LogItem.serializedItemKeys.LOG_ENTRY:log(items[i][1],items[i][2]);break;case LogItem.serializedItemKeys.GROUP_START:group(items[i][1]);break;case LogItem.serializedItemKeys.GROUP_END:groupEnd();break;}}","loggingEnabled=loggingReallyEnabled;}","function log(logLevel,formattedMessage){if(loggingEnabled){var logEntry=new LogEntry(logLevel,formattedMessage);logEntries.push(logEntry);logEntriesAndSeparators.push(logEntry);logItems.push(logEntry);currentGroup.addChild(logEntry);if(loaded){if(logQueuedEventsTimer!==null){clearTimeout(logQueuedEventsTimer);}","logQueuedEventsTimer=setTimeout(renderQueuedLogItems,renderDelay);unrenderedLogItemsExist=true;}}}","function renderQueuedLogItems(){logQueuedEventsTimer=null;var pruned=pruneLogEntries();var initiallyHasMatches=currentSearch?currentSearch.hasMatches():false;for(var i=0,len=logItems.length;i<len;i++){if(!logItems[i].rendered){logItems[i].render();logItems[i].appendToLog();if(currentSearch&&(logItems[i]instanceof LogEntry)){currentSearch.applyTo(logItems[i]);}}}","if(currentSearch){if(pruned){if(currentSearch.hasVisibleMatches()){if(currentMatchIndex===null){setCurrentMatchIndex(0);}","displayMatches();}else{displayNoMatches();}}else if(!initiallyHasMatches&&currentSearch.hasVisibleMatches()){setCurrentMatchIndex(0);displayMatches();}}","if(scrollToLatest){doScrollToLatest();}","unrenderedLogItemsExist=false;}","function pruneLogEntries(){if((maxMessages!==null)&&(logEntriesAndSeparators.length>maxMessages)){var numberToDelete=logEntriesAndSeparators.length-maxMessages;var prunedLogEntries=logEntriesAndSeparators.slice(0,numberToDelete);if(currentSearch){currentSearch.removeMatches(prunedLogEntries);}","var group;for(var i=0;i<numberToDelete;i++){group=logEntriesAndSeparators[i].group;array_remove(logItems,logEntriesAndSeparators[i]);array_remove(logEntries,logEntriesAndSeparators[i]);logEntriesAndSeparators[i].remove(true,true);if(group.children.length===0&&group!==currentGroup&&group!==rootGroup){array_remove(logItems,group);group.remove(true,true);}}","logEntriesAndSeparators=array_removeFromStart(logEntriesAndSeparators,numberToDelete);return true;}","return false;}",'function group(name,startExpanded){if(loggingEnabled){initiallyExpanded=(typeof startExpanded==="undefined")?true:Boolean(startExpanded);var newGroup=new Group(name,false,initiallyExpanded);currentGroup.addChild(newGroup);currentGroup=newGroup;logItems.push(newGroup);if(loaded){if(logQueuedEventsTimer!==null){clearTimeout(logQueuedEventsTimer);}',"logQueuedEventsTimer=setTimeout(renderQueuedLogItems,renderDelay);unrenderedLogItemsExist=true;}}}","function groupEnd(){currentGroup=(currentGroup===rootGroup)?rootGroup:currentGroup.group;}","function mainPageReloaded(){currentGroup=rootGroup;var separator=new Separator();logEntriesAndSeparators.push(separator);logItems.push(separator);currentGroup.addChild(separator);}","function closeWindow(){if(appender&&mainWindowExists()){appender.close(true);}else{window.close();}}","function hide(){if(appender&&mainWindowExists()){appender.hide();}}",'var mainWindow=window;var windowId="log4javascriptConsoleWindow_"+new Date().getTime()+"_"+(""+Math.random()).substr(2);function setMainWindow(win){mainWindow=win;mainWindow[windowId]=window;if(opener&&closeIfOpenerCloses){pollOpener();}}',"function pollOpener(){if(closeIfOpenerCloses){if(mainWindowExists()){setTimeout(pollOpener,500);}else{closeWindow();}}}","function mainWindowExists(){try{return(mainWindow&&!mainWindow.closed&&mainWindow[windowId]==window);}catch(ex){}","return false;}",'var logLevels=["TRACE","DEBUG","INFO","WARN","ERROR","FATAL"];function getCheckBox(logLevel){return $("switch_"+logLevel);}','function getIeWrappedLogContainer(){return $("log_wrapped");}','function getIeUnwrappedLogContainer(){return $("log_unwrapped");}',"function applyFilters(){for(var i=0;i<logLevels.length;i++){if(getCheckBox(logLevels[i]).checked){addClass(logMainContainer,logLevels[i]);}else{removeClass(logMainContainer,logLevels[i]);}}","updateSearchFromFilters();}",'function toggleAllLevels(){var turnOn=$("switch_ALL").checked;for(var i=0;i<logLevels.length;i++){getCheckBox(logLevels[i]).checked=turnOn;if(turnOn){addClass(logMainContainer,logLevels[i]);}else{removeClass(logMainContainer,logLevels[i]);}}}','function checkAllLevels(){for(var i=0;i<logLevels.length;i++){if(!getCheckBox(logLevels[i]).checked){getCheckBox("ALL").checked=false;return;}}','getCheckBox("ALL").checked=true;}',"function clearLog(){rootGroup.clear();currentGroup=rootGroup;logEntries=[];logItems=[];logEntriesAndSeparators=[];doSearch();}",'function toggleWrap(){var enable=$("wrap").checked;if(enable){addClass(logMainContainer,"wrap");}else{removeClass(logMainContainer,"wrap");}',"refreshCurrentMatch();}","var searchTimer=null;function scheduleSearch(){try{clearTimeout(searchTimer);}catch(ex){}","searchTimer=setTimeout(doSearch,500);}","function Search(searchTerm,isRegex,searchRegex,isCaseSensitive){this.searchTerm=searchTerm;this.isRegex=isRegex;this.searchRegex=searchRegex;this.isCaseSensitive=isCaseSensitive;this.matches=[];}","Search.prototype={hasMatches:function(){return this.matches.length>0;},hasVisibleMatches:function(){if(this.hasMatches()){for(var i=0;i<this.matches.length;i++){if(this.matches[i].isVisible()){return true;}}}","return false;},match:function(logEntry){var entryText=String(logEntry.formattedMessage);var matchesSearch=false;if(this.isRegex){matchesSearch=this.searchRegex.test(entryText);}else if(this.isCaseSensitive){matchesSearch=(entryText.indexOf(this.searchTerm)>-1);}else{matchesSearch=(entryText.toLowerCase().indexOf(this.searchTerm.toLowerCase())>-1);}","return matchesSearch;},getNextVisibleMatchIndex:function(){for(var i=currentMatchIndex+1;i<this.matches.length;i++){if(this.matches[i].isVisible()){return i;}}","for(i=0;i<=currentMatchIndex;i++){if(this.matches[i].isVisible()){return i;}}","return-1;},getPreviousVisibleMatchIndex:function(){for(var i=currentMatchIndex-1;i>=0;i--){if(this.matches[i].isVisible()){return i;}}","for(var i=this.matches.length-1;i>=currentMatchIndex;i--){if(this.matches[i].isVisible()){return i;}}",'return-1;},applyTo:function(logEntry){var doesMatch=this.match(logEntry);if(doesMatch){logEntry.group.expand();logEntry.setSearchMatch(true);var logEntryContent;var wrappedLogEntryContent;var searchTermReplacementStartTag="<span class=\\"searchterm\\">";var searchTermReplacementEndTag="<"+"/span>";var preTagName=isIe?"pre":"span";var preStartTag="<"+preTagName+" class=\\"pre\\">";var preEndTag="<"+"/"+preTagName+">";var startIndex=0;var searchIndex,matchedText,textBeforeMatch;if(this.isRegex){var flags=this.isCaseSensitive?"g":"gi";var capturingRegex=new RegExp("("+this.searchRegex.source+")",flags);var rnd=(""+Math.random()).substr(2);var startToken="%%s"+rnd+"%%";var endToken="%%e"+rnd+"%%";logEntryContent=logEntry.formattedMessage.replace(capturingRegex,startToken+"$1"+endToken);logEntryContent=escapeHtml(logEntryContent);var result;var searchString=logEntryContent;logEntryContent="";wrappedLogEntryContent="";while((searchIndex=searchString.indexOf(startToken,startIndex))>-1){var endTokenIndex=searchString.indexOf(endToken,searchIndex);matchedText=searchString.substring(searchIndex+startToken.length,endTokenIndex);textBeforeMatch=searchString.substring(startIndex,searchIndex);logEntryContent+=preStartTag+textBeforeMatch+preEndTag;logEntryContent+=searchTermReplacementStartTag+preStartTag+matchedText+',"preEndTag+searchTermReplacementEndTag;if(isIe){wrappedLogEntryContent+=textBeforeMatch+searchTermReplacementStartTag+","matchedText+searchTermReplacementEndTag;}","startIndex=endTokenIndex+endToken.length;}",'logEntryContent+=preStartTag+searchString.substr(startIndex)+preEndTag;if(isIe){wrappedLogEntryContent+=searchString.substr(startIndex);}}else{logEntryContent="";wrappedLogEntryContent="";var searchTermReplacementLength=searchTermReplacementStartTag.length+',"this.searchTerm.length+searchTermReplacementEndTag.length;var searchTermLength=this.searchTerm.length;var searchTermLowerCase=this.searchTerm.toLowerCase();var logTextLowerCase=logEntry.formattedMessage.toLowerCase();while((searchIndex=logTextLowerCase.indexOf(searchTermLowerCase,startIndex))>-1){matchedText=escapeHtml(logEntry.formattedMessage.substr(searchIndex,this.searchTerm.length));textBeforeMatch=escapeHtml(logEntry.formattedMessage.substring(startIndex,searchIndex));var searchTermReplacement=searchTermReplacementStartTag+","preStartTag+matchedText+preEndTag+searchTermReplacementEndTag;logEntryContent+=preStartTag+textBeforeMatch+preEndTag+searchTermReplacement;if(isIe){wrappedLogEntryContent+=textBeforeMatch+searchTermReplacementStartTag+","matchedText+searchTermReplacementEndTag;}","startIndex=searchIndex+searchTermLength;}","var textAfterLastMatch=escapeHtml(logEntry.formattedMessage.substr(startIndex));logEntryContent+=preStartTag+textAfterLastMatch+preEndTag;if(isIe){wrappedLogEntryContent+=textAfterLastMatch;}}","logEntry.setContent(logEntryContent,wrappedLogEntryContent);var logEntryMatches=logEntry.getSearchMatches();this.matches=this.matches.concat(logEntryMatches);}else{logEntry.setSearchMatch(false);logEntry.setContent(logEntry.formattedMessage,logEntry.formattedMessage);}","return doesMatch;},removeMatches:function(logEntries){var matchesToRemoveCount=0;var currentMatchRemoved=false;var matchesToRemove=[];var i,iLen,j,jLen;for(i=0,iLen=this.matches.length;i<iLen;i++){for(j=0,jLen=logEntries.length;j<jLen;j++){if(this.matches[i].belongsTo(logEntries[j])){matchesToRemove.push(this.matches[i]);if(i===currentMatchIndex){currentMatchRemoved=true;}}}}","var newMatch=currentMatchRemoved?null:this.matches[currentMatchIndex];if(currentMatchRemoved){for(i=currentMatchIndex,iLen=this.matches.length;i<iLen;i++){if(this.matches[i].isVisible()&&!array_contains(matchesToRemove,this.matches[i])){newMatch=this.matches[i];break;}}}","for(i=0,iLen=matchesToRemove.length;i<iLen;i++){array_remove(this.matches,matchesToRemove[i]);matchesToRemove[i].remove();}","if(this.hasVisibleMatches()){if(newMatch===null){setCurrentMatchIndex(0);}else{var newMatchIndex=0;for(i=0,iLen=this.matches.length;i<iLen;i++){if(newMatch===this.matches[i]){newMatchIndex=i;break;}}","setCurrentMatchIndex(newMatchIndex);}}else{currentMatchIndex=null;displayNoMatches();}}};function getPageOffsetTop(el,container){var currentEl=el;var y=0;while(currentEl&&currentEl!=container){y+=currentEl.offsetTop;currentEl=currentEl.offsetParent;}","return y;}",'function scrollIntoView(el){var logContainer=logMainContainer;if(!$("wrap").checked){var logContainerLeft=logContainer.scrollLeft;var logContainerRight=logContainerLeft+logContainer.offsetWidth;var elLeft=el.offsetLeft;var elRight=elLeft+el.offsetWidth;if(elLeft<logContainerLeft||elRight>logContainerRight){logContainer.scrollLeft=elLeft-(logContainer.offsetWidth-el.offsetWidth)/2;}}',"var logContainerTop=logContainer.scrollTop;var logContainerBottom=logContainerTop+logContainer.offsetHeight;var elTop=getPageOffsetTop(el)-getToolBarsHeight();var elBottom=elTop+el.offsetHeight;if(elTop<logContainerTop||elBottom>logContainerBottom){logContainer.scrollTop=elTop-(logContainer.offsetHeight-el.offsetHeight)/2;}}","function Match(logEntryLevel,spanInMainDiv,spanInUnwrappedPre,spanInWrappedDiv){this.logEntryLevel=logEntryLevel;this.spanInMainDiv=spanInMainDiv;if(isIe){this.spanInUnwrappedPre=spanInUnwrappedPre;this.spanInWrappedDiv=spanInWrappedDiv;}","this.mainSpan=isIe?spanInUnwrappedPre:spanInMainDiv;}",'Match.prototype={equals:function(match){return this.mainSpan===match.mainSpan;},setCurrent:function(){if(isIe){addClass(this.spanInUnwrappedPre,"currentmatch");addClass(this.spanInWrappedDiv,"currentmatch");var elementToScroll=$("wrap").checked?this.spanInWrappedDiv:this.spanInUnwrappedPre;scrollIntoView(elementToScroll);}else{addClass(this.spanInMainDiv,"currentmatch");scrollIntoView(this.spanInMainDiv);}},belongsTo:function(logEntry){if(isIe){return isDescendant(this.spanInUnwrappedPre,logEntry.unwrappedPre);}else{return isDescendant(this.spanInMainDiv,logEntry.mainDiv);}},setNotCurrent:function(){if(isIe){removeClass(this.spanInUnwrappedPre,"currentmatch");removeClass(this.spanInWrappedDiv,"currentmatch");}else{removeClass(this.spanInMainDiv,"currentmatch");}},isOrphan:function(){return isOrphan(this.mainSpan);},isVisible:function(){return getCheckBox(this.logEntryLevel).checked;},remove:function(){if(isIe){this.spanInUnwrappedPre=null;this.spanInWrappedDiv=null;}else{this.spanInMainDiv=null;}}};var currentSearch=null;var currentMatchIndex=null;function doSearch(){var searchBox=$("searchBox");var searchTerm=searchBox.value;var isRegex=$("searchRegex").checked;var isCaseSensitive=$("searchCaseSensitive").checked;var i;if(searchTerm===""){$("searchReset").disabled=true;$("searchNav").style.display="none";removeClass(document.body,"searching");removeClass(searchBox,"hasmatches");removeClass(searchBox,"nomatches");for(i=0;i<logEntries.length;i++){logEntries[i].clearSearch();logEntries[i].setContent(logEntries[i].formattedMessage,logEntries[i].formattedMessage);}','currentSearch=null;setLogContainerHeight();}else{$("searchReset").disabled=false;$("searchNav").style.display="block";var searchRegex;var regexValid;if(isRegex){try{searchRegex=isCaseSensitive?new RegExp(searchTerm,"g"):new RegExp(searchTerm,"gi");regexValid=true;replaceClass(searchBox,"validregex","invalidregex");searchBox.title="Valid regex";}catch(ex){regexValid=false;replaceClass(searchBox,"invalidregex","validregex");searchBox.title="Invalid regex: "+(ex.message?ex.message:(ex.description?ex.description:"unknown error"));return;}}else{searchBox.title="";removeClass(searchBox,"validregex");removeClass(searchBox,"invalidregex");}','addClass(document.body,"searching");currentSearch=new Search(searchTerm,isRegex,searchRegex,isCaseSensitive);for(i=0;i<logEntries.length;i++){currentSearch.applyTo(logEntries[i]);}',"setLogContainerHeight();if(currentSearch.hasVisibleMatches()){setCurrentMatchIndex(0);displayMatches();}else{displayNoMatches();}}}","function updateSearchFromFilters(){if(currentSearch){if(currentSearch.hasMatches()){if(currentMatchIndex===null){currentMatchIndex=0;}","var currentMatch=currentSearch.matches[currentMatchIndex];if(currentMatch.isVisible()){displayMatches();setCurrentMatchIndex(currentMatchIndex);}else{currentMatch.setNotCurrent();var nextVisibleMatchIndex=currentSearch.getNextVisibleMatchIndex();if(nextVisibleMatchIndex>-1){setCurrentMatchIndex(nextVisibleMatchIndex);displayMatches();}else{displayNoMatches();}}}else{displayNoMatches();}}}","function refreshCurrentMatch(){if(currentSearch&&currentSearch.hasVisibleMatches()){setCurrentMatchIndex(currentMatchIndex);}}",'function displayMatches(){replaceClass($("searchBox"),"hasmatches","nomatches");$("searchBox").title=""+currentSearch.matches.length+" matches found";$("searchNav").style.display="block";setLogContainerHeight();}','function displayNoMatches(){replaceClass($("searchBox"),"nomatches","hasmatches");$("searchBox").title="No matches found";$("searchNav").style.display="none";setLogContainerHeight();}','function toggleSearchEnabled(enable){enable=(typeof enable=="undefined")?!$("searchDisable").checked:enable;$("searchBox").disabled=!enable;$("searchReset").disabled=!enable;$("searchRegex").disabled=!enable;$("searchNext").disabled=!enable;$("searchPrevious").disabled=!enable;$("searchCaseSensitive").disabled=!enable;$("searchNav").style.display=(enable&&($("searchBox").value!=="")&&currentSearch&&currentSearch.hasVisibleMatches())?"block":"none";if(enable){removeClass($("search"),"greyedout");addClass(document.body,"searching");if($("searchHighlight").checked){addClass(logMainContainer,"searchhighlight");}else{removeClass(logMainContainer,"searchhighlight");}','if($("searchFilter").checked){addClass(logMainContainer,"searchfilter");}else{removeClass(logMainContainer,"searchfilter");}','$("searchDisable").checked=!enable;}else{addClass($("search"),"greyedout");removeClass(document.body,"searching");removeClass(logMainContainer,"searchhighlight");removeClass(logMainContainer,"searchfilter");}',"setLogContainerHeight();}",'function toggleSearchFilter(){var enable=$("searchFilter").checked;if(enable){addClass(logMainContainer,"searchfilter");}else{removeClass(logMainContainer,"searchfilter");}',"refreshCurrentMatch();}",'function toggleSearchHighlight(){var enable=$("searchHighlight").checked;if(enable){addClass(logMainContainer,"searchhighlight");}else{removeClass(logMainContainer,"searchhighlight");}}','function clearSearch(){$("searchBox").value="";doSearch();}','function searchNext(){if(currentSearch!==null&&currentMatchIndex!==null){currentSearch.matches[currentMatchIndex].setNotCurrent();var nextMatchIndex=currentSearch.getNextVisibleMatchIndex();if(nextMatchIndex>currentMatchIndex||confirm("Reached the end of the page. Start from the top?")){setCurrentMatchIndex(nextMatchIndex);}}}','function searchPrevious(){if(currentSearch!==null&&currentMatchIndex!==null){currentSearch.matches[currentMatchIndex].setNotCurrent();var previousMatchIndex=currentSearch.getPreviousVisibleMatchIndex();if(previousMatchIndex<currentMatchIndex||confirm("Reached the start of the page. Continue from the bottom?")){setCurrentMatchIndex(previousMatchIndex);}}}',"function setCurrentMatchIndex(index){currentMatchIndex=index;currentSearch.matches[currentMatchIndex].setCurrent();}",'function addClass(el,cssClass){if(!hasClass(el,cssClass)){if(el.className){el.className+=" "+cssClass;}else{el.className=cssClass;}}}','function hasClass(el,cssClass){if(el.className){var classNames=el.className.split(" ");return array_contains(classNames,cssClass);}',"return false;}",'function removeClass(el,cssClass){if(hasClass(el,cssClass)){var existingClasses=el.className.split(" ");var newClasses=[];for(var i=0,len=existingClasses.length;i<len;i++){if(existingClasses[i]!=cssClass){newClasses[newClasses.length]=existingClasses[i];}}','el.className=newClasses.join(" ");}}',"function replaceClass(el,newCssClass,oldCssClass){removeClass(el,oldCssClass);addClass(el,newCssClass);}","function getElementsByClass(el,cssClass,tagName){var elements=el.getElementsByTagName(tagName);var matches=[];for(var i=0,len=elements.length;i<len;i++){if(hasClass(elements[i],cssClass)){matches.push(elements[i]);}}","return matches;}","function $(id){return document.getElementById(id);}","function isDescendant(node,ancestorNode){while(node!=null){if(node===ancestorNode){return true;}","node=node.parentNode;}","return false;}","function isOrphan(node){var currentNode=node;while(currentNode){if(currentNode==document.body){return false;}","currentNode=currentNode.parentNode;}","return true;}",'function escapeHtml(str){return str.replace(/&/g,"&amp;").replace(/[<]/g,"&lt;").replace(/>/g,"&gt;");}',"function getWindowWidth(){if(window.innerWidth){return window.innerWidth;}else if(document.documentElement&&document.documentElement.clientWidth){return document.documentElement.clientWidth;}else if(document.body){return document.body.clientWidth;}","return 0;}","function getWindowHeight(){if(window.innerHeight){return window.innerHeight;}else if(document.documentElement&&document.documentElement.clientHeight){return document.documentElement.clientHeight;}else if(document.body){return document.body.clientHeight;}","return 0;}",'function getToolBarsHeight(){return $("switches").offsetHeight;}','function getChromeHeight(){var height=getToolBarsHeight();if(showCommandLine){height+=$("commandLine").offsetHeight;}',"return height;}",'function setLogContainerHeight(){if(logMainContainer){var windowHeight=getWindowHeight();$("body").style.height=getWindowHeight()+"px";logMainContainer.style.height=""+','Math.max(0,windowHeight-getChromeHeight())+"px";}}','function setCommandInputWidth(){if(showCommandLine){$("command").style.width=""+Math.max(0,$("commandLineContainer").offsetWidth-','($("evaluateButton").offsetWidth+13))+"px";}}',"window.onresize=function(){setCommandInputWidth();setLogContainerHeight();};if(!Array.prototype.push){Array.prototype.push=function(){for(var i=0,len=arguments.length;i<len;i++){this[this.length]=arguments[i];}","return this.length;};}","if(!Array.prototype.pop){Array.prototype.pop=function(){if(this.length>0){var val=this[this.length-1];this.length=this.length-1;return val;}};}","if(!Array.prototype.shift){Array.prototype.shift=function(){if(this.length>0){var firstItem=this[0];for(var i=0,len=this.length-1;i<len;i++){this[i]=this[i+1];}","this.length=this.length-1;return firstItem;}};}","if(!Array.prototype.splice){Array.prototype.splice=function(startIndex,deleteCount){var itemsAfterDeleted=this.slice(startIndex+deleteCount);var itemsDeleted=this.slice(startIndex,startIndex+deleteCount);this.length=startIndex;var argumentsArray=[];for(var i=0,len=arguments.length;i<len;i++){argumentsArray[i]=arguments[i];}","var itemsToAppend=(argumentsArray.length>2)?itemsAfterDeleted=argumentsArray.slice(2).concat(itemsAfterDeleted):itemsAfterDeleted;for(i=0,len=itemsToAppend.length;i<len;i++){this.push(itemsToAppend[i]);}","return itemsDeleted;};}","function array_remove(arr,val){var index=-1;for(var i=0,len=arr.length;i<len;i++){if(arr[i]===val){index=i;break;}}","if(index>=0){arr.splice(index,1);return index;}else{return false;}}","function array_removeFromStart(array,numberToRemove){if(Array.prototype.splice){array.splice(0,numberToRemove);}else{for(var i=numberToRemove,len=array.length;i<len;i++){array[i-numberToRemove]=array[i];}","array.length=array.length-numberToRemove;}","return array;}","function array_contains(arr,val){for(var i=0,len=arr.length;i<len;i++){if(arr[i]==val){return true;}}","return false;}","function getErrorMessage(ex){if(ex.message){return ex.message;}else if(ex.description){return ex.description;}",'return""+ex;}',"function moveCaretToEnd(input){if(input.setSelectionRange){input.focus();var length=input.value.length;input.setSelectionRange(length,length);}else if(input.createTextRange){var range=input.createTextRange();range.collapse(false);range.select();}","input.focus();}",'function stopPropagation(evt){if(evt.stopPropagation){evt.stopPropagation();}else if(typeof evt.cancelBubble!="undefined"){evt.cancelBubble=true;}}',"function getEvent(evt){return evt?evt:event;}","function getTarget(evt){return evt.target?evt.target:evt.srcElement;}",'function getRelatedTarget(evt){if(evt.relatedTarget){return evt.relatedTarget;}else if(evt.srcElement){switch(evt.type){case"mouseover":return evt.fromElement;case"mouseout":return evt.toElement;default:return evt.srcElement;}}}',"function cancelKeyEvent(evt){evt.returnValue=false;stopPropagation(evt);}",'function evalCommandLine(){var expr=$("command").value;evalCommand(expr);$("command").value="";}',"function evalLastCommand(){if(lastCommand!=null){evalCommand(lastCommand);}}",'var lastCommand=null;var commandHistory=[];var currentCommandIndex=0;function evalCommand(expr){if(appender){appender.evalCommandAndAppend(expr);}else{var prefix=">>> "+expr+"\\r\\n";try{log("INFO",prefix+eval(expr));}catch(ex){log("ERROR",prefix+"Error: "+getErrorMessage(ex));}}',"if(expr!=commandHistory[commandHistory.length-1]){commandHistory.push(expr);if(appender){appender.storeCommandHistory(commandHistory);}}","currentCommandIndex=(expr==commandHistory[currentCommandIndex])?currentCommandIndex+1:commandHistory.length;lastCommand=expr;}","//]]>","</script>",'<style type="text/css">',"body{background-color:white;color:black;padding:0;margin:0;font-family:tahoma,verdana,arial,helvetica,sans-serif;overflow:hidden}div#switchesContainer input{margin-bottom:0}div.toolbar{border-top:solid #ffffff 1px;border-bottom:solid #aca899 1px;background-color:#f1efe7;padding:3px 5px;font-size:68.75%}div.toolbar,div#search input{font-family:tahoma,verdana,arial,helvetica,sans-serif}div.toolbar input.button{padding:0 5px;font-size:100%}div.toolbar input.hidden{display:none}div#switches input#clearButton{margin-left:20px}div#levels label{font-weight:bold}div#levels label,div#options label{margin-right:5px}div#levels label#wrapLabel{font-weight:normal}div#search label{margin-right:10px}div#search label.searchboxlabel{margin-right:0}div#search input{font-size:100%}div#search input.validregex{color:green}div#search input.invalidregex{color:red}div#search input.nomatches{color:white;background-color:#ff6666}div#search input.nomatches{color:white;background-color:#ff6666}div#searchNav{display:none}div#commandLine{display:none}div#commandLine input#command{font-size:100%;font-family:Courier New,Courier}div#commandLine input#evaluateButton{}*.greyedout{color:gray !important;border-color:gray !important}*.greyedout *.alwaysenabled{color:black}*.unselectable{-khtml-user-select:none;-moz-user-select:none;user-select:none}div#log{font-family:Courier New,Courier;font-size:75%;width:100%;overflow:auto;clear:both;position:relative}div.group{border-color:#cccccc;border-style:solid;border-width:1px 0 1px 1px;overflow:visible}div.oldIe div.group,div.oldIe div.group *,div.oldIe *.logentry{height:1%}div.group div.groupheading span.expander{border:solid black 1px;font-family:Courier New,Courier;font-size:0.833em;background-color:#eeeeee;position:relative;top:-1px;color:black;padding:0 2px;cursor:pointer;cursor:hand;height:1%}div.group div.groupcontent{margin-left:10px;padding-bottom:2px;overflow:visible}div.group div.expanded{display:block}div.group div.collapsed{display:none}*.logentry{overflow:visible;display:none;white-space:pre}span.pre{white-space:pre}pre.unwrapped{display:inline !important}pre.unwrapped pre.pre,div.wrapped pre.pre{display:inline}div.wrapped pre.pre{white-space:normal}div.wrapped{display:none}body.searching *.logentry span.currentmatch{color:white !important;background-color:green !important}body.searching div.searchhighlight *.logentry span.searchterm{color:black;background-color:yellow}div.wrap *.logentry{white-space:normal !important;border-width:0 0 1px 0;border-color:#dddddd;border-style:dotted}div.wrap #log_wrapped,#log_unwrapped{display:block}div.wrap #log_unwrapped,#log_wrapped{display:none}div.wrap *.logentry span.pre{overflow:visible;white-space:normal}div.wrap *.logentry pre.unwrapped{display:none}div.wrap *.logentry span.wrapped{display:inline}div.searchfilter *.searchnonmatch{display:none !important}div#log *.TRACE,label#label_TRACE{color:#666666}div#log *.DEBUG,label#label_DEBUG{color:green}div#log *.INFO,label#label_INFO{color:#000099}div#log *.WARN,label#label_WARN{color:#999900}div#log *.ERROR,label#label_ERROR{color:red}div#log *.FATAL,label#label_FATAL{color:#660066}div.TRACE#log *.TRACE,div.DEBUG#log *.DEBUG,div.INFO#log *.INFO,div.WARN#log *.WARN,div.ERROR#log *.ERROR,div.FATAL#log *.FATAL{display:block}div#log div.separator{background-color:#cccccc;margin:5px 0;line-height:1px}","</style>","</head>",'<body id="body">','<div id="switchesContainer">','<div id="switches">','<div id="levels" class="toolbar">',"Filters:",'<input type="checkbox" id="switch_TRACE" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide trace messages" /><label for="switch_TRACE" id="label_TRACE">trace</label>','<input type="checkbox" id="switch_DEBUG" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide debug messages" /><label for="switch_DEBUG" id="label_DEBUG">debug</label>','<input type="checkbox" id="switch_INFO" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide info messages" /><label for="switch_INFO" id="label_INFO">info</label>','<input type="checkbox" id="switch_WARN" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide warn messages" /><label for="switch_WARN" id="label_WARN">warn</label>','<input type="checkbox" id="switch_ERROR" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide error messages" /><label for="switch_ERROR" id="label_ERROR">error</label>','<input type="checkbox" id="switch_FATAL" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide fatal messages" /><label for="switch_FATAL" id="label_FATAL">fatal</label>','<input type="checkbox" id="switch_ALL" onclick="toggleAllLevels(); applyFilters()" checked="checked" title="Show/hide all messages" /><label for="switch_ALL" id="label_ALL">all</label>',"</div>",'<div id="search" class="toolbar">','<label for="searchBox" class="searchboxlabel">Search:</label> <input type="text" id="searchBox" onclick="toggleSearchEnabled(true)" onkeyup="scheduleSearch()" size="20" />','<input type="button" id="searchReset" disabled="disabled" value="Reset" onclick="clearSearch()" class="button" title="Reset the search" />','<input type="checkbox" id="searchRegex" onclick="doSearch()" title="If checked, search is treated as a regular expression" /><label for="searchRegex">Regex</label>','<input type="checkbox" id="searchCaseSensitive" onclick="doSearch()" title="If checked, search is case sensitive" /><label for="searchCaseSensitive">Match case</label>','<input type="checkbox" id="searchDisable" onclick="toggleSearchEnabled()" title="Enable/disable search" /><label for="searchDisable" class="alwaysenabled">Disable</label>','<div id="searchNav">','<input type="button" id="searchNext" disabled="disabled" value="Next" onclick="searchNext()" class="button" title="Go to the next matching log entry" />','<input type="button" id="searchPrevious" disabled="disabled" value="Previous" onclick="searchPrevious()" class="button" title="Go to the previous matching log entry" />','<input type="checkbox" id="searchFilter" onclick="toggleSearchFilter()" title="If checked, non-matching log entries are filtered out" /><label for="searchFilter">Filter</label>','<input type="checkbox" id="searchHighlight" onclick="toggleSearchHighlight()" title="Highlight matched search terms" /><label for="searchHighlight" class="alwaysenabled">Highlight all</label>',"</div>","</div>",'<div id="options" class="toolbar">',"Options:",'<input type="checkbox" id="enableLogging" onclick="toggleLoggingEnabled()" checked="checked" title="Enable/disable logging" /><label for="enableLogging" id="enableLoggingLabel">Log</label>','<input type="checkbox" id="wrap" onclick="toggleWrap()" title="Enable / disable word wrap" /><label for="wrap" id="wrapLabel">Wrap</label>','<input type="checkbox" id="newestAtTop" onclick="toggleNewestAtTop()" title="If checked, causes newest messages to appear at the top" /><label for="newestAtTop" id="newestAtTopLabel">Newest at the top</label>','<input type="checkbox" id="scrollToLatest" onclick="toggleScrollToLatest()" checked="checked" title="If checked, window automatically scrolls to a new message when it is added" /><label for="scrollToLatest" id="scrollToLatestLabel">Scroll to latest</label>','<input type="button" id="clearButton" value="Clear" onclick="clearLog()" class="button" title="Clear all log messages"  />','<input type="button" id="hideButton" value="Hide" onclick="hide()" class="hidden button" title="Hide the console" />','<input type="button" id="closeButton" value="Close" onclick="closeWindow()" class="hidden button" title="Close the window" />',"</div>","</div>","</div>",'<div id="log" class="TRACE DEBUG INFO WARN ERROR FATAL"></div>','<div id="commandLine" class="toolbar">','<div id="commandLineContainer">','<input type="text" id="command" title="Enter a JavaScript command here and hit return or press \'Evaluate\'" />','<input type="button" id="evaluateButton" value="Evaluate" class="button" title="Evaluate the command" onclick="evalCommandLine()" />',"</div>","</div>","</body>","</html>",""];
},r=[];ConsoleAppender=function(){};var i=1;ConsoleAppender.prototype=new Appender,ConsoleAppender.prototype.create=function(e,t,o,a,s,l,u,c){function p(e,t){this.loggingEvent=e,this.levelName=e.level.name,this.formattedMessage=t}function f(e,t){this.name=e,this.initiallyExpanded=t}function d(){}var h=this,g=!1,m=!1,v=!1,y=!1,$=[],b=!0,x=i++;a=extractBooleanFromParam(a,this.defaults.initiallyMinimized),o=extractBooleanFromParam(o,this.defaults.lazyInit),s=extractBooleanFromParam(s,this.defaults.useDocumentWrite);var w=this.defaults.newestMessageAtTop,C=this.defaults.scrollToLatestMessage;l=l?l:this.defaults.width,u=u?u:this.defaults.height;var E=this.defaults.maxMessages,S=this.defaults.showCommandLine,T=this.defaults.commandLineObjectExpansionDepth,L=this.defaults.showHideButton,A=this.defaults.showCloseButton;this.defaults.showLogEntryDeleteButtons;this.setLayout(this.defaults.layout);var k,M,N,D,I,O=e?"InPageAppender":"PopUpAppender",j=function(e){return m?(handleError(O+": configuration option '"+e+"' may not be set after the appender has been initialized"),!1):!0},R=function(){return v&&b&&!y};this.isNewestMessageAtTop=function(){return w},this.setNewestMessageAtTop=function(e){w=bool(e),R()&&D().setNewestAtTop(w)},this.isScrollToLatestMessage=function(){return C},this.setScrollToLatestMessage=function(e){C=bool(e),R()&&D().setScrollToLatest(C)},this.getWidth=function(){return l},this.setWidth=function(e){j("width")&&(l=extractStringFromParam(e,l))},this.getHeight=function(){return u},this.setHeight=function(e){j("height")&&(u=extractStringFromParam(e,u))},this.getMaxMessages=function(){return E},this.setMaxMessages=function(e){E=extractIntFromParam(e,E),R()&&D().setMaxMessages(E)},this.isShowCommandLine=function(){return S},this.setShowCommandLine=function(e){S=bool(e),R()&&D().setShowCommandLine(S)},this.isShowHideButton=function(){return L},this.setShowHideButton=function(e){L=bool(e),R()&&D().setShowHideButton(L)},this.isShowCloseButton=function(){return A},this.setShowCloseButton=function(e){A=bool(e),R()&&D().setShowCloseButton(A)},this.getCommandLineObjectExpansionDepth=function(){return T},this.setCommandLineObjectExpansionDepth=function(e){T=extractIntFromParam(e,T)};var P=a;this.isInitiallyMinimized=function(){return a},this.setInitiallyMinimized=function(e){j("initiallyMinimized")&&(a=bool(e),P=a)},this.isUseDocumentWrite=function(){return s},this.setUseDocumentWrite=function(e){j("useDocumentWrite")&&(s=bool(e))},p.prototype.append=function(){D().log(this.levelName,this.formattedMessage)},f.prototype.append=function(){D().group(this.name,this.initiallyExpanded)},d.prototype.append=function(){D().groupEnd()};var F=function(){N(),g?y&&te&&M():k(),N()&&H()};this.append=function(e){if(b){var t=h.getLayout().formatWithException(e);$.push(new p(e,t)),F()}},this.group=function(e,t){b&&($.push(new f(e,t)),F())},this.groupEnd=function(){b&&($.push(new d),F())};var H=function(){for(;$.length>0;)$.shift().append();c&&D().focus()};this.setAddedToLogger=function(e){this.loggers.push(e),enabled&&!o&&k()},this.clear=function(){R()&&D().clearLog(),$.length=0},this.focus=function(){R()&&D().focus()},this.focusCommandLine=function(){R()&&D().focusCommandLine()},this.focusSearch=function(){R()&&D().focusSearch()};var B=window;this.getCommandWindow=function(){return B},this.setCommandWindow=function(e){B=e},this.executeLastCommand=function(){R()&&D().evalLastCommand()};var _=new PatternLayout("%m");this.getCommandLayout=function(){return _},this.setCommandLayout=function(e){_=e},this.evalCommandAndAppend=function(e){var t={appendResult:!0,isError:!1},n="";try{var r,i;!B.eval&&B.execScript&&B.execScript("null");var o={};for(i=0,len=V.length;i<len;i++)o[V[i][0]]=V[i][1];var a=[],s=function(e){a.push([e,B[e]])};s("appender"),B.appender=h,s("commandReturnValue"),B.commandReturnValue=t,s("commandLineFunctionsHash"),B.commandLineFunctionsHash=o;var l=function(e){s(e),B[e]=function(){return this.commandLineFunctionsHash[e](h,arguments,t)}};for(i=0,len=V.length;i<len;i++)l(V[i][0]);for(B===window&&B.execScript?(s("evalExpr"),s("result"),window.evalExpr=e,B.execScript("window.result=eval(window.evalExpr);"),r=window.result):r=B.eval(e),n=isUndefined(r)?r:formatObjectExpansion(r,T),i=0,len=a.length;i<len;i++)B[a[i][0]]=a[i][1]}catch(u){n="Error evaluating command: "+getExceptionStringRep(u),t.isError=!0}if(t.appendResult){var c=">>> "+e;isUndefined(n)||(c+=newLine+n);var p=t.isError?Level.ERROR:Level.INFO,f=new LoggingEvent(null,new Date,p,[c],null),d=this.getLayout();this.setLayout(_),this.append(f),this.setLayout(d)}};var V=r.concat([]);this.addCommandLineFunction=function(e,t){V.push([e,t])};var U="log4javascriptCommandHistory";this.storeCommandHistory=function(e){setCookie(U,e.join(","))};var q=function(e){var t=n();e.open();for(var r=0,i=t.length;i>r;r++)e.writeln(t[r]);e.close()};this.setEventTypes(["load","unload"]);var W=function(){var e=D();e.setAppender(h),e.setNewestAtTop(w),e.setScrollToLatest(C),e.setMaxMessages(E),e.setShowCommandLine(S),e.setShowHideButton(L),e.setShowCloseButton(A),e.setMainWindow(window);var t=getCookie(U);t&&(e.commandHistory=t.split(","),e.currentCommandIndex=e.commandHistory.length),h.dispatchEvent("load",{win:e})};this.unload=function(){logLog.debug("unload "+this+", caller: "+this.unload.caller),y||(logLog.debug("really doing unload "+this),y=!0,v=!1,m=!1,h.dispatchEvent("unload",{}))};var G=function(e,t,n,r){function i(){try{y&&clearInterval(o),e(D())&&(clearInterval(o),n())}catch(t){clearInterval(o),b=!1,handleError(r,t)}}var o=setInterval(i,t)},z=function(){var e=document.domain!=location.hostname;return s?"":getBaseUrl()+"console.html"+(e?"?log4javascript_domain="+escape(document.domain):"")};if(e){var K=null,X=[];this.addCssProperty=function(e,t){j("cssProperties")&&X.push([e,t])};var Y,J=!1,Q=uniqueId+"_InPageAppender_"+x;this.hide=function(){g&&m&&(R()&&D().$("command").blur(),Y.style.display="none",P=!0)},this.show=function(){g&&(m?(Y.style.display="block",this.setShowCommandLine(S),P=!1):J||M(!0))},this.isVisible=function(){return!P&&!y},this.close=function(e){y||e&&!confirm("This will permanently remove the console from the page. No more messages will be logged. Do you wish to continue?")||(Y.parentNode.removeChild(Y),this.unload())},I=function(){function e(){try{a||h.show(),W(),v=!0,H()}catch(e){b=!1,handleError(n,e)}}function t(){try{var t=function(e){return isLoaded(e)};s&&q(D().document),t(D())?e():G(t,100,e,n)}catch(r){b=!1,handleError(n,r)}}var n="InPageAppender.open: unable to create console iframe";P=!1,Y=K.appendChild(document.createElement("div")),Y.style.width=l,Y.style.height=u,Y.style.border="solid gray 1px";for(var r=0,i=X.length;i>r;r++)Y.style[X[r][0]]=X[r][1];var o=s?"":" src='"+z()+"'";Y.innerHTML="<iframe id='"+Q+"' name='"+Q+"' width='100%' height='100%' frameborder='0'"+o+" scrolling='no'></iframe>",y=!1;var c=function(e){try{return bool(e)&&bool(e.document)}catch(t){return!1}};c(D())?t():G(c,100,t,n),m=!0},M=function(e){if(e||!a){var n=function(){if(t)try{var e=document.getElementById(t);1==e.nodeType&&(K=e),I()}catch(n){handleError("InPageAppender.init: invalid container element '"+t+"' supplied",n)}else K=document.createElement("div"),K.style.position="fixed",K.style.left="0",K.style.right="0",K.style.bottom="0",document.body.appendChild(K),h.addCssProperty("borderWidth","1px 0 0 0"),h.addCssProperty("zIndex",1e6),I()};pageLoaded&&t&&t.appendChild?(K=t,I()):pageLoaded?n():log4javascript.addEventListener("load",n),J=!0}},k=function(){M(),g=!0},D=function(){var e=window.frames[Q];return e?e:void 0},N=function(){return b&&!y?(m&&!v&&D()&&isLoaded(D())&&(v=!0),v):!1}}else{var Z=h.defaults.useOldPopUp,ee=h.defaults.complainAboutPopUpBlocking,te=this.defaults.reopenWhenClosed;this.isUseOldPopUp=function(){return Z},this.setUseOldPopUp=function(e){j("useOldPopUp")&&(Z=bool(e))},this.isComplainAboutPopUpBlocking=function(){return ee},this.setComplainAboutPopUpBlocking=function(e){j("complainAboutPopUpBlocking")&&(ee=bool(e))},this.isFocusPopUp=function(){return c},this.setFocusPopUp=function(e){c=bool(e)},this.isReopenWhenClosed=function(){return te},this.setReopenWhenClosed=function(e){te=bool(e)},this.close=function(){logLog.debug("close "+this);try{ne.close(),this.unload()}catch(e){}},this.hide=function(){logLog.debug("hide "+this),R()&&this.close()},this.show=function(){logLog.debug("show "+this),m||I()},this.isVisible=function(){return N()};var ne;I=function(){function e(){D().setCloseIfOpenerCloses(!Z||!s),W(),v=!0,H(),G(a,500,c,"PopUpAppender.checkPopUpClosed: error checking pop-up window")}var t="width="+l+",height="+u+",status,resizable",n="";try{var r=window.frameElement;r&&(n="_"+r.tagName+"_"+(r.name||r.id||""))}catch(i){n="_inaccessibleParentFrame"}var o="PopUp_"+location.host.replace(/[^a-z0-9]/gi,"_")+"_"+x+n;Z&&s||(o=o+"_"+uniqueId);var a=function(e){if(y)return!0;try{return bool(e)&&e.closed}catch(t){}return!1},c=function(){y||h.unload()};try{if(ne=window.open(z(),o,t),y=!1,m=!0,ne&&ne.document)if(s&&Z&&isLoaded(ne))ne.mainPageReloaded(),e();else{s&&q(ne.document);var p=function(e){return bool(e)&&isLoaded(e)};isLoaded(ne)?e():G(p,100,e,"PopUpAppender.init: unable to create console window")}else b=!1,logLog.warn("PopUpAppender.init: pop-ups blocked, please unblock to use PopUpAppender"),ee&&handleError("log4javascript: pop-up windows appear to be blocked. Please unblock them to use pop-up logging.")}catch(f){handleError("PopUpAppender.init: error creating pop-up",f)}},M=function(){a||I()},k=function(){M(),g=!0},D=function(){return ne},N=function(){if(b&&!isUndefined(ne)&&!y){if(ne.closed||v&&isUndefined(ne.closed))return h.unload(),logLog.debug("PopUpAppender: pop-up closed"),!1;!v&&isLoaded(ne)&&(v=!0)}return b&&v&&!y}}this.getConsoleWindow=D},ConsoleAppender.addGlobalCommandLineFunction=function(e,t){r.push([e,t])},e.prototype=new ConsoleAppender,e.prototype.defaults={layout:new PatternLayout("%d{HH:mm:ss} %-5p - %m{1}%n"),initiallyMinimized:!1,focusPopUp:!1,lazyInit:!0,useOldPopUp:!0,complainAboutPopUpBlocking:!0,newestMessageAtTop:!1,scrollToLatestMessage:!0,width:"600",height:"400",reopenWhenClosed:!1,maxMessages:null,showCommandLine:!0,commandLineObjectExpansionDepth:1,showHideButton:!1,showCloseButton:!0,showLogEntryDeleteButtons:!0,useDocumentWrite:!0},e.prototype.toString=function(){return"PopUpAppender"},log4javascript.PopUpAppender=e,t.prototype=new ConsoleAppender,t.prototype.defaults={layout:new PatternLayout("%d{HH:mm:ss} %-5p - %m{1}%n"),initiallyMinimized:!1,lazyInit:!0,newestMessageAtTop:!1,scrollToLatestMessage:!0,width:"100%",height:"220px",maxMessages:null,showCommandLine:!0,commandLineObjectExpansionDepth:1,showHideButton:!1,showCloseButton:!1,showLogEntryDeleteButtons:!0,useDocumentWrite:!0},t.prototype.toString=function(){return"InPageAppender"},log4javascript.InPageAppender=t,log4javascript.InlineAppender=t}(),function(){function e(e){var t=0;for(var n in e)t=Math.max(toStr(n).length,t);var r=[];for(n in e){var i,o="  "+padWithSpaces(toStr(n),t+2);try{i=splitIntoLines(toStr(e[n])).join(padWithSpaces(newLine,t+6))}catch(a){i="[Error obtaining property. Details: "+getExceptionMessage(a)+"]"}r.push(o+i)}return r.join(newLine)}function t(e,n,r,l,u){function c(e){return e.nodeType==i.TEXT_NODE&&/^[ \t\r\n]*$/.test(e.nodeValue)}function p(e){return e.toString().replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/"/g,"&quot;")}function f(e){for(var t=e.style.cssText.split(";"),n="",r=0,i=t.length;i>r;r++){var o=t[r].split(":"),a=[];/^\s*$/.test(o[0])||a.push(trim(o[0]).toLowerCase()+":"+trim(o[1])),n=a.join(";")}return n}function d(e){if(e.prefix)return e.prefix;if(e.outerHTML){var t=new RegExp("<([^:]+):"+e.tagName+"[^>]*>","i");if(t.test(e.outerHTML))return RegExp.$1.toLowerCase()}return""}n="undefined"==typeof n?!0:!!n,"string"!=typeof r&&(r=""),l=!!l,u=!!u;var h,g="<",m=">";if(!n||e.nodeType==i.DOCUMENT_FRAGMENT_NODE){h="";for(var v=0,y=e.childNodes.length;y>v;v++)h+=t(e.childNodes[v],!0,r+s);return h}switch(e.nodeType){case i.ELEMENT_NODE:var $=e.tagName.toLowerCase();h=l?newLine+r:"",h+=g;var b=d(e),x=!!b;for(x&&(h+=b+":"),h+=$,v=0,y=e.attributes.length;y>v;v++){var w=e.attributes[v];w.specified&&null!==w.nodeValue&&"style"!==w.nodeName.toLowerCase()&&"string"==typeof w.nodeValue&&0!==w.nodeName.indexOf("_moz")&&(h+=" "+w.nodeName.toLowerCase()+'="',h+=p(w.nodeValue),h+='"')}if(e.style.cssText){var C=f(e);""!==C&&(h+=' style="'+f(e)+'"')}if(array_contains(a,$)||x&&!e.hasChildNodes())h+="/"+m;else{h+=m;for(var E=!(1===e.childNodes.length&&e.childNodes[0].nodeType===i.TEXT_NODE),S=array_contains(o,$),v=0,y=e.childNodes.length;y>v;v++)h+=t(e.childNodes[v],!0,r+s,E,S);var T=g+"/"+$+m;h+=E?newLine+r+T:T}return h;case i.TEXT_NODE:if(c(e))h="";else{if(u)h=e.nodeValue;else{for(var L=splitIntoLines(trim(e.nodeValue)),A=[],v=0,y=L.length;y>v;v++)A[v]=trim(L[v]);h=A.join(newLine+r)}l&&(h=newLine+r+h)}return h;case i.CDATA_SECTION_NODE:return"<![CDATA["+e.nodeValue+"]]>"+newLine;case i.DOCUMENT_NODE:h="";for(var v=0,y=e.childNodes.length;y>v;v++)h+=t(e.childNodes[v],!0,r);return h;default:return""}}function n(){ConsoleAppender.addGlobalCommandLineFunction("$",function(e,t,n){return document.getElementById(t[0])}),ConsoleAppender.addGlobalCommandLineFunction("dir",function(t,n,r){for(var i=[],o=0,a=n.length;a>o;o++)i[o]=e(n[o]);return i.join(newLine+newLine)}),ConsoleAppender.addGlobalCommandLineFunction("dirxml",function(e,n,r){for(var i=[],o=0,a=n.length;a>o;o++){e.getCommandWindow();i[o]=t(n[o])}return i.join(newLine+newLine)}),ConsoleAppender.addGlobalCommandLineFunction("cd",function(e,t,n){var r,i;return 0===t.length||""===t[0]?(r=window,i="Command line set to run in main window"):t[0].window==t[0]?(r=t[0],i="Command line set to run in frame '"+t[0].name+"'"):(r=window.frames[t[0]],r?i="Command line set to run in frame '"+t[0]+"'":(n.isError=!0,i="Frame '"+t[0]+"' does not exist",r=e.getCommandWindow())),e.setCommandWindow(r),i}),ConsoleAppender.addGlobalCommandLineFunction("clear",function(e,t,n){n.appendResult=!1,e.clear()}),ConsoleAppender.addGlobalCommandLineFunction("keys",function(e,t,n){var r=[];for(var i in t[0])r.push(i);return r}),ConsoleAppender.addGlobalCommandLineFunction("values",function(e,t,n){var r=[];for(var i in t[0])try{r.push(t[0][i])}catch(o){logLog.warn("values(): Unable to obtain value for key "+i+". Details: "+getExceptionMessage(o))}return r}),ConsoleAppender.addGlobalCommandLineFunction("expansionDepth",function(e,t,n){var r=parseInt(t[0],10);return isNaN(r)||0>r?(n.isError=!0,""+t[0]+" is not a valid expansion depth"):(e.setCommandLineObjectExpansionDepth(r),"Object expansion depth set to "+r)})}function r(){n()}var i={ELEMENT_NODE:1,ATTRIBUTE_NODE:2,TEXT_NODE:3,CDATA_SECTION_NODE:4,ENTITY_REFERENCE_NODE:5,ENTITY_NODE:6,PROCESSING_INSTRUCTION_NODE:7,COMMENT_NODE:8,DOCUMENT_NODE:9,DOCUMENT_TYPE_NODE:10,DOCUMENT_FRAGMENT_NODE:11,NOTATION_NODE:12},o=["script","pre"],a=["br","img","hr","param","link","area","input","col","base","meta"],s="  ";r()}(),log4javascript.setDocumentReady=function(){pageLoaded=!0,log4javascript.dispatchEvent("load",{})},window.addEventListener)window.addEventListener("load",log4javascript.setDocumentReady,!1);else if(window.attachEvent)window.attachEvent("onload",log4javascript.setDocumentReady);else{var oldOnload=window.onload;"function"!=typeof window.onload?window.onload=log4javascript.setDocumentReady:window.onload=function(e){oldOnload&&oldOnload(e),log4javascript.setDocumentReady()}}return window.log4javascript=log4javascript,log4javascript}();!function(e,t){"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?module.exports=t():e.store=t()}(this,function(){function e(){try{return o in r&&r[o]}catch(e){return!1}}var t,n={},r="undefined"!=typeof window?window:global,i=r.document,o="localStorage",a="script";if(n.disabled=!1,n.version="1.3.20",n.set=function(e,t){},n.get=function(e,t){},n.has=function(e){return void 0!==n.get(e)},n.remove=function(e){},n.clear=function(){},n.transact=function(e,t,r){null==r&&(r=t,t=null),null==t&&(t={});var i=n.get(e,t);r(i),n.set(e,i)},n.getAll=function(){},n.forEach=function(){},n.serialize=function(e){return JSON.stringify(e)},n.deserialize=function(e){if("string"==typeof e)try{return JSON.parse(e)}catch(t){return e||void 0}},e())t=r[o],n.set=function(e,r){return void 0===r?n.remove(e):(t.setItem(e,n.serialize(r)),r)},n.get=function(e,r){var i=n.deserialize(t.getItem(e));return void 0===i?r:i},n.remove=function(e){t.removeItem(e)},n.clear=function(){t.clear()},n.getAll=function(){var e={};return n.forEach(function(t,n){e[t]=n}),e},n.forEach=function(e){for(var r=0;r<t.length;r++){var i=t.key(r);e(i,n.get(i))}};else if(i&&i.documentElement.addBehavior){var s,l;try{l=new ActiveXObject("htmlfile"),l.open(),l.write("<"+a+">document.w=window</"+a+'><iframe src="/favicon.ico"></iframe>'),l.close(),s=l.w.frames[0].document,t=s.createElement("div")}catch(u){t=i.createElement("div"),s=i.body}var c=function(e){return function(){var r=Array.prototype.slice.call(arguments,0);r.unshift(t),s.appendChild(t),t.addBehavior("#default#userData"),t.load(o);var i=e.apply(n,r);return s.removeChild(t),i}},p=new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]","g"),f=function(e){return e.replace(/^d/,"___$&").replace(p,"___")};n.set=c(function(e,t,r){return t=f(t),void 0===r?n.remove(t):(e.setAttribute(t,n.serialize(r)),e.save(o),r)}),n.get=c(function(e,t,r){t=f(t);var i=n.deserialize(e.getAttribute(t));return void 0===i?r:i}),n.remove=c(function(e,t){t=f(t),e.removeAttribute(t),e.save(o)}),n.clear=c(function(e){var t=e.XMLDocument.documentElement.attributes;e.load(o);for(var n=t.length-1;n>=0;n--)e.removeAttribute(t[n].name);e.save(o)}),n.getAll=function(e){var t={};return n.forEach(function(e,n){t[e]=n}),t},n.forEach=c(function(e,t){for(var r,i=e.XMLDocument.documentElement.attributes,o=0;r=i[o];++o)t(r.name,n.deserialize(e.getAttribute(r.name)))})}try{var d="__storejs__";n.set(d,d),n.get(d)!=d&&(n.disabled=!0),n.remove(d)}catch(u){n.disabled=!0}return n.enabled=!n.disabled,n});
//# sourceMappingURL=data:application/json;base64,
